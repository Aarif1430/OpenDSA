{
  "translations" :{
    "en": {
      "sc1": "Let's think about the domino effect in terms of recursion. When you stand up a bunch of dominos properly, pushing the first one causes all of the others to fall over one by one until the last domino is reached.",
      "sc2": "To model the domino effect recursively, think of it as a function to tip n dominos over. Use the functional notation <code>Domino(n)</code> to represent the solution on $n$ dominos. Thus, <code>Domino(1)</code> is the solution to tip a single domino over, <code>Domino(2)</code> is the solution to tip two, <code>Domino(3)</code> is the solution to tip three, etc.",
      "sc3": "If there is only one domino, we just tip it over manually. This is the base case, solved by calling function <code>TipOver(1)</code>.",
      "sc4": "If there are two dominos, after the first domino is tipped over the second domino will be tipped over subsequently. So, <code>Domino(2)</code> is solved by executing <code>Domino(1)<code>, followed by tipping the second domino over.",
      "sc5": "Similarly, if there are three dominos, after the first and second dominos are tipped over, the third domino will be tipped over subsequently. So, <code>Domino(3)</code> is solved by executing <code>Domino(2)</code> (to tip over the first two dominos) followed by tipping the third domino over.",
      "sc6": "More generally, <code>Domino(n)</code> is solved by executing <code>Domino(n-1)</code>, followed by tipping the $n$th domino over.",
      "sc8": "Of course, the call to <code>Domino(n-1)</code> recursively reduces the problem in the recursion winding phase",
      "sc9": "When the base case is reached, domino 1 is tipped.",
      "sc10": "In the recursion unwindng phase, dominoes 2,3,..., $n$ are tipped one after the other."
    }
  },
  "code" : {
    "Pseudo": {
      "url": "../../../SourceCode/Pseudo/RecurTutor/TrcDmn.txt",
      "lineNumbers": false,
      "top": 130,
      "left": 145,
      "tags": {
      }
    }
  }
}
