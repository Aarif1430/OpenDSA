<div id="content">
<ODSAtitle>Hashing</ODSAtitle>
<ODSAprereq "Search" />

<input type="button" float="right" name="about" value="About"/>

<script>
  // Support for "About" button
  $('input[name="about"]').click(about); // Set callback action
  function about() { // This is what we pop up
    var mystring = "Hashing tutorial: Text written by Cliff Shaffer. Hashing AV written by Nayef Copty, Mauricio De La Barra, and Cliff Shaffer, 2012. Exercises implemented by Doaa Altawary." + JSAV.version();
    alert(mystring);
  }
</script>

<p>
Hashing is a method for storing and retrieving records from a database.
It lets you insert, delete, and search for records based on a search
key value. When properly implemented, these operations can be performed
in constant time. In fact, a properly tuned hash system typically looks at only 
one or two records for each search, insert, or delete operation.
This is far better than the O(log <i>n</i>) average cost required to
do a binary search on a sorted array of 
<i>n</i> records, or the O(log <i>n</i>) average cost required to do
an operation on a binary search tree. However, even though hashing is
based on a very simple idea, it is surprisingly difficult to implement
properly. Designers need to pay careful attention to all 
of the details involved with implementing a hash system.
</p>
  
<p>
A hash system stores records in an array called a <b>hash table</b>,
which we will call <b>HT</b>.
Hashing works by performing a computation on a search key
<i>K</i> in a way that is intended to identify the position in
<b>HT</b> that contains the record with key <i>K</i>.
The function that does this calculation is called the
<b>hash function</b>, and will be denoted by the letter <b>h</b>.
Since hashing schemes place records in the table in whatever order
satisfies the needs of the address calculation, records are
not ordered by value.
A position in the hash table is also known as a <b>slot</b>.
The number of slots in hash table <b>HT</b> will be denoted by the
variable <i>M</i> with slots numbered from 0 to <i>M</i> - 1.
</p>

<p>
The goal for a hashing system is to arrange things such that, for any key
value <i>K</i> and some hash function <b>h</b>,
<i>i</i> = <b>h</b>(<i>K</i>) is a slot in the table such that
0 &lt;= <i>i</i> &lt; <i>M</i>,
and we have the key of the record stored at
<b>HT</b>[<i>i</i>] equal to <i>K</i>.
</p>
	
<p>
Hashing is not good for applications where multiple
records with the same key value are permitted.
Hashing is not a good method for answering range searches.
In other words, we cannot easily find all records (if any) whose key
values fall within a certain range.
Nor can we easily find the record with the minimum or maximum key
value, or visit the records in key order.
Hashing is most appropriate for answering the question, ``What record,
if any, has key value <i>K</i>?''
<b>For applications where all search is done by exact-match queries,
hashing is the search method of choice because it is extremely
efficient when implemented correctly.</b>
As this tutorial shows, however, there are many approaches
to hashing and it is easy to devise an inefficient implementation.
Hashing is suitable for both in-memory and disk-based searching and
is one of the two most widely used methods for organizing large
databases stored on disk (the other is the B-tree).
</p>
	
<p>
As a simple (though unrealistic) example of hashing,
consider storing <i>n</i> records, each with a unique key value in the
range 0 to <i>n</i>-1.
A record with key <i>k</i> can be stored in
<b>HT</b>[<i>k</i>], and so the hash function is
<b>h</b>(<i>k</i>) = <i>k</i>.
To find the record with key value <i>k</i>, look in
<b>HT</b>[<i>k</i>].
</p>

<p>
Here is a visualization for simple mod function and linear probing.
</p>

<center>
 <iframe src="../AV/hash.html?method=1&collision=1"
	 type="text/javascript" width="812" height="640"
	 frameborder="0" marginwidth="0" marginheight="0"
	 scrolling="no">
</iframe>
</center>

<p>
Here is a visualization where you choose the hash function and
collision resolution method.
</p>

<center>
 <iframe src="../AV/hash.html"
	 type="text/javascript" width="812" height="640"
	 frameborder="0" marginwidth="0" marginheight="0"
	 scrolling="no">
</iframe>
</center>

<p>
This exercise is just a demonstration of putting a JSAV array on the
page with a KA exercise. The array is interactive, but this is not
tied to the exercise.
</p>

<ODSAembed "hide" "Question 1">../Exercises/Hash_displayTable.html</ODSAembed>

<p>
In this example, the array is embedded inside the exercise, and the
exercise controls and updates its display styles. But the array is not
directly interactive.
</p>

<ODSAembed "hide" "Question 2">../Exercises/HashJSAV.html</ODSAembed>

<p>
Here are some multiple choice questions for hashing.
</p>

<ODSAembed "hide" "Question 3">../Exercises/HashingMC.html</ODSAembed>

</div>
