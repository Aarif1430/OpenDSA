<div id="content">
<ODSAtitle>The class NP</ODSAtitle>
<ODSAauthor>Pilu Crescenzi</ODSAauthor>
<ODSAyear>2012</ODSAyear>
<ODSAprereq "LimComp" />

<style>
  #container .jsavarray {
     left: -10px;
  }

  p.jsavoutput.jsavline {
    height: 80px;
    margin: 10px, 0px;
  }
  .jsavcontainer {
    width: 760px;
    background-color: #eed;
    margin: 0 auto;
    border: 0px
  }
  .jsavcounter {
    float: left;
    width: 100px;
    margin-top: 15px;
  }
  .jsavsettings {
    float: right;
  }
  .jsavsettings:after {
    clear: both;
    display: block;
    content: "";
  }
  .jsavcontrols {
    width: 650px;
  }
  .jsavcontrols a {
    margin: 0 40px;
  }
  .jsavarray { margin: 0; margin-top: -1px; height: 40px; min-height: 40px; min-width: 40px}
  .jsavarray li { border-radius: 0 !important; height: 40px; width: 40px; font-size: 12px; line-height: 40px;}
  .jsavarray:nth-of-type(3n+1) { border-width: 2px;}
  .jsavarray li:nth-of-type(3n) { border-right: 2px solid black;}
  .jsavarray li:first-of-type { border-left: 2px solid black;}
  .jsavarray:nth-of-type(3n-2) li { border-top: 2px solid black;}
  .jsavarray:nth-of-type(9) li { border-bottom: 2px solid black;}
</style>

<script>
  var speed = 100;
  var BLACK = "rgb(0, 0, 0)";
  var RED = "rgb(255, 0, 0)";
  var GREEN = "rgb(0, 255, 0)";
  function logic1(avi, a, row, column, n, color, h, k) {
    var j = 0;
    for (j=0; j<n; j++) {
      a[row[j]].css([column[j]], {"color": color});
    }
    a[h].highlight([k]);
    avi.clearumsg();
    if (n>0) msg = " and by the red cells";
    avi.umsg("The value of the yellow cell is determined by the sub-square it belongs to"+msg);
    avi.step();
  }
  function logic2(avi, a, row, column, n, color, h, k, v) {
    var j = 0;
    for (j=0; j<n; j++) {
      a[row[j]].css([column[j]], {"color": color});
    }
    a[h].setvalue(k,v);
    avi.umsg("The value of the yellow cell has been set equal to " + v);
    avi.step();
    a[h].unhighlight([k]);
    avi.clearumsg();
  }
  function allcandidates(avi, a) {
    var ssr, ssc;
    for (ssr = 0; ssr < 3; ssr++) {
      for (ssc = 0; ssc < 3; ssc++) {
        var q = [true, true, true, true, true, true, true, true, true];
        var i, j, r, c;
        j = 0;
        for (r = 3*ssr; r < 3*(ssr+1); r++) {
          for (c = 3*ssc; c < 3*(ssc+1); c++) {
            if (parseInt(a[r].value(c)) > 0 && parseInt(a[r].value(c)) < 10) {
              q[a[r].value(c)-1] = false;
              j = j+1;
            }
          }
        }
        if (j<9) {      
          for (r = 3*ssr; r < 3*(ssr+1); r++) {
            for (c = 3*ssc; c < 3*(ssc+1); c++) {
              if (a[r].value(c) == 0) {
                var p = q.slice();
                for (i = 0; i < 9; i++) {
                  p[a[i].value(c)-1] = false;
                }
                for (i = 0; i < 9; i++) {
                  p[a[r].value(i)-1] = false;
                }
                var s = "[";
                for (i = 0; i < 9; i++) {
                  if (p[i] == true) s = s+(i+1)+",";
                }
                s = s+"]";
                s = s.replace(",]", "]");
                a[r].setvalue(c,s);
              }
            }
          }
        }
      }
    }
  }
  function candidates(avi, a, ssr, ssc) {
    var q = [true, true, true, true, true, true, true, true, true];
    var i, j, r, c;
    j = 0;
    for (r = 3*ssr; r < 3*(ssr+1); r++) {
      for (c = 3*ssc; c < 3*(ssc+1); c++) {
        if (parseInt(a[r].value(c)) > 0 && parseInt(a[r].value(c)) < 10) {
          q[a[r].value(c)-1] = false;
          j = j+1;
        }
      }
    }
    if (j<9) {      
      for (r = 3*ssr; r < 3*(ssr+1); r++) {
        for (c = 3*ssc; c < 3*(ssc+1); c++) {
          if (a[r].value(c) == 0) {
            var p = q.slice();
            for (i = 0; i < 9; i++) {
              p[a[i].value(c)-1] = false;
            }
            for (i = 0; i < 9; i++) {
              p[a[r].value(i)-1] = false;
            }
            var s = "[";
            for (i = 0; i < 9; i++) {
              if (p[i] == true) s = s+(i+1)+",";
            }
            s = s+"]";
            s = s.replace(",]", "]");
            a[r].setvalue(c,s);
            a[r].highlight([c]);
          }
        }
      }
      avi.umsg("Each digit, missing in the sub-square with yellow cells, has at least two possible positions, and each yellow cell has two possible digits")
      avi.step();
      clean(avi, a, ssr, ssc);
    }
  }
  function clean(avi, a, ssr, ssc) {
    j = 0;
    for (r = 3*ssr; r < 3*(ssr+1); r++) {
      for (c = 3*ssc; c < 3*(ssc+1); c++) {
         if (parseInt(a[r].value(c)) > 0 && parseInt(a[r].value(c)) < 10){
          a[r].unhighlight([c]);
        } else {
          j = j+1;
          a[r].setvalue(c," ");
          a[r].unhighlight([c]);
        }
      }
    }
    avi.clearumsg();
  }
  function verify(avi, a, row, column, color) {
    a[row].highlight([column]);
    var r, c;
    for (r = 0; r < 9; r++) {
      if (r != row) {
        a[r].css(column, {"background-color": color});
      }
    }
    for (c = 0; c < 9; c++) {
      if (c != column) {
        a[row].css(c, {"background-color": color});
      }
    }
    var ssr = parseInt(row / 3);
    var ssc = parseInt(column / 3);
    for (r = 3*ssr; r < 3*(ssr+1); r++) {
      for (c = 3*ssc; c < 3*(ssc+1); c++) {
        if (r != row && c != column) {
          a[r].css(c, {"background-color": color});
        }
      }
    }
    avi.umsg("In order to verify whether the value of the yellow cell is correct, we check whether this value is not contained in the green cells");
  }
</script>

<h2>The Sudoku puzzle</h2>

<p>
<em>Sudoku</em> is a one-player game in which the player receives a table of nine rows and nine columns, partially filled with numbers between 1 e 9. The table is subdvided into nine sub-tables, each one with three rows and three columns. The player has to fill the empty cells of the table with numbers between 1 and 9, so that the following constraints are satisfied.

<ul>
  <li>Each row contains all numbers between 1 e 9.</li>

  <li>Each column contains all numbers between 1 e 9.</li>

  <li>Each sub-table contains all numbers between 1 e 9.</li>
</ul>
</p>

<p>
Sudoku instances are usually classified as easy, medium, and difficult. An easy instance is an instance for which a solution can be derived by making use of simple logical implications, which are due to the rule of the game. Let us consider the following example (click on the slideshow buttons to see the series of six logical implications that will lead us to complete the leftmost topmost sub-square).
</p>

<div id="easy">
  <span class="jsavcounter"></span>
  <div class="jsavcontrols"></div>
  <p class="jsavoutput jsavline"></p>
</div>

<script>
(function($) {
  var easyav = new JSAV("easy");
  easyav.SPEED = speed;
  var easyarray = [];
  easyarray[0] = easyav.ds.array([3, 9,  ,  ,  ,  ,  ,  , 8]),
  easyarray[1] = easyav.ds.array([' ', 7, 1,  ,  , 3,  ,  ,' ']),
  easyarray[2] = easyav.ds.array([' ', , 8, , 4, 9, , 6, ' ']),
  easyarray[3] = easyav.ds.array([1, , , 2, 7, , , , 9]),
  easyarray[4] = easyav.ds.array([6, , , , , , , , 3]),
  easyarray[5] = easyav.ds.array([5, , , , 3, 6, , , 4]),
  easyarray[6] = easyav.ds.array([' ', 4, , 1, 5, , 9, , ' ']),
  easyarray[7] = easyav.ds.array([' ', , , 9, , , 8, 2, ' ']),
  easyarray[8] = easyav.ds.array([9, , , , , , , 4, 7]);
  logic1(easyav, easyarray, [0,2,3,6], [1,5,8,6], 4, RED, 1, 7);
  logic2(easyav, easyarray, [0,2,3,6], [1,5,8,6], 4, BLACK, 1, 7, 9);
  logic1(easyav, easyarray, [0,1,4], [0,5,8], 3, RED, 2, 6);
  logic2(easyav, easyarray, [0,1,4], [0,5,8], 3, BLACK, 2, 6, 3);
  logic1(easyav, easyarray, [2, 4], [7, 0], 2, RED, 0, 2);
  logic2(easyav, easyarray, [2, 4], [7, 0], 2, BLACK, 0, 2, 6);
  logic1(easyav, easyarray, [2], [4], 1, RED, 1, 0);
  logic2(easyav, easyarray, [2], [4], 1, BLACK, 1, 0, 4);
  logic1(easyav, easyarray, [5], [0], 1, RED, 2, 1);
  logic2(easyav, easyarray, [5], [0], 1, BLACK, 2, 1, 5);
  logic1(easyav, easyarray, [], [], 0, RED, 2, 0);
  logic2(easyav, easyarray, [], [], 0, BLACK, 2, 0, 2);
  easyav.recorded();
})(jQuery);
</script>

<p>
The current configuration can be completely filled by making use of these logical implications. A difficult Sudoku instance is an instance for which, at a certain point, the player cannot apply such simple logical implications, as it happens in the following example (click on the slideshow buttons to see all possible digit candidates for each empty cell).
</p>

<div id="difficult">
  <span class="jsavcounter"></span>
  <div class="jsavcontrols"></div>
  <p class="jsavoutput jsavline"></p>
</div>

<script>
(function($) {
  var difficultav = new JSAV("difficult");
  difficultav.SPEED = speed;
  var difficultarray = [];
  difficultarray[0] = difficultav.ds.array([' ', ,  , 6,  , 2,  , 9, ' ']),
  difficultarray[1] = difficultav.ds.array([' ', , , 8,  , ,  ,  , 6]),
  difficultarray[2] = difficultav.ds.array([' ', , 6, 7, 3, 1, 5, , 8]),
  difficultarray[3] = difficultav.ds.array([4, 2, 9, 3, 1, 8, 6, 7, 5]),
  difficultarray[4] = difficultav.ds.array([6, 7, 3, 2, , , 1, 8, 4]),
  difficultarray[5] = difficultav.ds.array([5, 1, 8, 4, 6, 7, 9, 3, 2]),
  difficultarray[6] = difficultav.ds.array([' ', , 1, 5, 2, 3, , 6, ' ']),
  difficultarray[7] = difficultav.ds.array([7, , , 1, 8, 6, , , ' ']),
  difficultarray[8] = difficultav.ds.array([' ', 6, 2, 9, 7, 4, , , ' ']);
  candidates(difficultav, difficultarray, 0, 0);
  candidates(difficultav, difficultarray, 0, 1);
  candidates(difficultav, difficultarray, 0, 2);
  candidates(difficultav, difficultarray, 1, 0);
  candidates(difficultav, difficultarray, 1, 1);
  candidates(difficultav, difficultarray, 1, 2);
  candidates(difficultav, difficultarray, 2, 0);
  candidates(difficultav, difficultarray, 2, 1);
  candidates(difficultav, difficultarray, 2, 2);
  allcandidates(difficultav, difficultarray);
  difficultav.recorded();
})(jQuery);
</script>

<p>In these cases, the player can only try to set the content of a cell equal to one of the possible digits, and check whether this choice can lead to a solution. Unfortunately, there is no better known algorithm than this trial and error approach: indeed, the Sudoku puzzle is one of the thousands of combinatorial problems which are considered difficult to be solved, but for which a proof of this difficulty has not bee provided yet.</p>

<p>
The Sudoku puzzle, however, has another important characteristic, which is shared by many other combinatorial problems: the possibility of easily verifying whether a given solution of the puzzle is correct. Indeed, any Sudoku player makes use of this characteristics, every time he/she is not able to solve the puzzle. As a matter of fact, the solution of a Sudoku puzzle is usually published on the same magazine, so that the player can verify that the puzzle has indeed a solution. The verification procedure is quite straightforward and is summarized in the following algorithm: for each cell \(c\), verify that its digit is not present in any other cell of the line, of the column, or of the sub-square containing \(c\). In the following example, we show how the correctness of a cell can be easily verified (click on the slideshow buttons to see which cells are analyzed in order to verify the correctness of one cell).
</p>

<div id="verify">
  <span class="jsavcounter"></span>
  <div class="jsavcontrols"></div>
  <p class="jsavoutput jsavline"></p>
</div>

<script>
(function($) {
  var verifyav = new JSAV("verify");
  verifyav.SPEED = speed;
  var verifyarray = [];
  verifyarray[0] = verifyav.ds.array([3, 9, 6, 5, 1, 2, 4, 7, 8]),
  verifyarray[1] = verifyav.ds.array([4, 7, 1, 6, 8, 3, 5, 9, 2]),
  verifyarray[2] = verifyav.ds.array([2, 5, 8, 7, 4, 9, 3, 6, 1]),
  verifyarray[3] = verifyav.ds.array([1, 3, 4, 2, 7, 5, 6, 8, 9]),
  verifyarray[4] = verifyav.ds.array([6, 8, 7, 4, 9, 1, 2, 5, 3]),
  verifyarray[5] = verifyav.ds.array([5, 2, 9, 8, 3, 6, 7, 1, 4]),
  verifyarray[6] = verifyav.ds.array([8, 4, 2, 1, 5, 7, 9, 3, 6]),
  verifyarray[7] = verifyav.ds.array([7, 1, 3, 9, 6, 4, 8, 2, 5]),
  verifyarray[8] = verifyav.ds.array([9, 6, 5, 3, 2, 8, 1, 4, 7]);
  var row = Math.floor(Math.random()*9);
  var column = Math.floor(Math.random()*9);
  verify(verifyav, verifyarray, row, column, GREEN);
  verifyav.recorded();
})(jQuery);
</script>

<p>
Let us then consider a generalization of the Sudoku puzzle in which the table has dimension \(n^2\times n^2\), and it is initially filled with at least \(\sqrt{n}\) digits: the previous discussion implies that this puzzle has a <em>short</em> and <em>polynomial-time verifiable certificate</em>. Indeed, this certificate is a soluton of the puzzle: it is short because it can be described by using a number of bits which is polynomial in the length of the description of the puzzle, and it is easily verifiable because there exists a polynomial-time algorithm verifying whether the solution is correct. More precisely, note that the length of the description of an instance is \(\Omega(\sqrt{n}\log n)\) (since at least \(2\log n\) bits are required to encode a number between \(1\) and \(n^2\)): the length of a solution is \(O(n^4\log n)\) (since we have to specify \(n^4\) numbers between \(1\) and \(n^2\)), hence it is polynomially related to the length of the instance. Moreover, the verification procedure we have described above takes \(O(n^6)\) time, since, for each of the \(n^4\) cells, we have to compare its value with the values of \(3(n^2-1)\) other cells: hence, the time complexity of the verification procedure is polynomial with respect to the length of the instance.
</p>

<h2>The class NP</h2>

A <em>decision problem</em> is a problem such that, for any instance, the answer is either yes or no: hence, any such problem can be seen as language containing all the strings encoding instances whose answer is yes. The above discussion about the Sudoku puzzle naturally leads us to the definition of a very important class of languages. A language \(L\) belongs to the <em>class NP</em> if there exists a polynomial \(p\) and a polynomial-time algorithm \(V\) such that, for any string \(x\), \[x \in L \Leftrightarrow \exists y[|y| \leq p(|x|) \wedge V(x,y) \mbox{ accepts}].\]The string \(y\) is also called a <em>solution</em> or a <em>certificate</em> of the instance \(x\).For example, in the case of the generalized Sudoku puzzle, a certificate would a completely filled table, and the algorithm $V$ woud be the verification procedure described above.

<h3>Examples of languages in NP</h3>

<ul>
  <li><b>SAT</b>: given a boolean formula in conjunctive normal form (that is, a disjunction of conjunctions, also called <em>clauses</em>), is the formula satisfiable? In this case, a certificate is a truth-assignment to the Boolean variables occurring in the formula: the verification procedure simply consists in checking whether each clause contains at least one literal (that is, a variable or the negation of a variable) whose truth value is true.</li>
  
  <li><b>Vertex cover</b>: given a graph \(G = (N, E)\) and an integer \(k\), does there exist a subset \(S\) of at most \(k\) vertices in \(N\) such that each edge \((u,v)\) in \(E\) is touched by at least one vertex in \(S\) (that is, either \(u\) or \(v\) belongs to \(S\))? In this case, a certificate is a subset \(S \subseteq N\): the verification procedure simply consists in checking whether \(|S| \leq k\) and, for each edge \((u,v) \in E\), \(u\in S \vee v\in S\).</li>
  
  <li><b>Subset Sum</b>: given a set \(A\) of integer numbers and an integer number \(s\), does there exist a subset of \(A\) such that the sum of its elements is equal to \(s\)? In this case, a certificate is a subset \(S \subseteq A\): the verification procedure simply consists in checking whether \(\sum_{a\in A}a = s\).
</li>
</ul>

<h3>P vs NP</h3>

Let P denote the class of languages for which there exists a polynomial-time algorithm that decides them (that is, a polynomial-time algorithm \(P\) such that, for any string \(x\), \(x \in L\) if and only if\(P(x)\) accepts}). It is easy to verify that \(\mathrm{P} \subseteq \mathrm{NP}\): indeed, it suffices to observe that,  for any string \(x\), a certificate of \(x\) is the encoding of the computation of \(P\) with input \(x\). Whether this inclusion is strict is one of the most important open problems in theoretical computer science (and, more generally, in mathematics).