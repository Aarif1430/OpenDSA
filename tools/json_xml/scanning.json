{"document": {"@ids": "reading-input-from-files-or-otherwise", "@names": "reading\\ input\\ (from\\ files\\ or\\ otherwise)", "@source": "<string>", "@title": "Reading Input (from Files or Otherwise)", "title": "Reading Input (from Files or Otherwise)", "subtitle": {"@ids": "the-scanner-class", "@names": "the\\ scanner\\ class", "#text": "The Scanner Class"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "paragraph": [{"raw": [{"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html\" target = \"_blank\">Scanner class API</a>"}, {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://courses.cs.vt.edu/~cs3114/Fall13/watcherP4.txt\" target = \"_blank\">input file</a>"}], "#text": "Java has an excellent class for reading in text. The\nScanner class is extremely useful to quickly parse through a String.\nSee the .\nSo how do we properly read in a file?\nThere are a number of ways.\nThis page shows a simple demonstration of how to use the Scanner class to read\nin a command file from an old CS3114 project.\nIn this project we are given 4 commands that our program must handle:\ndebug, search, add, and delete.\nTake a look at the ."}, "*Every command except debug takes additional parameters*", "Consider the following code snippet.", "This code will parse through a command file, read in each command and each of\ntheir parameters (if the command has one). It is important to note, however,\nthat this code is not necessarily safe. It assumes that the command file\ngiven is properly formatted, and as such if a user decides to give the program\na malformed file the program will behave in a possibly unknown way.", {"raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://courses.cs.vt.edu/~cs3114/Fall14/P1sampleInput.txt\" target = \"_blank\">this input file</a>"}, "#text": "Depending on the structure of your file you may not wish to simply do the token\nmethod. Another approach would be to read in an entire line and then work from\nthere.\nConsider .\nWe now have 3 commands that we must support."}, "1. insert {artist-name}<SEP>{song-name} - inserts a song using the information\nprovided in the fields", "3. print {artist|song|blocks} - depending on the parameter value, you will print\nout either a complete listing of the artists contained in the database, or the\nsongs, or else the free block list for the memory manager", "So this time we have less commands to support, but more options for each command\n, no worries! We simply need to change our code just a little bit. We see this\ntime that the insert command has no spacing between artist/song tokens. Rather it\nuses the seperator <SEP>.", "Seperating artists and song name on the same line can prove to be rather difficult\ndue to the fact that either name might include a space or other\ntraditional deliminator.\nBy seperating these fields using <SEP>, we drastically\nreduce the possibilty of a valid name containing the delimeter."], "substitution_definition": [{"@names": "external_link1", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html\" target = \"_blank\">Scanner class API</a>"}}, {"@names": "external_link2", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://courses.cs.vt.edu/~cs3114/Fall13/watcherP4.txt\" target = \"_blank\">input file</a>"}}, {"@names": "external_link3", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://courses.cs.vt.edu/~cs3114/Fall14/P1sampleInput.txt\" target = \"_blank\">this input file</a>"}}], "enumerated_list": [{"@enumtype": "arabic", "@prefix": "", "@suffix": ".", "list_item": [{"paragraph": "debug - prints information about the tree in the program"}, {"paragraph": "search - searches a region based off coordinates given"}, {"paragraph": "add - adds a node at the coordinates given"}, {"paragraph": "delete - deletes a node at the specific point"}]}, {"@enumtype": "arabic", "@prefix": "", "@start": "2", "@suffix": ".", "list_item": {"paragraph": "remove {artist|song} {name} - removes a song given a song name or artist name"}}]}}