{"document": {"@dupnames": "the\\ class\\ np", "@ids": "the-class-np", "@source": "<string>", "@title": "The class NP", "title": "The class NP", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Development/Sudoku.css"}], "section": [{"@ids": "the-sudoku-puzzle", "@names": "the\\ sudoku\\ puzzle", "title": "The Sudoku puzzle", "paragraph": [{"emphasis": "Sudoku", "#text": "is a one-player game in which the player receives a table of\nnine rows and nine columns, partially filled with numbers between 1\nand 9.\nThe table is subdvided into nine sub-tables, each one with three\nrows and three columns.\nThe player has to fill the empty cells of the table with numbers\nbetween 1 and 9, so that the following constraints are satisfied."}, "Sudoku instances are usually classified as easy, medium, or\ndifficult.\nAn easy instance is an instance for which a solution can be\nderived by making use of simple logical implications, which follow\ndirectly from the rules of the game.\nLet us consider the following example (click on\nthe slideshow buttons to see the series of six logical implications\nthat will lead us to complete the leftmost topmost sub-square).", "The current configuration can be completely filled by making use of\nthese logical implications.\nA difficult Sudoku instance is an instance for which, at a certain\npoint, the player cannot apply such simple logical implications, as it\nhappens in the following example (click on the slideshow buttons to\nsee all possible digit candidates for each empty cell).", "In these cases, the player can only try to set the content of a cell\nequal to one of the possible digits, and check whether this choice can\nlead to a solution.\nUnfortunately, there is no better known algorithm\nthan this trial and error approach: indeed, the Sudoku puzzle is one\nof the thousands of combinatorial problems which are considered\ndifficult to be solved, but for which a proof of this difficulty has\nnot bee provided yet.", {"title_reference": ["c", "c"], "#text": "The Sudoku puzzle, however, has another important characteristic,\nwhich is shared by many other combinatorial problems: the possibility\nof easily verifying whether a given solution of the puzzle is\ncorrect.\nIndeed, any Sudoku player makes use of this characteristics,\nevery time he/she is not able to solve the puzzle.\nAs a matter of fact, the solution of a Sudoku puzzle is usually\npublished on the same magazine, so that the player can verify that the\npuzzle has indeed a solution.\nThe verification procedure is quite straightforward and is\nsummarized in the following algorithm: for each cell , verify\nthat its digit is not present in any other cell of the line, of the\ncolumn, or of the sub-square containing .\nIn the following example, we show how the correctness of a cell can be\neasily verified (click on the slideshow buttons to see which cells are\nanalyzed in order to verify the correctness of one cell)."}, {"title_reference": ["n^2times n^2", "sqrt{n}", "Omega(sqrt{n}log n)", "2log n", "n^2", "O(n^4log n)", "n^4", "n^2", "O(n^6)", "n^4", "3(n^2-1)"], "emphasis": ["short", "polynomial-time verifiable certificate"], "#text": "Let us then consider a generalization of the Sudoku puzzle in which\nthe table has dimension , and it is initially\nfilled with at least  digits.\nthe previous discussion implies that this puzzle has a  and\n.\nIndeed, this certificate is a soluton of the puzzle:\nit is short because it can be described by using a number\nof bits which is polynomial in the length of the description of the\npuzzle, and it is easily verifiable because there exists a\npolynomial-time algorithm verifying whether the solution is\ncorrect.\nMore precisely, note that the length of the description of an\ninstance is \n(since at least  bits are required to encode a number\nbetween 1 and ):\nthe length of a solution is \n(since we have to specify  numbers between 1 and\n),\nhence it is polynomially related to the length of the instance.\nMoreover, the verification procedure we have described above takes\n time, since, for each of the  cells, we have\nto compare its value with the values of  other cells:\nhence, the time complexity of the verification procedure is polynomial\nwith respect to the length of the instance."}], "enumerated_list": {"@enumtype": "arabic", "@prefix": "", "@suffix": ".", "list_item": [{"paragraph": "Each row contains all numbers between 1 and 9."}, {"paragraph": "Each column contains all numbers between 1 and 9."}, {"paragraph": "Each sub-table contains all numbers between 1 and 9."}]}, "raw": [{"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "Sudoku1CON", "@long_name": "Sudoku1CON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "Sudoku2CON", "@long_name": "Sudoku2CON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "Sudoku3CON", "@long_name": "Sudoku3CON", "@points": "0", "@required": "True", "@threshold": "1.0"}}]}, {"@dupnames": "the\\ class\\ np", "@ids": "id1", "title": "The class NP", "paragraph": [{"title_reference": ["decision problem", "L", "class NP", "p", "V", "x"], "#text": "A  is a problem such that, for any instance,\nthe answer is either yes or no: hence, any such problem can be seen as\nlanguage containing all the strings encoding instances whose answer is\nyes.\nThe above discussion about the Sudoku puzzle naturally leads us\nto the definition of a very important class of languages.\nA language  belongs to the  if there exists a\npolynomial  and a polynomial-time algorithm  such\nthat, for any string ,"}, {"title_reference": ["y", "solution", "certificate", "x", "V"], "#text": "The string  is also called a\n or a  of the instance .\nFor example, in the case of the generalized Sudoku puzzle, a certificate\nwould a completely filled table, and the algorithm  woud be the\nverification procedure described above."}], "math_block": {"@xml:space": "preserve", "#text": "x \\in L \\Leftrightarrow \\exists y[|y| \\leq p(|x|) \\wedge\nV(x,y) \\mbox{ accepts}]."}}, {"@ids": "examples-of-languages-in-np", "@names": "examples\\ of\\ languages\\ in\\ np", "title": "Examples of languages in NP", "paragraph": [{"strong": "SAT", "#text": ": Given a boolean formula in conjunctive normal form (that is,\na disjunction of conjunctions, also called <em>clauses</em>), is the\nformula satisfiable?\nIn this case, a certificate is a truth-assignment to the Boolean\nvariables occurring in the formula: the verification procedure simply\nconsists in checking whether each clause contains at least one literal\n(that is, a variable or the negation of a variable) whose truth value\nis true."}, {"strong": "Vertex cover", "title_reference": ["G = (N, E)", "k", "S", "k", "N", "(u,v)", "E", "S", "u", "v", "S", "S subseteq N", "|S| leq k", "(u,v) in  E), (uin S vee vin S"], "#text": ": Given a graph  and an integer\n, does there exist a subset  of at most \nvertices in  such that each edge  in \nis touched by at least one vertex in  (that is, either\n or  belongs to )?\nIn this case, a certificate is a subset : the\nverification procedure simply consists in checking whether\n and, for each edge\n."}, {"strong": "Subset Sum", "title_reference": ["A", "s", "A", "s", "S subseteq A", "sum_{ain A}a = s"], "#text": ": Given a set  of integer numbers and an\ninteger number , does there exist a subset of  such that\nthe sum of its elements is equal to ?\nIn this case, a certificate is a subset :\nthe verification procedure simply consists in checking whether\n."}]}, {"@ids": "p-vs-np", "@names": "p\\ vs\\ np", "title": "P vs NP", "paragraph": {"title_reference": ["P", "x", "x in L", "P(x)", "mathrm{P} subseteq mathrm{NP}", "x", "x", "P", "x"], "#text": "Let P denote the class of languages for which there exists a\npolynomial-time algorithm that decides them (that is, a\npolynomial-time algorithm  such that, for any string\n,  if and only if  accepts.\nIt is easy to verify that :\nindeed, it suffices to observe that, for any string ,\na certificate of  is the encoding of\nthe computation of  with input .\nWhether this inclusion is strict is one of the most important open\nproblems in theoretical computer science (and, more generally, in\nmathematics)."}, "raw": [{"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Development/Sudoku1CON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Development/Sudoku2CON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Development/Sudoku3CON.js"}]}]}}