<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="proof\ of\ optimality\ for\ huffman\ coding" ids="proof-of-optimality-for-huffman-coding" source="&lt;string&gt;" title="Proof of Optimality for Huffman Coding"><title>Proof of Optimality for Huffman Coding</title><subtitle dupnames="proof\ of\ optimality\ for\ huffman\ coding" ids="id1">Proof of Optimality for Huffman Coding</subtitle><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><odsalink>AV/Binary/HuffProofCON.css</odsalink></raw><paragraph>Huffman tree building is an example of a
<title_reference>greedy algorithm</title_reference>.
At each step, the algorithm makes a "greedy" decision to merge
the two subtrees with least weight.
This makes the algorithm simple, but does it give the desired result?
This section concludes with a proof that the Huffman tree
indeed gives the most efficient arrangement for the set of letters.
The proof requires the following lemma.</paragraph><paragraph><strong>Lemma:</strong>
For any Huffman tree built by function <literal>buildHuff</literal> containing at
least two letters, the two letters with least frequency are stored
in sibling nodes whose depth is at least as deep as any other leaf
nodes in the tree.</paragraph><paragraph><strong>Proof:</strong>
Call the two letters with least frequency <math>l_1</math>
and <math>l_2</math>.
They must be siblings because <literal>buildHuff</literal>
selects them in the first step of the construction process.
Assume that <math>l_1</math> and <math>l_2</math> are
not the deepest nodes in the tree.
In this case, the Huffman tree must either look as shown in
Figure <title_reference>Figure #HProof</title_reference>, or effectively symmetrical to
this.
For this situation to occur, the parent of <math>l_1</math>
and <math>l_2</math>,
labeled <math>V</math>, must have greater weight than the node
labeled <math>X</math>.
Otherwise, function <literal>buildHuff</literal> would have selected node
<math>V</math> in place of node <math>X</math> as the child of node
<math>U</math>.
However, this is impossible because <math>l_1</math> and
<math>l_2</math> are the letters with least frequency.</paragraph><target refid="hproof"></target><raw format="xml" ids="hproof" names="hproof" xml:space="preserve"><inlineav
    type="dgm"
    exer_name="HuffProofCON"
    long_name="HuffProofCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><paragraph>Here is the proof.</paragraph><block_quote><paragraph><strong>Theorem:</strong>
Function <literal>buildHuff</literal> builds the Huffman tree with the minimum
external path weight for the given set of letters.</paragraph><paragraph><strong>Proof:</strong>
The proof is by induction on <math>n</math>, the number of letters.</paragraph><bullet_list bullet="*"><list_item><paragraph><strong>Base Case:</strong> For <math>n = 2</math>, the Huffman tree must have the
minimum external path weight because there are only two possible
trees, each with identical weighted path lengths for the two
leaves.</paragraph></list_item><list_item><paragraph><strong>Induction Hypothesis:</strong> Assume that any tree created by
<literal>buildHuff</literal> that contains <math>n-1</math> leaves has minimum
external path length.</paragraph></list_item><list_item><paragraph><strong>Induction Step:</strong> Given a Huffman tree <math>\mathbf{T}</math>
built by <literal>buildHuff</literal> with <math>n</math> leaves,
<math>n \geq 2</math>, suppose that
<math>w_1 \leq w_2 \leq ... \leq w_n</math> where
<math>w_1</math> to <math>w_n</math> are the weights of the letters.
Call <math>V</math> the parent of the letters with frequencies
<math>w_1</math> and <math>w_2</math>.
From the lemma, we know that the leaf nodes containing the
letters with frequencies <math>w_1</math> and <math>w_2</math> are as
deep as any nodes in <math>\mathbf{T}</math>.
If any other leaf nodes in the tree were deeper, we could reduce
their weighted path length by swapping them with <math>w_1</math> or
<math>w_2</math>.
But the lemma tells us that no such deeper nodes exist.
Call <math>\mathbf{T}'</math> the Huffman tree that is
identical to <math>\mathbf{T}</math> except that node <math>V</math> is
replaced with a leaf node <math>V'</math> whose weight is
<math>w_1 + w_2</math>.
By the induction hypothesis, <math>\mathbf{T}'</math> has minimum
external path length.
Returning the children to <math>V'</math> restores tree
<math>\mathbf{T}</math>, which must also have minimum external path
length.</paragraph></list_item></bullet_list><paragraph>Thus by mathematical induction, function <literal>buildHuff</literal> creates
the Huffman tree with minimum external path length.</paragraph></block_quote><raw format="xml" xml:space="preserve"><todo>null</todo></raw><raw format="xml" xml:space="preserve"><odsascript>AV/Binary/HuffProofCON.js</odsascript></raw></document>