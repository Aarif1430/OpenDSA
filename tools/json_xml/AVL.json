{"document": {"@ids": "the-avl-tree", "@names": "the\\ avl\\ tree", "@source": "<string>", "@title": "The AVL Tree", "title": "The AVL Tree", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@ids": "avlinsert", "@names": "avlinsert", "@xml:space": "preserve", "odsafig": "null"}, {"@format": "xml", "@ids": "avlsingle", "@names": "avlsingle", "@xml:space": "preserve", "odsafig": "null"}, {"@format": "xml", "@ids": "avldouble", "@names": "avldouble", "@xml:space": "preserve", "odsafig": "null"}], "paragraph": [{"title_reference": ["n", "O(log n)", "O(log n)", "O(log n)"], "#text": "The AVL tree (named for its inventors Adelson-Velskii and Landis)\nshould be viewed as a BST with the following additional property:\nFor every node, the heights of its left and right subtrees differ by\nat most 1.\nAs long as the tree maintains this property, if the tree contains\n nodes, then it has a depth of at most .\nAs a result, search for any node will cost ,\nand if the updates can be done in time proportional to the depth of\nthe node inserted or deleted, then updates will also cost\n, even in the worst case."}, {"title_reference": "Theta(log n)", "#text": "The key to making the AVL tree work is to alter the insert and delete\nroutines so as to maintain the balance property.\nOf course, to be practical, we must be able to implement the revised\nupdate routines in  time."}, {"title_reference": ["Figure #AVLinsert", "S"], "#text": "Consider what happens when we insert a node with key value 5,\nas shown in Figure .\nThe tree on the left meets the AVL tree balance requirements.\nAfter the insertion, two nodes no longer meet the requirements.\nBecause the original tree met the balance requirement, nodes in the\nnew tree can only be unbalanced by a difference of at most 2 in the\nsubtrees.\nFor the bottommost unbalanced node, call it , there are 4\ncases:"}, "Cases 1 and 4 are symmetrical, as are cases 2 and 3.\nNote also that the unbalanced nodes must be on the path from\nthe root to the newly inserted node.", {"title_reference": ["O(log n)", "rotations <rotation>", "single rotation", "Figure #AVLsingle", "double rotation", "Figure #AVLdouble"], "#text": "Our problem now is how to balance the tree in  time.\nIt turns out that we can do this using a series of local operations\nknown as .\nCases 1 and 4 can be fixed using a ,\nas shown in Figure .\nCases 2 and 3 can be fixed using a , as shown\nin Figure ."}, {"title_reference": "deletemin", "#text": "The AVL tree insert algorithm begins with a normal BST insert.\nThen as the recursion unwinds up the tree, we perform the appropriate\nrotation on any node that is found to be unbalanced.\nDeletion is similar; however, consideration for unbalanced nodes must\nbegin at the level of the  operation."}], "target": [{"@refid": "avlinsert"}, {"@refid": "avlsingle"}, {"@refid": "avldouble"}], "enumerated_list": {"@enumtype": "arabic", "@prefix": "(", "@suffix": ")", "list_item": [{"paragraph": {"title_reference": "S", "#text": "The extra node is in the left child of the left child of\n."}}, {"paragraph": {"title_reference": "S", "#text": "The extra node is in the right child of the left child of\n."}}, {"paragraph": {"title_reference": "S", "#text": "The extra node is in the left child of the right child of\n."}}, {"paragraph": {"title_reference": "S", "#text": "The extra node is in the right child of the right child of\n."}}]}, "topic": {"title": "Example", "paragraph": {"title_reference": "Fig #AVLinsert", "#text": "In Figure  (b), the bottom-most unbalanced\nnode has value 7.\nThe excess node (with value 5) is in the right subtree of the left\nchild of 7, so we have an example of Case 2.\nThis requires a double rotation to fix.\nAfter the rotation, 5 becomes the left child of 24, 2 becomes the\nleft child of 5, and 7 becomes the right child of 5."}}}}