{"document": {"@dupnames": "open\\ hashing", "@ids": "open-hashing", "@source": "<string>", "@title": "Open Hashing", "title": "Open Hashing", "subtitle": {"@dupnames": "open\\ hashing", "@ids": "id1", "#text": "Open Hashing"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Hashing/openhashCON.css"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "openhashCON", "@long_name": "openhashCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "OpenHashPRO", "@long_name": "OpenHashPRO", "@points": "1.0", "@required": "True", "@threshold": "5"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Hashing/openhashCON.js"}], "paragraph": [{"title_reference": ["open hashing <open hash system>", "separate chaining", "closed hashing <closed hash system> <HashCSimple>", "open addressing"], "#text": "While the goal of a hash function is to minimize collisions,\nsome collisions are unavoidable in practice.\nThus, hashing implementations must include some form of collision\nresolution policy.\nCollision resolution techniques can be broken into two classes:\n\n(also called ) and\n\n(also called ).\n(Yes, it is confusing when \"open hashing\" means the opposite of\n\"open addressing\", but unfortunately, that is the way it is.)\nThe difference between the two has to do with whether\ncollisions are stored outside the table (open hashing), or\nwhether collisions result in storing one of the records at another\nslot in the table (closed hashing)."}, "The simplest form of open hashing defines each slot in the\nhash table to be the head of a linked list.\nAll records that hash to a particular slot are placed on that slot's\nlinked list.\nThe following figure illustrates a hash table where each\nslot points to a linked list to hold the records associated with that slot.\nThe hash function used is the simple mod function.", "Records within a slot's list can be ordered in several ways:\nby insertion order, by key value order, or by frequency-of-access\norder.\nOrdering the list by key value provides an advantage in the case of an\nunsuccessful search, because we know to stop searching the list once we\nencounter a key that is greater than the one being searched for.\nIf records on the list are unordered or ordered by frequency, then an\nunsuccessful search will need to visit every record on the list.", {"title_reference": ["M", "N", "M", "N/M", "Theta(1"], "#text": "Given a table of size  storing  records,\nthe hash function will (ideally) spread the records evenly among the\n positions in\nthe table, yielding on average  records for each list.\nAssuming that the table has more slots than there are records to be\nstored, we can hope that few slots will contain more than one record.\nIn the case where a list is empty or has only one record,\na search requires only one access to the list.\nThus, the average cost for hashing should be ).\nHowever, if clustering causes many records to hash to only a few of\nthe slots, then the cost to access a record will be much higher\nbecause many elements on the linked list must be searched."}, "Open hashing is most appropriate when the hash table is kept in main\nmemory, with the lists implemented by a standard in-memory linked list.\nStoring an open hash table on disk in an efficient way is\ndifficult, because members of a given linked list might be stored on\ndifferent disk blocks.\nThis would result in multiple disk accesses when searching for a\nparticular key value, which defeats the purpose of using hashing.", "There are similarities between open hashing and Binsort.\nOne way to view open hashing is that each record is simply placed in a\nbin.\nWhile multiple records may hash to the same bin, this initial binning\nshould still greatly reduce the number of records accessed by\na search operation.\nIn a similar fashion, a simple Binsort reduces the number of\nrecords in each bin to a small number that can be sorted in some\nother way."]}}