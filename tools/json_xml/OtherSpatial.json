{"document": {"@ids": "other-spatial-data-structures", "@names": "other\\ spatial\\ data\\ structures", "@source": "<string>", "@title": "Other Spatial Data Structures", "title": "Other Spatial Data Structures", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@ids": "bintreefig2", "@names": "bintreefig2", "@xml:space": "preserve", "odsafig": "null"}, {"@format": "xml", "@ids": "ptquadfig", "@names": "ptquadfig", "@xml:space": "preserve", "odsafig": "null"}], "paragraph": [{"title_reference": ["kd tree", "PR quadtree", "spatial data structures", "object space decomposition", "key space decomposition", "trie", "full tree", "octree"], "math": ["2^d", "2^2 = 4", "x", "y", "z", "2^3"], "#text": "The differences between the  and the\n illustrate many of the design choices encountered\nwhen creating .\nThe kd tree provides an  of the\nregion, while the PR quadtree provides a \n(thus, it is a ).\nThe kd tree stores records at all nodes, while the\nPR quadtree stores records only at the leaf nodes.\nFinally, the two trees have different structures.\nThe kd tree is a binary tree (and need not be full),\nwhile the PR quadtree is a  with\n branches (in the two-dimensional case, ).\nConsider the extension of this concept to three dimensions.\nA kd tree for three dimensions would alternate the discriminator\nthrough the , , and  dimensions.\nThe three-dimensional equivalent of the PR quadtree would be a tree\nwith  or eight branches.\nSuch a tree is called an ."}, {"title_reference": ["bintree", "Figure #kdExamp", "Figure #BintreeFig2", "point quadtree", "Figure #BintreeFig2", "Figure #PtQuadFig"], "#text": "We can also devise a binary trie based on a key space decomposition in\neach dimension, or a quadtree that uses the two-dimensional equivalent\nto an object space decomposition.\nThe  is a binary trie that\nuses keyspace decomposition and alternates discriminators at each\nlevel in a manner similar to the kd tree.\nThe bintree for the points of Figure  is shown in\nFigure .\nAlternatively, we can use a four-way decomposition of space centered\non the data points.\nThe tree resulting from such a decomposition is called a\n.\nThe point quadtree for the data points of Figure \nis shown in Figure ."}, "Our discussion of spatial data structures for storing points\nhas barely scratched the surface of the field of spatial\ndata structures.\nDozens of distinct spatial data structures have been\ninvented, many with variations and alternate implementations.\nSpatial data structures exist for storing many forms of spatial data\nother than points.\nThe most important distinctions between are the tree structure\n(binary or not, regular decompositions or not) and the decomposition\nrule used to decide when the data contained within a region is so\ncomplex that the region must be subdivided.", {"title_reference": "Region Quadtree", "#text": "One such spatial data structure is the\n for storing images where the pixel values tend\nto be blocky, such as a map of the countries of the world.\nThe region quadtree uses a four-way regular decomposition scheme\nsimilar to the PR quadtree\nThe decomposition rule is simply to divide any node containing pixels\nof more than one color or value."}, {"math": ["c", "c", "c"], "#text": "Spatial data structures can also be used to store line object,\nrectangle object, or objects of arbitrary shape (such as polygons in\ntwo dimensions or polyhedra in three dimensions).\nA simple, yet effective, data structure for storing rectangles or\narbitrary polygonal shapes can be derived from the PR quadtree.\nPick a threshold value , and subdivide any region into four\nquadrants if it contains more than  objects.\nA special case must be dealt with when more than  objects\nintersect."}, {"title_reference": ["B-trees <B-tree>", "hashing"], "#text": "Some of the most interesting developments in spatial data structures\nhave to do with adapting them for disk-based applications.\nHowever, all such disk-based implementations boil down to storing the\nspatial data structure within some variant\non either  or ."}], "target": [{"@refid": "bintreefig2"}, {"@refid": "ptquadfig"}]}}