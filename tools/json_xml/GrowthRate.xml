<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="growth\ rates\ review" ids="growth-rates-review" source="&lt;string&gt;" title="Growth Rates Review"><title>Growth Rates Review</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><section dupnames="growth\ rates\ review" ids="id1"><title>Growth Rates Review</title><paragraph>Two functions of <title_reference>n</title_reference> have different
<title_reference>growth rates &lt;growth rate&gt;</title_reference> if as <title_reference>n</title_reference> goes to infinity
their ratio either goes to infinity or goes to zero.</paragraph><target refid="runtimegraph"></target><raw format="xml" ids="runtimegraph" names="runtimegraph" xml:space="preserve"><odsafig>null</odsafig></raw><paragraph>Where does <title_reference>(1.618)^n</title_reference> go on here?</paragraph><paragraph>Exact equations relating program operations to running time require
machine-dependent constants.
Sometimes, the equation for exact running time is complicated to
compute.
Usually, we are satisfied with knowing an approximate growth rate.</paragraph><paragraph>Example: Given two algorithms with growth rate <title_reference>c_1n</title_reference> and
<title_reference>c_2 2^{n!}</title_reference>, do we need to know the values of <title_reference>c_1</title_reference>
and <title_reference>c_2</title_reference>?</paragraph><paragraph>Consider <title_reference>n^2</title_reference> and <title_reference>3n</title_reference>.
PROVE that <title_reference>n^2</title_reference> must eventually become (and remain) bigger.</paragraph><paragraph>Proof by Contradiction:
Assume there are some values for constants <title_reference>r</title_reference> and <title_reference>s</title_reference>
such that, for all values of <title_reference>n</title_reference>,
<title_reference>n^2 &lt; rn + s</title_reference>.
Then, <title_reference>n &lt; r + s/n</title_reference>.
But, as <title_reference>n</title_reference> grows, what happens to <title_reference>s/n</title_reference>?
It goes to zero.</paragraph><paragraph>Since <title_reference>n</title_reference> grows toward infinity, the assumption must be false.
Conclusion: In the limit, as <title_reference>n rightarrow infty</title_reference>, constants
don't matter.
Limits are the typical way to prove that one function grows faster
than another.</paragraph><paragraph>Here are some useful observatios.</paragraph><paragraph>Since <title_reference>n^2</title_reference> grows faster than <title_reference>n</title_reference>,</paragraph><bullet_list bullet="*"><list_item><paragraph><title_reference>2^{n^2}</title_reference> grows faster than <title_reference>2^n</title_reference>.
(Take antilog of both sides.)</paragraph></list_item><list_item><paragraph><title_reference>n^4</title_reference> grows faster than <title_reference>n^2</title_reference>.
(Square boths sides.)</paragraph></list_item><list_item><paragraph><title_reference>n</title_reference> grows faster than <title_reference>sqrt{n}</title_reference>.
(<title_reference>n = (sqrt{n})^2</title_reference>.
Replace <title_reference>n</title_reference> with <title_reference>sqrt{n}</title_reference>.)</paragraph></list_item><list_item><paragraph><title_reference>2 log n</title_reference> grows <emphasis>no slower</emphasis> than <title_reference>log n</title_reference>.
(Take <title_reference>log</title_reference> of both sides. Log "flattens" growth rates.)</paragraph></list_item></bullet_list><paragraph>Since <title_reference>n!</title_reference> grows faster than <title_reference>2^n</title_reference>,</paragraph><bullet_list bullet="*"><list_item><paragraph><title_reference>n!!</title_reference> grows faster than <title_reference>2^n!</title_reference>.
(Apply factorial to both sides.)</paragraph></list_item><list_item><paragraph><title_reference>2^{n!}</title_reference> grows faster than <title_reference>2^{2^n}</title_reference>.
(Take antilog of both sides.)</paragraph></list_item><list_item><paragraph><title_reference>n!^2</title_reference> grows faster than <title_reference>2^{2n}</title_reference>.
(Square both sides.)</paragraph></list_item><list_item><paragraph><title_reference>sqrt{n!}</title_reference> grows faster than <title_reference>sqrt{2^n}</title_reference>.
(Take square root of both sides.)</paragraph></list_item><list_item><paragraph><title_reference>log n!</title_reference> grows <emphasis>no slower</emphasis> than <title_reference>n</title_reference>.
(Take log of both sides.
Actually, it grows faster since <title_reference>log n! = Theta(n log n)</title_reference>.)</paragraph></list_item></bullet_list><paragraph>If <title_reference>f</title_reference> grows faster than <title_reference>g</title_reference>, then
must <title_reference>sqrt{f}</title_reference> grow faster than <title_reference>sqrt{g}</title_reference>?
Yes.</paragraph><paragraph>Must <title_reference>log f</title_reference> grow faster than <title_reference>log g</title_reference>?
No.
<title_reference>log n approx log n^2</title_reference> within a constant factor, that is, the
growth <strong>rate</strong> is the same!</paragraph><paragraph><title_reference>log n</title_reference> is related to <title_reference>n</title_reference> in exactly the same way that
<title_reference>n</title_reference> is related to <title_reference>2^n</title_reference>.</paragraph><paragraph><title_reference>2^{log n} = n</title_reference>.</paragraph></section><section ids="asymptotic-notation" names="asymptotic\ notation"><title>Asymptotic Notation</title><math_block xml:space="preserve">\begin{array}{llcl}
\mathrm{little\ oh}&amp;f(n) \in o(g(n))&amp;&lt;&amp;\lim f(n)/g(n) = 0\\
\mathrm{big\ oh}&amp;f(n) \in O(g(n))&amp;\leq\\
\mathrm{Theta}&amp;f(n) = \Theta(g(n))&amp;=&amp;f=O(g) and\\
&amp;&amp;&amp; g=O(f)\\
\mathrm{Big\ Omega}&amp;f(n) \in \Omega(g(n))&amp;\geq\\
\mathrm{Little Omega}&amp;f(n) \in \omega(g(n))&amp;&gt;&amp;\lim g(n)/f(n) = 0
\end{array}</math_block><paragraph>I prefer "<title_reference>f in O(n^2)</title_reference>" to "<title_reference>f = O(n^2)</title_reference>"
While <title_reference>n in O(n^2)</title_reference> and <title_reference>n^2 in O(n^2)</title_reference>,
<title_reference>O(n) neq O(n^2)</title_reference>.</paragraph><paragraph>Note: Big oh does not say how good an algorithm is
only how bad it <strong>can</strong> be.</paragraph><paragraph>If <title_reference>mathcal{A}in O(n)</title_reference> and <title_reference>mathcal{B} in O(n^2)</title_reference>,
is <title_reference>mathcal{A}</title_reference> better than <title_reference>mathcal{B}</title_reference>?
Perhaps... but perhaps better analysis will show that
<title_reference>mathcal{A} = Theta(n)</title_reference> while
<title_reference>mathcal{B} = Theta(log n)</title_reference>.</paragraph><paragraph>Order Notation has practical limits.
Notation: <title_reference>log n^2 (= 2 log n)</title_reference> vs.
<title_reference>log^2 n (= (log n)^2)</title_reference>
vs. <title_reference>log log n</title_reference>.</paragraph><paragraph><title_reference>log 16^2 = 2 log 16 = 8</title_reference>.</paragraph><paragraph><title_reference>log^2 16 = 4^2 = 16</title_reference>.</paragraph><paragraph><title_reference>log log 16 = log 4 = 2</title_reference>.</paragraph><paragraph>Statement: Resource requirements for Algorithm <title_reference>mathcal{A}</title_reference>
grow slower than resource requirements for Algorithm <title_reference>mathcal{B}</title_reference>.</paragraph><paragraph>Is <title_reference>mathcal{A}</title_reference> better than <title_reference>mathcal{B}</title_reference>?</paragraph><paragraph>Potential problems:</paragraph><bullet_list bullet="*"><list_item><paragraph>How big must the input be?</paragraph></list_item><list_item><paragraph>Some growth rate differences are trivial
Example: <title_reference>Theta(log^2 n)</title_reference> vs. <title_reference>Theta(n^{1/10})</title_reference>.
If <title_reference>n</title_reference> is <title_reference>10^{12} (approx 2^{40})</title_reference> then
<title_reference>log^2 n approx 1600</title_reference>, <title_reference>n^{1/10} = 16</title_reference> even though
<title_reference>n^{1/10}</title_reference> grows faster than <title_reference>log^2 n</title_reference>.
<title_reference>n</title_reference> must be enormous (like <title_reference>2^{150}</title_reference>) for
<title_reference>n^{1/10}</title_reference> to be bigger than <title_reference>log^2 n</title_reference>.</paragraph></list_item></bullet_list><paragraph>It is not always practical to reduce an algorithm's growth rate
"Practical" here means that the constants might become too
much higher when we shave off the minor asymptotic growth.</paragraph><paragraph>Shaving a factor of <title_reference>n</title_reference> reduces cost by a factor of a million
for input size of a million.
Shaving a factor of <title_reference>log log n</title_reference> saves only a factor of 4-5.</paragraph><paragraph>There is the concept of a "Practicality Window".
In general, (1) we have limited time to solve a problem,
and (2) input can only get so big before the computer chokes.
Fortunately, algorithm growth rates are USUALLY well behaved, so that
Order Notation gives practical indications.
"Practical" is the keyword.
We use asymptotics because they provide a simple <strong>model</strong> that
<strong>usually</strong> mirrors reality.
This is <strong>useful</strong> to simplify our thinking.</paragraph></section></document>