<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="comparing\ algorithms" ids="comparing-algorithms" source="&lt;string&gt;" title="Comparing Algorithms"><title>Comparing Algorithms</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><odsalink>AV/AlgAnal/GrowthRatesCON.css</odsalink></raw><raw format="xml" xml:space="preserve"><odsalink>AV/AlgAnal/GrowthRatesZoomCON.css</odsalink></raw><section dupnames="comparing\ algorithms" ids="id1"><title>Comparing Algorithms</title><section ids="introduction" names="introduction"><title>Introduction</title><paragraph>How do you compare two algorithms for solving some problem in terms
of efficiency?
We could implement both algorithms as computer programs and then
run them on a suitable range of inputs, measuring how much of the
resources in question each program uses.
This approach is often unsatisfactory for four reasons.
First, there is the effort involved in programming and testing two
algorithms when at best you want to keep only one.
Second, when empirically comparing two algorithms there
is always the chance that one of the programs was "better written"
than the other, and therefore the relative qualities of the underlying
algorithms are not truly represented by their implementations.
This can easily occur when the programmer has a bias
regarding the algorithms.
Third, the choice of empirical test cases might unfairly favor one
algorithm.
Fourth, you could find that even the better of the two algorithms does
not fall within your resource budget.
In that case you must begin the entire process again with yet another
program implementing a new algorithm.
But, how would you know if any algorithm can meet the resource budget?
Perhaps the problem is simply too difficult for any implementation to
be within budget.</paragraph><paragraph>These problems can often be avoided by using
asymptotic analysis.
Asymptotic analysis measures the efficiency of an algorithm, or its
implementation as a program, as the input size becomes large.
It is actually an estimating technique
and does not tell us anything about the relative merits of two
programs where one is always "slightly faster" than the other.
However, asymptotic analysis has proved useful
to computer scientists who must determine if a particular algorithm
is worth considering for implementation.</paragraph><paragraph>The critical resource for a program is most often its running
time.
However, you cannot pay attention to running time alone.
You must also be concerned with other factors such as the space
required to run the program (both main memory and disk space).
Typically you will analyze the <emphasis>time</emphasis> required for an
<emphasis>algorithm</emphasis> (or the instantiation of an algorithm in the form
of a program), and the <emphasis>space</emphasis> required for a
<emphasis>data structure</emphasis>.</paragraph><paragraph>Many factors affect the running time of a program.
Some relate to the environment in which the program
is compiled and run.
Such factors include the speed of the computer's CPU, bus, and
peripheral hardware.
Competition with other users for the computer's (or the network's)
resources can make a program slow to a crawl.
The programming language and the quality of code generated by a
particular compiler can have a significant
effect.
The "coding efficiency" of the programmer who converts the algorithm
to a program can have a tremendous impact as well.</paragraph><paragraph>If you need to get a program working within time and space
constraints on a particular computer, all of these factors can be
relevant.
Yet, none of these factors address the differences between
two algorithms or data structures.
To be fair, if you want to compare two programs derived from two
algorithms for solving the same problem, they should both be compiled
with the same compiler and run on the same computer under the same
conditions.
As much as possible, the same amount of care should be taken in
the programming effort devoted to each program to make the
implementations "equally efficient".
In this sense, all of the factors mentioned above should cancel
out of the comparison because they apply to both algorithms equally.</paragraph><paragraph>If you truly wish to understand the running time of an algorithm,
there are other factors that are more appropriate to consider than
machine speed, programming language, compiler, and so forth.
Ideally we would measure the running time of the algorithm under
standard benchmark conditions.
However, we have no way to calculate the running time reliably other
than to run an implementation of the algorithm on some computer.
The only alternative is to use some other measure as a surrogate for
running time.</paragraph></section><section ids="basic-operations-and-input-size" names="basic\ operations\ and\ input\ size"><title>Basic Operations and Input Size</title><paragraph>Of primary consideration when estimating an algorithm's performance
is the number of <title_reference>basic operations &lt;basic operation&gt;</title_reference> required by
the algorithm to process an input of a certain size.
The terms "basic operations" and "size" are both
rather vague and depend on the algorithm being analyzed.
Size is often the number of inputs processed.
For example, when comparing sorting algorithms
the size of the problem is typically measured by the number of
records to be sorted.
A basic operation must have the property that its time to
complete does not depend on the particular values of its operands.
Adding or comparing two integer variables are examples of basic
operations in most programming languages.
Summing the contents of an array containing <math>n</math> integers is not,
because the cost depends on the value of <math>n</math>
(i.e., the size of the input).</paragraph><target refid="seqmax"></target><topic ids="seqmax" names="seqmax"><title>Example</title><paragraph>Consider a simple algorithm to solve the problem of finding the
largest value in an array of <math>n</math> integers.
The algorithm looks at each integer in turn, saving the position of
the largest value seen so far.
This algorithm is called the <emphasis>largest-value sequential search</emphasis>
and is illustrated by the following function:</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>Here, the size of the problem is <literal>A.length</literal>,
the number of integers stored in array <literal>A</literal>.
The basic operation is to compare an integer's value to that
of the largest value seen so far.
It is reasonable to assume that it takes a fixed amount of time to
do one such comparison, regardless of the value of the two
integers or their positions in the array.</paragraph><paragraph>Because the most important factor affecting running time is
normally size of the input, for a given input size <math>n</math> we
often express the time <math>\mathbf{T}</math> to  run the algorithm as
a function of <math>n</math>, written as <math>\mathbf{T}(n)</math>.
We will always assume <math>\mathbf{T}(n)</math> is a non-negative
value.</paragraph><paragraph>Let us call <math>c</math> the amount of time required to compare two
integers in function <literal>largest</literal>.
We do not care right now what the precise value of <math>c</math> might
be.
Nor are we concerned with the time required to increment
variable <math>i</math> because this must be done for each value in the
array, or the time for the actual assignment when a larger value is
found, or the little bit of extra time taken to initialize
<literal>currlarge</literal>.
We just want a reasonable approximation for the time taken to
execute the algorithm.
The total time to run <literal>largest</literal> is therefore approximately
<math>cn</math>, because we must make <math>n</math> comparisons,
with each comparison costing <math>c</math> time.
We say that function <literal>largest</literal>
(and by extension, the largest-value sequential search algorithm for
any typical implementation) has a running time expressed
by the equation</paragraph><math_block xml:space="preserve">\mathbf{T}(n) = cn.</math_block><paragraph>This equation describes the growth rate for the running time of the
largest-value sequential search algorithm.</paragraph></topic><topic><title>Example</title><paragraph>The running time of a statement that assigns the first value of an
integer array to a variable is simply the time required to copy the
value of the first array value.
We can assume this assignment takes a constant amount of time
regardless of the value.
Let us call <math>c_1</math> the amount of time necessary to copy an
integer.
No matter how large the array on a typical computer
(given reasonable conditions for memory and array size), the time
to copy the value from the first position of the array is always
<math>c_1</math>.
Thus, the equation for this algorithm is simply</paragraph><math_block xml:space="preserve">\mathbf{T}(n) = c_1,</math_block><paragraph>indicating that the size of the input <math>n</math> has no effect on
the running time.
This is called a <title_reference>constant running time</title_reference>.</paragraph></topic><topic><title>Example</title><paragraph>Consider the following code:</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>What is the running time for this code fragment?
Clearly it takes longer to run when <math>n</math> is larger.
The basic operation in this example is the
increment operation for variable <literal>sum</literal>.
We can assume that incrementing takes constant time;
call this time <math>c_2</math>.
(We can ignore the time required to initialize <literal>sum</literal>,
and to increment the loop counters <literal>i</literal> and <literal>j</literal>.
In practice, these costs can safely be bundled into time
<math>c_2</math>.)
The total number of increment operations is <math>n^2</math>.
Thus, we say that the running time is
<math>\mathbf{T}(n) = c_2 n^2</math>.</paragraph></topic></section><section ids="growth-rates" names="growth\ rates"><title>Growth Rates</title><paragraph>The <title_reference>growth rate</title_reference> for an algorithm is the rate at which the cost
of the algorithm grows as the size of its input grows.
The following figure shows a graph for six equations,
each meant to describe the running time for a particular program or
algorithm.
A variety of growth rates that are representative of typical
algorithms are shown.</paragraph><target refid="runtimegraph"></target><raw format="xml" ids="runtimegraph" names="runtimegraph" xml:space="preserve"><inlineav
    type="dgm"
    exer_name="GrowthRatesCON"
    long_name="GrowthRatesCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><line_block><line></line></line_block><raw format="xml" xml:space="preserve"><inlineav
    type="dgm"
    exer_name="GrowthRatesZoomCON"
    long_name="GrowthRatesZoomCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><paragraph>The two equations labeled <math>10n</math> and <math>20n</math> are graphed by
straight lines.
A growth rate of <math>cn</math> (for <math>c</math> any positive constant) is
often referred to as a <title_reference>linear growth rate</title_reference> or running time.
This means that as the value of <math>n</math> grows, the running time of
the algorithm grows in the same proportion.
Doubling the value of <math>n</math> roughly doubles the running time.
An algorithm whose running-time equation has a highest-order term
containing a factor of <math>n^2</math> is said to have a
<title_reference>quadratic growth rate</title_reference>.
In the figure, the line labeled <math>2n^2</math>
represents a quadratic growth rate.
The line labeled <math>2^n</math> represents an
<title_reference>exponential growth rate</title_reference>.
This name comes from the fact that <math>n</math> appears in the exponent.
The line labeled <math>n!</math> also grows exponentially.</paragraph><paragraph>As you can see from the figure,
the difference between an algorithm whose running time has cost
<math>\mathbf{T}(n) = 10n</math> and another with cost
<math>\mathbf{T}(n) = 2n^2</math> becomes tremendous as <math>n</math> grows.
For <math>n &gt; 5</math>, the algorithm with running time
<math>\mathbf{T}(n) = 2n^2</math> is already much slower.
This is despite the fact that <math>10n</math> has a greater constant
factor than <math>2n^2</math>.
Comparing the two curves marked <math>20n</math> and <math>2n^2</math> shows
that changing the constant factor for one of the equations only shifts
the point at which the two curves cross.
For <math>n&gt;10</math>, the algorithm with cost <math>\mathbf{T}(n) = 2n^2</math>
is slower than the algorithm with cost <math>\mathbf{T}(n) = 20n</math>.
This graph also shows that the equation
<math>\mathbf{T}(n) = 5 n \log n</math>
grows somewhat more quickly than both <math>\mathbf{T}(n) = 10 n</math> and
<math>\mathbf{T}(n) = 20 n</math>, but not nearly so quickly as the
equation <math>\mathbf{T}(n) = 2n^2</math>.
For constants <math>a, b &gt; 1, n^a</math> grows faster than either
<math>\log^b n</math> or <math>\log n^b</math>.
Finally, algorithms with cost <math>\mathbf{T}(n) = 2^n</math> or
<math>\mathbf{T}(n) = n!</math> are prohibitively expensive for even modest
values of <math>n</math>.
Note that for constants <math>a, b \geq 1, a^n</math> grows faster than
<math>n^b</math>.</paragraph><paragraph>We can get some further insight into relative growth rates for various
algorithms from the following table.
Most of the growth rates that appear in typical algorithms are shown,
along with some representative input sizes.
Once again, we see that the growth rate has a tremendous effect on the
resources consumed by an algorithm.</paragraph><target refid="growthtable"></target><topic ids="growthtable" names="growthtable"><title>Table</title><paragraph>Costs for representative growth rates.</paragraph><math_block xml:space="preserve">\begin{array}{c|c|c|c|c|c|c|c}
\mathsf{n} &amp; \mathsf{\log \log n} &amp; \mathsf{\log n} &amp; \mathsf{n} &amp;
\mathsf{n \log n} &amp; \mathsf{n^2} &amp; \mathsf{n^3} &amp; \mathsf{2^n}\\
\hline
\mathsf{16} &amp; \mathsf{2} &amp; \mathsf{4} &amp; \mathsf{2^{4}} &amp;
\mathsf{4 \cdot 2^{4} = 2^{6}} &amp;
\mathsf{2^{8}} &amp; \mathsf{2^{12}} &amp; \mathsf{2^{16}}\\
\mathsf{256} &amp; \mathsf{3} &amp; \mathsf{8} &amp; \mathsf{2^{8}} &amp;
\mathsf{8 \cdot 2^{8} = 2^{11}} &amp;
\mathsf{2^{16}} &amp; \mathsf{2^{24}} &amp; \mathsf{2^{256}}\\
\mathsf{1024} &amp; \mathsf{\approx 3.3} &amp; \mathsf{10} &amp; \mathsf{2^{10}} &amp;
\mathsf{10 \cdot 2^{10} \approx 2^{13}} &amp;
\mathsf{2^{20}} &amp; \mathsf{2^{30}} &amp; \mathsf{2^{1024}}\\
\mathsf{64 {\rm K}} &amp; \mathsf{4} &amp; \mathsf{16} &amp; \mathsf{2^{16}} &amp;
\mathsf{16 \cdot 2^{16} = 2^{20}} &amp;
\mathsf{2^{32}} &amp; \mathsf{2^{48}} &amp; \mathsf{2^{64 {\rm K}}}\\
\mathsf{1 {\rm M}} &amp; \mathsf{\approx 4.3} &amp; \mathsf{20} &amp; \mathsf{2^{20}} &amp;
\mathsf{20 \cdot 2^{20} \approx 2^{24}} &amp;
\mathsf{2^{40}} &amp; \mathsf{2^{60}} &amp; \mathsf{2^{1 {\rm M}}}\\
\mathsf{1 {\rm G}} &amp; \mathsf{\approx 4.9} &amp; \mathsf{30} &amp; \mathsf{2^{30}} &amp;
\mathsf{30 \cdot 2^{30} \approx 2^{35}} &amp;
\mathsf{2^{60}} &amp; \mathsf{2^{90}} &amp; \mathsf{2^{1 {\rm G}}}\\
\end{array}</math_block></topic><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="CompareGrowth"
    long_name="CompareGrowth"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw></section></section><section ids="growth-rates-ordering-exercise" names="growth\ rates\ ordering\ exercise"><title>Growth Rates Ordering Exercise</title><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="GrowthRatesPRO"
    long_name="GrowthRatesPRO"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw><raw format="xml" xml:space="preserve"><todo>null</todo></raw><raw format="xml" xml:space="preserve"><odsascript>DataStructures/Plot.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/AlgAnal/GrowthRatesCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/AlgAnal/GrowthRatesZoomCON.js</odsascript></raw></section></document>