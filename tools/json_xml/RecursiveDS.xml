<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="binary\ tree\ as\ a\ recursive\ data\ structure" ids="binary-tree-as-a-recursive-data-structure" source="&lt;string&gt;" title="Binary Tree as a Recursive Data Structure"><title>Binary Tree as a Recursive Data Structure</title><subtitle dupnames="binary\ tree\ as\ a\ recursive\ data\ structure" ids="id1">Binary Tree as a Recursive Data Structure</subtitle><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><odsalink>AV/Binary/RecursiveDSCON.css</odsalink></raw><paragraph>A <title_reference>recursive data structure</title_reference> is a data structure that is partially
composed of smaller or simpler instances of the same data structure.
For example, <title_reference>linked lists &lt;linked list&gt;</title_reference> and
<title_reference>binary trees &lt;binary tree&gt;</title_reference> can be viewed as recursive
data structures.
A list is a recursive data structure because a list can be defined as
either (1) an empty list or (2) a node followed by a list.
A binary tree is typically defined as
(1) an empty tree or
(2) a node pointing to two binary trees, one its left child and the
other one its right child.</paragraph><target refid="listrecds"></target><raw format="xml" ids="listrecds" names="listrecds" xml:space="preserve"><inlineav
    type="dgm"
    exer_name="ListRecDSCON"
    long_name="ListRecDSCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><target refid="binrecds"></target><raw format="xml" ids="binrecds" names="binrecds" xml:space="preserve"><inlineav
    type="dgm"
    exer_name="BinRecDSCON"
    long_name="BinRecDSCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><paragraph>The recursive relationships used to define a structure provide a
natural model for any recursive algorithm on the structure.</paragraph><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="SumBinaryTreeCON"
    long_name="SumBinaryTreeCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><raw format="xml" xml:space="preserve"><odsascript>AV/Binary/ListRecDSCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/Binary/BinRecDSCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/Binary/SumBinaryTreeCON.js</odsascript></raw></document>