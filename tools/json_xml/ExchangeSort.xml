<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="the\ cost\ of\ exchange\ sorting" ids="the-cost-of-exchange-sorting" source="&lt;string&gt;" title="The Cost of Exchange Sorting"><title>The Cost of Exchange Sorting</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><index>null</index></raw><raw format="xml" xml:space="preserve"><index>null</index></raw><raw format="xml" xml:space="preserve"><odsalink>AV/Sorting/ExchangeSortCON.css</odsalink></raw><section dupnames="the\ cost\ of\ exchange\ sorting" ids="id1"><title>The Cost of Exchange Sorting</title><raw format="xml" xml:space="preserve"><todo>null</todo></raw><paragraph>Here is a summary for the cost of Insertion Sort,
Bubble Sort, and Selection Sort in terms of their required number of
comparisons and swaps in the best, average, and worst cases.
The running time for each of these sorts is
<math>\Theta(n^2)</math> in the average and worst cases.</paragraph><math_block xml:space="preserve">\begin{array}{rccc}
&amp;\textbf{Insertion}&amp;\textbf{Bubble}&amp;\textbf{Selection}\\
\textbf{Comparisons:}\\
\textrm{Best Case}&amp;\Theta(n)&amp;\Theta(n^2)&amp;\Theta(n^2)\\
\textrm{Average Case}&amp;\Theta(n^2)&amp;\Theta(n^2)&amp;\Theta(n^2)\\
\textrm{Worst Case}&amp;\Theta(n^2)&amp;\Theta(n^2)&amp;\Theta(n^2)\\
\\
\textbf{Swaps:}\\
\textrm{Best Case}&amp;0&amp;0&amp;\Theta(n)\\
\textrm{Average Case}&amp;\Theta(n^2)&amp;\Theta(n^2)&amp;\Theta(n)\\
\textrm{Worst Case}&amp;\Theta(n^2)&amp;\Theta(n^2)&amp;\Theta(n)\\
\end{array}</math_block><paragraph>The remaining sorting algorithms presented in this tutorial are
significantly better than these three under typical conditions.
But before continuing on, it is instructive to investigate what makes
these three sorts so slow.
The crucial bottleneck is that only <emphasis>adjacent</emphasis> records are compared.
Thus, comparisons and moves (for Insertion and Bubble Sort) are by
single steps.
Swapping adjacent records is called an <title_reference>exchange</title_reference>.
Thus, these sorts are sometimes referred to as an
<title_reference>exchange sort</title_reference>.
The cost of any exchange sort can be at best the total number of
steps that the records in the array must move to reach their
"correct" location.
Recall that this is at least the number of
inversions for the record, where an <title_reference>inversion</title_reference> occurs when a
record with key value greater than the current record's key value
appears before it.</paragraph><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="FindInversionsPRO"
    long_name="FindInversionsPRO"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw></section><section ids="analysis" names="analysis"><title>Analysis</title><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="ExchangeSortCON"
    long_name="ExchangeSortCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="ExchangeSumm"
    long_name="ExchangeSumm"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw><raw format="xml" xml:space="preserve"><odsascript>AV/Sorting/ExchangeSortCON.js</odsascript></raw></section></document>