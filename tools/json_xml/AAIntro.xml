<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="data-and-algorithm-analysis" names="data\ and\ algorithm\ analysis" source="&lt;string&gt;" title="Data and Algorithm Analysis"><title>Data and Algorithm Analysis</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><section ids="introduction" names="introduction"><title>Introduction</title><paragraph>This eTextbook is intended for a senior-level course in Data and
Algorithm Analysis, or Theory of Algorithms.</paragraph></section><section ids="prerequisites" names="prerequisites"><title>Prerequisites</title><paragraph>This course assumes that you already have sufficient background in a
number of Computer Science topics</paragraph><paragraph>You should have had a course in Discrete Math, covering at least the
following:</paragraph><bullet_list bullet="*"><list_item><paragraph>Basic proof techniques like proof by contradition and induction.</paragraph></list_item><list_item><paragraph>Basic techniques for solving summations and recurrence relations</paragraph></list_item><list_item><paragraph>Set theory and relations</paragraph></list_item></bullet_list><paragraph>You should have had a course in Data Structures to cover at least the
following:</paragraph><bullet_list bullet="*"><list_item><paragraph>Basic algorithm analysis, including big-oh, big-Omega, and
<math>\Theta</math> notations.</paragraph></list_item><list_item><paragraph>Basic data structures and algorithms including lists, search
structures such as BSTs, sorting algorithms, heaps, hashing, and
basic graph algorithms.</paragraph></list_item></bullet_list></section><section ids="what-we-will-do" names="what\ we\ will\ do"><title>What we will do</title><paragraph>Major topics/goals for this course include:</paragraph><bullet_list bullet="*"><list_item><paragraph>Getting a good understanding of upper and (especially) lower bounds
for an algorithm or problem.</paragraph></list_item><list_item><paragraph>Lower bounds proofs.</paragraph></list_item><list_item><paragraph>Analysis techniques, including solving a lot of summations and
recurrence relations.</paragraph></list_item><list_item><paragraph>Reductions, most importantly NP-completeness theory.</paragraph></list_item><list_item><paragraph>A little bit of computability theory as a bonus.</paragraph></list_item></bullet_list></section><section ids="process" names="process"><title>Process</title><paragraph>The primary work in this course will come from the weekly homework
sets.
They will typically consist of three problems.
You should expect that a lot of them will be fairly hard.</paragraph><paragraph>The intention of the course design is that you will work with a
partner on the homework.
Understanding this course content is hard.
Figuring out the problem solutions is intended to be hard.
This works best if you can bounce ideas off of someone else, and
actively work together toward a final solution.
If nothing else, being a skeptical reviewer is a key contribution.
Recognizing that an answer is no good, or incomplete, is crucial to
succeeding in this class.</paragraph></section></document>