<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="parsing-command-line-parameters-in-your-progam" names="parsing\ command\ line\ parameters\ in\ your\ progam" source="&lt;string&gt;" title="Parsing Command Line Parameters In Your Progam"><title>Parsing Command Line Parameters In Your Progam</title><subtitle ids="parameters-in-programming" names="parameters\ in\ programming">Parameters In Programming</subtitle><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><paragraph>Alright I get the idea of parameters for a function, that's easy enough. But
how does a Program itself have parameters? This comes in the Main function that
every Java program has. Consider this the "launch" function. Usually the "main"
function is named Main and takes an array of strings as its parameter
(see below).</paragraph><literal_block xml:space="preserve">public static void main(String[] args)</literal_block><paragraph>So when you launch the command from the terminal it passes in an array of all
the additional information (and it usually trims white space). So if I run</paragraph><raw format="xml" xml:space="preserve"><odsafig>null</odsafig></raw><paragraph>Then args is an array containing:</paragraph><literal_block xml:space="preserve">{"-l", "file.txt"}</literal_block><paragraph>*Authors Note: This is true for Java, but is a little different for C or C++.
In C, the first parameter that you are given is always the command name so
your array in C would be:</paragraph><literal_block xml:space="preserve">{"ls", "-l", "file.txt"}</literal_block><paragraph>Java however, removes the command name and only provides parameters.</paragraph><paragraph>I have created a main function skeleton for you to use in your projects. It is
set up simply and makes use of switch cases. You can <raw format="html" xml:space="preserve">&lt;a href="http://pastebin.com/gwSH2cEa" target="_blank"&gt;download it&lt;/a&gt;</raw>.
Let's see how it works.</paragraph><substitution_definition names="external_link1"><raw format="html" xml:space="preserve">&lt;a href="http://pastebin.com/gwSH2cEa" target="_blank"&gt;download it&lt;/a&gt;</raw></substitution_definition><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>We have our main function take an array of Strings (named args). If that array
is empty then we may or may not want to exit as we have no parameters. It will
then progress into a while loop that iterates through all parameters. The syntax
of this loop is useful as it does not lock parameters into any fixed order. You
can invoke them anyway you wish. The switch case statement allows you to easily
write for any parameter and add a case for unrecognized parameters by using the
default case for any non matching parameters. In this example I choose to exit
after printing the unrecognized string. In the future you may wish to change
this to something else. You can learn more about <raw format="html" xml:space="preserve">&lt;a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html" target="_blank"&gt;switch statements&lt;/a&gt;</raw>.
It is also important to note that this function will possibly throw an exception
or behave in an unexpected way if you use "-f" but do not give a file name. For
example you call the program with {"-f", "-v"}, this will set the filename to -v.
Or if you call the program with {"-f"}, you will get an exception for trying to
access outside the array bounds. You can prevent this by using a try catch, but
for simplicity's sake I chose to make example very simple. Once you have your
parameters set, you can call the appropriate methods to launch your program.
There you go simple command line parsing!</paragraph><substitution_definition names="external_link2"><raw format="html" xml:space="preserve">&lt;a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html" target="_blank"&gt;switch statements&lt;/a&gt;</raw></substitution_definition></document>