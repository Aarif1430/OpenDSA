<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="alternative-list-adt-designs" names="alternative\ list\ adt\ designs" source="&lt;string&gt;" title="Alternative List ADT Designs"><title>Alternative List ADT Designs</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><paragraph>The <title_reference>list ADT &lt;list&gt; &lt;ListADT&gt;</title_reference> specifies that a List
comprises not only a collection of objects in linear order,
but also "the current position".
While this is a simple way to present the main concepts embodied by a
list, it complicates any algorithm that relies on having two or more
distinct "current positions" in the same list, such as any algorithm
that steps from both ends towards the middle.</paragraph><paragraph>An alternative design is to separate the "current position" as a
separate object.
In the following ADT, we will call this a <literal>ListIndex</literal>.
This is a simple form of a concept that is sometimes called an
<title_reference>iterator</title_reference>.
The <literal>ListIndex</literal> interface abstracts the notion of a position in a
list.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>There is the issue in an implementation of how the two classes will
communicate.
For the array-based list, the <literal>ListIndex</literal> merely needs to store an
integer for the position.
For the linked list class, the <literal>ListIndex</literal> would store a pointer to
a linked list node.
This means that the <literal>List</literal> class needs to be able to set and get
this pointer, but nobody outside should need to know about it.
Some languages like Java and C++ have mechanisms that allow a specific
class to have access to non-public members of another class.
Oher languages like Processing have no such concept.</paragraph><paragraph>One general solution is to make the interface for <literal>ListIndex</literal>
public, but make the implementation a private inner class of the List
implementation.
This approach is used in the following implmentation for the
Array-based list.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw></document>