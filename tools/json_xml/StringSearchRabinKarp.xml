<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="rabin-karp\ string\ search\ algorithm\ [draft]" ids="rabin-karp-string-search-algorithm-draft" source="&lt;string&gt;" title="Rabin-Karp String Search Algorithm [Draft]"><title>Rabin-Karp String Search Algorithm [Draft]</title><subtitle dupnames="rabin-karp\ string\ search\ algorithm\ [draft]" ids="id1">Rabin-Karp String Search Algorithm [Draft]</subtitle><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-13 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><comment xml:space="preserve"></comment><comment xml:space="preserve"></comment><paragraph>The Rabin-Karp algorithm is based on what could be imagined as a
"perfect hash function for strings".  We will assume that our
strings are drawn from an alphabet with <title_reference>C</title_reference> possible
characters. Denote the characters in string <title_reference>S</title_reference> by <title_reference>s_0,
s_1, ldots s_{n-1}</title_reference>.  Suppose that we have a mapping <title_reference>c
rightarrow hat{c}</title_reference> that associates with each character <title_reference>c</title_reference> an
integer <title_reference>hat{c}</title_reference> in the range <title_reference>0 ldots c - 1</title_reference>.  Then a
"perfect hash function for strings" is:</paragraph><math_block xml:space="preserve">\widehat{s_0} \times C^{n-1} + \widehat{s_1} \times C^{n-2} + \ldots + \widehat{s_{n-2}} \times C + \widehat{s_{n-1}} \times C^0</math_block><paragraph>Suppose that we call this a string's "magic number".  In effect it
associates each string with a unique number in the base <title_reference>C</title_reference>
number system.  However, nothing is perfect -- these magic numbers for
strings get very big very quickly.  Hence the following sub-algorithm
of Rabin-Karp to compute a string's magic number (which is itself
known as Horner's polynomial evaluation algorithm) takes this into
account by using the <title_reference>mod</title_reference> operator to avoid an overflow
condition.</paragraph><paragraph>Slideshow for Horner's Method algorithm for computing Rabin-Karp "magic number" for a string</paragraph><raw format="xml" xml:space="preserve"><avembed
    type="ss"
    exer_name="Rabin_Karp_Horner_Slideshow"
    long_name="Rabin_Karp_Horner_Slideshow"
    points="0.0"
    required="True"
    threshold="1.0">
</avembed>
</raw><paragraph>To check your understanding of this "magic number" computation try the
following exercise in using Horner's Method to compute a string's
"magic number" in a simple case</paragraph><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="Rabin_Karp_Horners_Exercise"
    long_name="Rabin_Karp_Horners_Exercise"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw><paragraph>Because Horner's Method cannot truly compute a magic number that is
unique for every string, the Rabin-Karp algorithm must allow for two
different strings having the same magic number.  In effect, such a
situation represents a "false positive" in which Rabin-Karp thinks it
has found a match only to be disappointed.  Watch Rabin-Karp in action
in the following slideshow.</paragraph><raw format="xml" xml:space="preserve"><avembed
    type="ss"
    exer_name="Rabin_Karp_Algorithm_Slideshow"
    long_name="Rabin_Karp_Algorithm_Slideshow"
    points="0.0"
    required="True"
    threshold="1.0">
</avembed>
</raw><paragraph>Finally try this exercise in tracing one step of the Rabin-Karp
algorithm using the modified Horner's algorithm to compute the "magic
number" of a string.</paragraph><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="Rabin_Karp_Next_Step"
    long_name="Rabin_Karp_Next_Step"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw></document>