{"document": {"@ids": "bit-vectors-for-representing-sets", "@names": "bit\\ vectors\\ for\\ representing\\ sets", "@source": "<string>", "@title": "Bit Vectors for Representing Sets", "title": "Bit Vectors for Representing Sets", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Development/BitArrayCON.css"}, {"@format": "xml", "@ids": "primes", "@names": "primes", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "bitArray", "@long_name": "bitArray", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Development/BitArrayCON.js"}], "paragraph": ["Determining whether a value is a member of a particular set is a\nspecial case of searching for keys in a sequence of records.\nThus, any of the search methods discussed in this book can be\nused to check for set membership.\nHowever, we can also take advantage of the restricted circumstances\nimposed by this problem to develop another representation.", {"title_reference": ["Figure #Primes", "bit vector", "bitmap", "Graphs"], "#text": "In the case where the set values fall within a limited range, we\ncan represent the set using a bit array with a bit position allocated\nfor each potential member.\nThose members actually in the set store a value of 1 in their\ncorresponding bit;\nthose members not in the set store a value of 0 in their corresponding\nbit.\nFor example, consider the set of primes between 0 and 15.\nFigure  shows the corresponding bit array.\nTo determine if a particular value is prime, we simply check\nthe corresponding bit.\nThis representation scheme is called a  or a\n.\nThe mark array used in several of the graph algorithms of\nChapter  is an example of such a set representation."}, {"math": ["A", "B", "A", "B"], "literal": ["|", "&"], "#text": "If the set fits within a single computer word, then\nset union, intersection,\nand difference can be performed by logical bit-wise operations.\nThe union of sets  and  is the bit-wise OR function\n(whose symbol is  in Java).\nThe intersection of sets  and  is the bit-wise AND\nfunction (whose symbol is  in Java).\nFor example, if we would like to compute the set of numbers between\n0 and 15 that are both prime and odd numbers, we need only compute the\nexpression"}, {"math": "A - B", "literal": ["A&~B", "~"], "#text": "The set difference  can be implemented in Java using\nthe expression  ( is the symbol for bit-wise negation).\nFor larger sets that do not fit into a single computer word, the\nequivalent operations can be performed in turn on the series of words\nmaking up the entire bit vector."}, {"title_reference": "signature file", "#text": "This method of computing sets from bit vectors is sometimes applied to\ndocument retrieval.\nConsider the problem of picking from a collection of documents those\nfew which contain selected keywords.\nFor each keyword, the document retrieval system stores a bit vector\nwith one bit for each document.\nIf the user wants to know which documents contain a certain three\nkeywords, the corresponding three bit vectors are AND'ed together.\nThose bit positions resulting in a value of 1 correspond to the\ndesired documents.\nAlternatively, a bit vector can be stored for each document to\nindicate those keywords appearing in the document.\nSuch an organization is called a .\nThe signatures can be manipulated to find documents with desired\ncombinations of keywords."}], "target": {"@refid": "primes"}, "math_block": {"@xml:space": "preserve", "#text": "0011010100010100\\ \\&\\ 0101010101010101."}}}