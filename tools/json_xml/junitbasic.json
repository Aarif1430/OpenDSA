{"document": {"@dupnames": "writing\\ junit\\ tests", "@ids": "writing-junit-tests", "@source": "<string>", "@title": "Writing JUnit Tests", "title": "Writing JUnit Tests", "subtitle": {"@dupnames": "writing\\ junit\\ tests", "@ids": "id1", "#text": "Writing JUnit Tests"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "paragraph": ["We have reviewed good design for test code and how to design modular and\nmeaningful test code. This tutorial will show a basic series of tests on a\nbinary search tree.", {"literal": "Junit/student.TestCase classes", "#text": "Before you start, be sure you have familiarized yourself with the basics of the\n."}, {"emphasis": "For this exercise I will be using a BST written by a V.S. Adamchik"}, {"raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a\nhref=\"https://www.cs.cmu.edu/~adamchik/15-121/lectures/Trees/code/BST.java\" target = \"_blank\">Here is the full BST source code</a>"}, "#text": "."}, "While this class contains many methods this tutorial will only be testing a few.", "The above source code shows a possible approach to testing the BST class add and\ndelete methods. Given that a binary search tree is a well documented data\nstructure, there are a number of sites one may refer to for information to test.\nIn this case I referred to the wikipedia entry and pulled the first example of\na binary search tree available. Those familiar with tree traversals know that\nfor a given set of values an in order traversal will display the values in order\nfrom least to greatest, so after adding all the values to the tree, it is simple\nto know what to expect. In order to guarantee that the tree has been properly\nconstructed I have chosen to test the Pre-Order traversal as well. Testing the\ndelete function is a bit tougher. There are several cases that must be considered\nin order to get proper code coverage namely: deleting a leaf node, deleting an\ninternal node with one child, deleting an internal node with 2 children, and\ndeleting an internal node which does not immediately link to a leaf node. In\naddition to all of this examination of the delete function shows that it is\npossible for that function to throw a RuntimeException. In order to test this\nthe test code attempts force the delete function to throw the exception, however,\nit is possible that the exception will not be thrown and no actual test on the\nException could be performed. As such the test code makes use of a canary value\nto guarantee that that the exception is thrown. Or else the tests will fail.\nAfter testing the Exception, the function then tries to test the series of cases\nthat the delete function has.", {"title_reference": "assertEquals", "#text": "In many cases testing for equality will satisfy the what is needed to properly\ntest code. However not all information may be tested for strict equality as\ndata representations may not always provide exact information. For example when\nworking with floats or doubles it is important to test the results, however,\ndoing so for strict equality is no simple task. By making use of additional\nfunctional of  method it is possible ot assign an acceptable\nthreshold of difference between two values consider the below code."}, "The first test would succeed, but the second will fail. Why? Well in the second\ntest the threshold is much finer and Java will fail as 1.4142 is not close enough\nto 1.4142135623730951. Keep this information in mind as you develop code and\nchoose data types."], "substitution_definition": {"@names": "external_link", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a\nhref=\"https://www.cs.cmu.edu/~adamchik/15-121/lectures/Trees/code/BST.java\" target = \"_blank\">Here is the full BST source code</a>"}}, "literal_block": {"@xml:space": "preserve", "#text": "public void testsquareroot(){\n             assertEquals(Calculator.squareroot(2), 1.4142, .001);\n             assertEquals(Calculator.squareroot(2), 1.4142, .000000000001);\n     }"}}}