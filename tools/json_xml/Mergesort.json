{"document": {"@dupnames": "mergesort\\ concepts", "@ids": "mergesort-concepts", "@source": "<string>", "@title": "Mergesort Concepts", "title": "Mergesort Concepts", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Sorting/mergeCON.css"}, {"@format": "xml", "@xml:space": "preserve", "index": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Development/MergeSortAnalysisCON.css"}], "section": [{"@dupnames": "mergesort\\ concepts", "@ids": "id1", "title": "Mergesort Concepts", "paragraph": [{"title_reference": "Mergesort", "#text": "A natural approach to problem solving is divide and conquer.\nTo use divide and conquer when sorting, we might consider breaking the\nlist to be sorted into pieces, process the pieces, and then put them\nback together somehow.\nA simple way to do this would be to split the list in half, sort\nthe halves, and then merge the sorted halves together.\nThis is the idea behind ."}, "Mergesort is one of the simplest sorting algorithms conceptually,\nand has good performance both in the asymptotic\nsense and in empirical running time.\nUnfortunately, even though it is based on a simple concept,\nit is relatively difficult to implement in practice.\nHere is a pseudocode sketch of Mergesort:", "Here is a visualization that illustrates how Mergesort works.", "The hardest step to understand about Mergesort is the merge function.\nThe merge function starts by examining the first record of each\nsublist and picks the smaller value as the smallest record overall.\nThis smaller value is removed from its sublist and placed into the\noutput list.\nMerging continues in this way, comparing the front\nrecords of the sublists and continually appending the smaller to the\noutput list until no more input records remain.", "Here is pseudocode for merge on lists:", "Here is a visualization for the merge operation.", "Here is a mergesort warmup exercise to practice merging."], "literal_block": [{"@xml:space": "preserve", "#text": "List mergesort(List inlist) {\n  if (inlist.length() <= 1) return inlist;;\n  List L1 = half of the items from inlist;\n  List L2 = other half of the items from inlist;\n  return merge(mergesort(L1), mergesort(L2));\n}"}, {"@xml:space": "preserve", "#text": "List merge(List L1, List L2) {\n  List answer = new List();\n  while (L1 != NULL || L2 != NULL) {\n    if (L1 == NULL) { // Done L1\n      answer.append(L2);\n      L2 = NULL;\n    }\n    else if (L2 == NULL) { // Done L2\n      answer.append(L1);\n      L1 = NULL;\n    }\n    else if (L1.value() <= L2.value()) {\n      answer.append(L1.value());\n      L1 = L1.next();\n    }\n    else {\n      answer.append(L2.value());\n      L2 = L2.next();\n    }\n  }\n  return answer;\n}"}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ss", "@exer_name": "mergesortAV", "@long_name": "mergesortAV", "@points": "0.0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "mergesortCON", "@long_name": "mergesortCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "MergesortMergePRO", "@long_name": "MergesortMergePRO", "@points": "1.0", "@required": "True", "@threshold": "5"}}]}, {"@ids": "mergsort-practice-exercise", "@names": "mergsort\\ practice\\ exercise", "title": "Mergsort Practice Exercise", "paragraph": ["Now here is a full proficiency exercise to put it all together.", "This visualization provides a running time analysis for Merge Sort."], "raw": [{"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "pe", "@exer_name": "mergesortPRO", "@long_name": "mergesortPRO", "@points": "1.0", "@required": "True", "@threshold": "0.9"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "MergeSortAnalysisCON", "@long_name": "MergeSortAnalysisCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Sorting/mergesortCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Development/MergeSortAnalysisCON.js"}]}]}}