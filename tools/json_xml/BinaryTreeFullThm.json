{"document": {"@ids": "the-full-binary-tree-theorem", "@names": "the\\ full\\ binary\\ tree\\ theorem", "@source": "<string>", "@title": "The Full Binary Tree Theorem", "title": "The Full Binary Tree Theorem", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Binary/UnaryTreeExampleCON.css"}, {"@format": "xml", "@ids": "oneleaf", "@names": "oneleaf", "@xml:space": "preserve", "odsafig": "null"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "UnaryTreeExampleCON", "@long_name": "UnaryTreeExampleCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Binary/UnaryTreeExampleCON.js"}], "paragraph": [{"title_reference": ["leaf nodes <leaf node>", "internal nodes <internal node>", "children <child>"], "math": "n", "#text": "Some binary tree implementations store data only at the\n,\nusing the  to provide structure\nto the tree.\nBy definition, a leaf node does not need to store pointers to its\n(empty) .\nMore generally, binary tree implementations might require some amount\nof space for internal nodes, and a different amount for leaf nodes.\nThus, to compute the space required by such implementations, it is\nuseful to know the minimum and maximum fraction of the nodes that are\nleaves in a tree containing  internal nodes."}, {"math": ["n", "n", "n"], "title_reference": "Figure #OneLeaf", "#text": "Unfortunately, this fraction is not fixed.\nA binary tree of  internal nodes might have only one leaf.\nThis occurs when the internal nodes are arranged in a chain ending\nin a single leaf as shown in Figure .\nIn this example, the number of leaves is low because each\ninternal node has only one non-empty child.\nTo find an upper bound on the number of leaves for a tree of \ninternal nodes, first note that the upper bound will occur when each\ninternal node has two non-empty children, that is, when the tree is\nfull.\nHowever, this observation does not tell what shape of tree will yield\nthe highest percentage of non-empty leaves.\nIt turns out not to matter, because all full binary trees with\n internal nodes have the same number of leaves.\nThis fact allows us to compute the space requirements for a full\nbinary tree implementation whose leaves require a different amount of\nspace from its internal nodes."}, {"emphasis": "any", "#text": "When analyzing the space requirements for a binary tree\nimplementation,\nit is useful to know how many empty subtrees a tree contains.\nA simple extension of the Full Binary Tree Theorem tells us exactly\nhow many empty subtrees there are in  binary tree, whether\nfull or not.\nHere are two approaches to proving the following theorem, and\neach suggests a useful way of thinking about binary trees."}], "target": [{"@refid": "oneleaf"}, {"@refid": "fulltree"}, {"@refid": "subtreethrm"}], "topic": [{"@ids": "fulltree", "@names": "fulltree", "title": "Theorem", "paragraph": [{"strong": "Full Binary Tree Theorem:", "#text": "The number of leaves in a non-empty full binary tree is one\nmore than the number of internal nodes."}, {"strong": "Proof:", "title_reference": "mathematical induction <proof by induction>", "math": ["n", "n", "n-1"], "#text": "The proof is by \non , the number of internal nodes.\nThis is an example of the style of induction proof\nwhere we reduce from an arbitrary instance of size  to an\ninstance of size  that meets the induction hypothesis."}, {"math": "n > 0", "#text": "By mathematical induction the theorem holds for all values of\n."}], "enumerated_list": {"@enumtype": "lowerroman", "@prefix": "", "@suffix": ")", "list_item": [{"paragraph": {"strong": "Base Cases:", "math": ["n = 0", "n = 1"], "#text": "The non-empty tree with zero internal nodes has\none leaf node.\nA full binary tree with one internal node has two leaf nodes.\nThus, the base cases for  and  conform\nto the theorem."}}, {"paragraph": {"strong": "Induction Hypothesis:", "math": ["\\mathbf{T}", "n-1", "n"], "#text": "Assume that any full binary\ntree  containing  internal nodes\nhas  leaves."}}, {"paragraph": {"strong": "Induction Step:", "math": ["\\mathbf{T}", "n", "I", "I", "I", "\\mathbf{T}'", "\\mathbf{T}'", "n-1", "\\mathbf{T}'", "n", "I", "\\mathbf{T}", "n", "\\mathbf{T}", "\\mathbf{T}'", "n", "n+2", "I", "\\mathbf{T}'", "\\mathbf{T}", "n+1", "n"], "#text": "Given tree  with  internal nodes,\nselect an internal node  whose children are both leaf\nnodes.\nRemove both of 's children, making  a leaf\nnode.\nCall the new tree .\n has  internal nodes.\nFrom the induction hypothesis,  has\n leaves.\nNow, restore 's two children.\nWe once again have tree  with \ninternal nodes.\nHow many leaves does  have?\nBecause  has  leaves, adding the two\nchildren yields .\nHowever, node  counted as one of the leaves in\n and has now become an internal node.\nThus, tree  has  leaf nodes and\n internal nodes."}}]}}, {"@ids": "subtreethrm", "@names": "subtreethrm", "title": "Theorem", "paragraph": ["The number of empty subtrees in a non-empty binary tree is one\nmore than the number of nodes in the tree.", {"strong": "Proof 1:", "math": ["\\mathbf{T}", "\\mathbf{T}'", "\\mathbf{T}", "\\mathbf{T}'", "\\mathbf{T}", "\\mathbf{T}'", "\\mathbf{T}'", "\\mathbf{T}", "\\mathbf{T}'", "\\mathbf{T}", "\\mathbf{T}'", "\\mathbf{T}'", "\\mathbf{T}", "\\mathbf{T}'", "\\mathbf{T}", "\\mathbf{T}", "\\mathbf{T}"], "#text": "Take an arbitrary binary tree  and replace\nevery empty subtree with a leaf node.\nCall the new tree .\nAll nodes originally in  will be internal\nnodes in  (because even the leaf nodes of\n have children in ).\n is a full binary tree, because every\ninternal node of  now must have two children\nin , and each leaf node\nin  must have two children in\n (the leaves just added).\nThe Full Binary Tree Theorem tells us that the number of leaves\nin a full binary tree is one more than the number of internal\nnodes.\nThus, the number of new leaves that were added to create\n is one more than the number of nodes in\n.\nEach leaf node in  corresponds to an\nempty subtree in .\nThus, the number of empty subtrees in  is one\nmore than the number of nodes in ."}, {"strong": "Proof 2:", "math": ["\\mathbf{T}", "2n", "n", "n-1", "n-1", "2n", "n+1"], "#text": "By definition, every node in binary tree  has\ntwo children, for a total of  children in a tree of\n nodes.\nEvery node except the root node has one parent, for a total of\n nodes with parents.\nIn other words, there are  non-empty children.\nBecause the total number of children is , the remaining\n children must be empty."}]}]}}