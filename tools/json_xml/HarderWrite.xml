<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="writing-more-sophisticated-recursive-functions" names="writing\ more\ sophisticated\ recursive\ functions" source="&lt;string&gt;" title="Writing More Sophisticated Recursive Functions"><title>Writing More Sophisticated Recursive Functions</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><paragraph>Some recursive functions have only one base case and one recursive
call.
But it is common for there to be more than one of either or both.</paragraph><paragraph>The following is the general structure for a recursive function.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><topic><title>Example</title><paragraph>Consider a rather simple function to determine if an integer <literal>X</literal> is
prime or not.
<literal>Y</literal> is a helper variable that is used as the devisor.
When calling the function initially, <literal>Y = X - 1</literal></paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>We see that <literal>Prime</literal> has two base cases and one recursive call.</paragraph></topic><topic><title>Example</title><paragraph>Here is a function that has multiple recursive calls.
Given an <literal>int</literal> array named <literal>set</literal>, function
<literal>isSubsetSum</literal> determines whether some of the values in
<literal>set</literal> add up to <literal>sum</literal>.
For example, given the number 3, 8, 1, 7, and -3, with <literal>sum = 4</literal>,
the result is <literal>true</literal> because the values 3 and 1 sum to 4.
If <literal>sum = 6</literal>, then the result will be <literal>true</literal> because the
<math>8 + 1 + -3 = 6</math>.
On the other hand, if <literal>sum = 2</literal> then the result is <literal>false</literal>
there is no combination of the five numbers that adds up to 2.
In this code, variable <literal>n</literal> is the number of values that we look
at.
We don't want to just use <literal>set.length</literal> because the recursive
calls need to limit their work to part of the array.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>This example has two base cases and two recursive calls.</paragraph></topic><topic><title>Example</title><paragraph>Here is a function that has multiple base cases and multiple
recursive calls.
Function <literal>paths</literal> counts the number of different ways to reach a
given basketball score.
Recall that in Basketball, it is possible to get points in
increments of 1, 2, or 3.
So if <literal>n = 3</literal>, then <literal>paths</literal> will return 4, since there are four
different ways to accumulate 3 points: <math>1+1+1, 1+2, 2+1,</math> and 3.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>This function has three base cases and three recursive calls.</paragraph></topic></document>