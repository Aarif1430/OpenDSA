{"document": {"@ids": "grammars-part-4", "@names": "grammars\\ -\\ part\\ 4", "@source": "<string>", "@title": "Grammars - Part 4", "title": "Grammars - Part 4", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-13 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}, {"@xml:space": "preserve", "#text": "(M 2/8/16)"}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "section": [{"@ids": "rp-4-part-1", "@names": "rp\\ 4\\ part\\ 1", "title": "RP 4 part 1", "paragraph": ["Topics for this module:", {"emphasis": ["parser", "source\nlanguage", "parser generator"], "#text": "A  is a program that takes as input a program in the  (that is, the programming language that you are compiling or\ninterpreting) and determines whether the source program is\nsyntactically correct or not. If correct, the parser returns a signal\nindicating it is correct. Otherwise, the parser returns one or more\nsyntax errors.  Parsing is typically the first sub-task to be\ncompleted when compiling or interpreting a program.\nThe parser is built around the grammar for the source language.\nA  is a program that takes as input a BNF\ngrammar for a source language and outputs a parser for this\nlanguage."}, {"reference": [{"@refuri": "http://zaa.ch/jison", "#text": "http://zaa.ch/jison"}, {"@refuri": "http://zaa.ch/jison/docs", "#text": "http://zaa.ch/jison/docs"}], "#text": "Jison is a parser generator developed by Zach Carter.  It is\navailable to download or to use online at .  It is\nbeyond the scope of what we want to do in this Programming Languages\ncourse to describe Jison in detail.  However, we do want to provide an\noverview of how it used since it will be incorporated into the\ninterpreters we develop later in the course.  A complete description\nof Jison is available at ."}, {"strong": "Example Grammar\n3", "#text": "As an example of using JISON, the grammar we gave as  in the preceding section would be given to Jison in the following\nform:"}, "Your instructor will provide specific instructions about how to use Jison at your installation.   However, it is very easy to give it a try online.   Simply do the following.", "The review problem set for this module contains two review problems\nthat involve simple Jison grammars.  Before starting those problems,\nthere is one Jison convention for expressing lexical structure of\nwhich you need to be aware.  In the example grammar above, this\nconvention is illustrated in the specification:", {"strong": "[A-Z]", "#text": "The  notation tells Jison that a primary (that is, a variable in our simple expression language) must consist of one upper-case letter between \"A\" and \"Z\".   If we also wanted to allowed lower-case letters to be used, the following specification would be given:"}, "Note the vertical line, which indicates \"or\".", "If we wanted to specify that a primary is a single upper-case letter followed by a single digit, we would have:", "Here the absence of a vertical line specifies that the two characters must appear in sequence, as opposed to one or the other.", {"strong": "solve it\ncorrectly three times in a row", "#text": "This first problem will help you understand the grammar represented by\na Jison file. Note that this problem is randomized. You must  to earn the credit associated with it."}], "block_quote": [{"enumerated_list": {"@enumtype": "arabic", "@prefix": "", "@suffix": ".", "list_item": [{"paragraph": "Parser generators"}, {"paragraph": "The Jison parser generator"}]}}, {"bullet_list": {"@bullet": "*", "list_item": [{"paragraph": {"reference": {"@refuri": "http://zaa.ch/jison/try/", "#text": "http://zaa.ch/jison/try/"}, "#text": "Go to .   There you will see that Jison gives you a text area into which you can paste your grammar."}}, {"paragraph": {"emphasis": "Generate Parser", "#text": "Paste the Jison grammar that appears above into this text area, replacing the default grammar that is already there.   The click the  button, and that will consequently produce your parser on the Jison server."}}, {"paragraph": {"strong": ["Example Grammar 3", "return \"The program is valid\""], "emphasis": ["Test Your Parser", "Parse", "program"], "#text": "Then type a valid expression for  into the  area, and click the  button.   If your expression was indeed valid, you should see the message \"The program is valid\" produced.   Why?   Because  is the top-level start symbol in the Jison version of this grammar, and in the Jison specification above, this is the string that should be returned when we have a successful parse  (because of the line in the grammar ).   If the expression you type in isn't valid, you will see a detailed error message that is produced by Jison."}}]}}], "literal_block": [{"@xml:space": "preserve", "#text": "/*\n  description: Parses simple arithmetic expressions\n*/\n\n// lexical section of the grammar\n// ==============================\n\n%lex\n%%\n\\s+                   /* no return statement, so skip whitespace */\n[A-Z]                 return \"PRI\"    /* A primary is an individual upper-case letter */\n\"*\"                   return \"TIMES\"\n\"/\"                   return \"DIV\"\n\"-\"                   return \"MINUS\"\n\"+\"                   return \"PLUS\"\n\"(\"                   return \"LPAREN\"\n\")\"                   return \"RPAREN\"\n<<EOF>>               return \"EOF\"\n.                     return \"INVALID\"\n\n/lex\n\n%start program\n\n// phrase-structure section of the grammar\n// =======================================\n\n%%\n\nprogram\n    : exp \"EOF\"\n      { return \"The program is valid\"; } /* returned by a successful parse */\n    ;\nexp\n    : trm\n    | exp \"PLUS\" trm\n    | exp \"MINUS\" trm\n    ;\ntrm\n    : fac\n    | trm \"TIMES\" fac\n    | trm \"DIV\" fac\n    ;\nfac\n    : \"PRI\"\n    | \"LPAREN\" exp \"RPAREN\"\n  ;"}, {"@xml:space": "preserve", "#text": "[A-Z]                 return \"PRI\"    /* A primary is an individual upper-case letter */"}, {"@xml:space": "preserve", "#text": "[A-Z]|[a-z]           return \"PRI\"    /* A primary is an individual upper-case letter */"}, {"@xml:space": "preserve", "#text": "[A-Z][0-9]            return \"PRI\"    /* A primary is an individual upper-case letter */"}], "raw": {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "RP4part1", "@long_name": "RP4part1", "@points": "1.0", "@required": "True", "@threshold": "5"}}}, {"@ids": "rp-4-part-2", "@names": "rp\\ 4\\ part\\ 2", "title": "RP 4 part 2", "paragraph": "This problem will again help you understand the grammar represented by a Jison file.", "raw": {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "RP4part2", "@long_name": "RP4part2", "@points": "1.0", "@required": "True", "@threshold": "5"}}}]}}