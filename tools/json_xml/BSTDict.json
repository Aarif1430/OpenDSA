{"document": {"@ids": "dictionary-implementation-using-a-bst", "@names": "dictionary\\ implementation\\ using\\ a\\ bst", "@source": "<string>", "@title": "Dictionary Implementation Using a BST", "title": "Dictionary Implementation Using a BST", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "paragraph": [{"title_reference": ["Dictionary <Dictionary> <Dictionary>", "sorted <sorted list>", "unsorted lists <unsorted list>", "linked list <linked list> <ListLinked>", "array-based list <array-based list> <ListArra>", "binary search <binary search> <AnalProgram>"], "math": ["\\Theta(n)", "\\Theta(\\log n)", "\\Theta(n)"], "#text": "A simple implementation for the\n ADT can be\nbased on  or\n.\nWhen implementing the dictionary with an unsorted list,\ninserting a new record into the dictionary can be performed quickly by\nputting it at the end of the list.\nHowever, searching an unsorted list for a particular record\nrequires  time in the average case.\nFor a large database, this is probably much too slow.\nAlternatively, the records can be stored in a sorted list.\nIf the list is implemented using a\n, then no speedup to the\nsearch operation will result from storing the records in sorted order.\nOn the other hand, if we use a sorted\n to implement\nthe dictionary, then\n\ncan be used to find a record in only  time.\nHowever, insertion will now require  time on average\nbecause, once the proper location for the new record in the sorted\nlist has been found, many records might be shifted to make room for\nthe new record."}, {"title_reference": ["binary search tree", "BST"], "math": ["\\Theta(\\log n)", "\\Theta(n)"], "#text": "Is there some way to organize a collection of records so\nthat inserting records and searching for records can both be done\nquickly?\nWe can do this with a  ().\nThe advantage of using the BST is that all major operations (insert,\nsearch, and remove) are  in the average case.\nOf course, if the tree is badly balanced, then the cost can be as bad\nas ."}, "Here is an implementation for the Dictionary interface, using a BST to\nstore the records."]}}