{"document": {"@ids": "recursive-functions", "@names": "recursive\\ functions", "@source": "<string>", "@title": "Recursive Functions", "title": "Recursive Functions", "subtitle": {"@ids": "rp-19-part-1", "@names": "rp\\ 19\\ part\\ 1", "#text": "RP 19 Part 1"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-13 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "RP19part1", "@long_name": "RP19part1", "@points": "1.0", "@required": "True", "@threshold": "5"}}], "paragraph": ["This problem will give you practice with fixed-point combinators.", {"title_reference": ["lambda", "lambda"], "#text": "To reduce syntactic clutter in this problem, we will take some\nshortcuts in writing  expressions. First, we will drop\nall but the first  and all but the last dot for\n(curried) functions with two or more parameters. So, for example, we\nwill use:"}, "as an abbreviation for:", {"title_reference": ["(uvwxyz)", "(((((uv)w)x)y)z)"], "strong": "This\nnotation is to be used only for this review problem.  Do NOT use it\nfor any assignments, exams, or other review problems.", "#text": "Second, to cut down on parentheses, we will use  as an abbreviation for . In\nessence, we are making function application left-associative."}], "math_block": [{"@xml:space": "preserve", "#text": "\\lambda abcd.E"}, {"@xml:space": "preserve", "#text": "\\lambda a.\\!\\lambda b.\\!\\lambda c.\\!\\lambda d.E"}]}}