{"document": {"@dupnames": "spatial\\ data\\ structures:", "@ids": "spatial-data-structures", "@source": "<string>", "@title": "Spatial Data Structures:", "title": "Spatial Data Structures:", "subtitle": {"@dupnames": "spatial\\ data\\ structures:", "@ids": "id1", "#text": "Spatial Data Structures:"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "paragraph": [{"title_reference": ["BSTs <BST>", "AVL trees <AVL Tree>", "splay trees <Splay Tree>", "2-3 Trees <2-3 tree>", "B-trees <B-tree>", "tries <trie>"], "#text": "Search trees such as , ,\n, ,\n, and  are designed for\nsearching on a one-dimensional key.\nA typical example is an integer key, whose one-dimensional range\ncan be visualized as a number line.\nThese various tree structures can be viewed as dividing this\none-dimensional number line into pieces."}, "Some databases require support for multiple keys.\nIn other words, records can be searched for using any one of several\nkey fields, such as name or ID number.\nTypically, each such key has its own one-dimensional index,\nand any given search query searches one of these independent\nindices as appropriate."], "section": {"@ids": "multdimensional-keys", "@names": "multdimensional\\ keys", "title": "Multdimensional Keys", "paragraph": [{"title_reference": ["xy", "x", "y", "xy", "range query"], "#text": "A multidimensional search key presents a rather different concept.\nImagine that we have a database of city records, where\neach city has a name and an  coordinate.\nA BST or splay tree provides good performance for searches on city\nname, which is a one-dimensional key.\nSeparate BSTs could be used to index the  and \ncoordinates.\nThis would allow us to insert and delete cities, and locate them by\nname or by one coordinate.\nHowever, search on one of the two coordinates is not a natural way to\nview search in a two-dimensional space.\nAnother option is to combine the  coordinates into a single\nkey, say by concatenating the two coordinates, and\nindex cities by the resulting key in a BST.\nThat would allow search by coordinate, but would not allow for an\nefficient two-dimensional  such as searching for\nall cities within a given distance of a specified point.\nThe problem is that the BST only works well for one-dimensional keys,\nwhile a coordinate is a two-dimensional key where neither dimension\nis more important than the other."}, {"title_reference": ["spatial application", "spatial attribute", "spatial data structure"], "#text": "Multidimensional range queries are the defining feature\nof a .\nBecause a coordinate gives a position in space, it is called\na .\nTo implement spatial applications efficiently requires the use of a\n.\nSpatial data structures store data objects organized by position and\nare an important class of data structures used in geographic\ninformation systems, computer graphics, robotics, and many other\nfields."}, {"title_reference": ["kd tree", "object space decomposition", "PR quadtree", "key space decomposition", "trie", "d", "2^d", "bintree <bintree> <Bintree>", "point quadtree", "2^d"], "#text": "A number of spatial data structures are used for storing\npoint data in two or more dimensions.\nThe  is a natural extension\nof the BST to multiple dimensions.\nIt is a binary tree whose splitting decisions alternate among the\nkey dimensions.\nLike the BST, the kd tree uses .\nThe  uses\n and so is a form\nof .\nIt is a binary tree only for one-dimensional keys (in which case it\nis a trie with a binary alphabet).\nFor  dimensions it has  branches.\nThus, in two dimensions, the PR quadtree\nhas four branches (hence the name \"quadtree\"), splitting space into\nfour equal-sized quadrants at each branch.\nTwo other variations on these data structures are the\n and the\n.\nThese four structures cover all four combinations of object versus key\nspace decomposition on the one hand, and multi-level binary versus\n-way branching on the other."}]}}}