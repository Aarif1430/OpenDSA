{"document": {"@dupnames": "the\\ unified\\ modeling\\ language", "@ids": "the-unified-modeling-language", "@source": "<string>", "@title": "The Unified Modeling Language", "title": "The Unified Modeling Language", "subtitle": {"@dupnames": "the\\ unified\\ modeling\\ language", "@ids": "id1", "#text": "The Unified Modeling Language"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2015-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "index": "null"}], "paragraph": [{"strong": "unification", "#text": "The Unified Modeling Language, or UML is an industry standard graphical\nnotation for describing and analysing software designs.\nThe symbols and graphs used in the UML are an outgrowth of efforts in the\n1980's and early 1990's to devise standards for\nComputer-Aided Software Engineering (CASE). The UML represents a\n of these efforts.\nIn 1994 - 1995 several leaders in the development of modeling languages,\nGrady Booch, Ivar Jacobson and James Rumbaugh attempted to unify their work.\nTo eliminate the method fragmentation that they concluded was impeding\ncommercial adoption of modeling tools, they developed UML,\nwhich provided a level playing field for all tool vendors."}, {"footnote_reference": {"@auto": "1", "@ids": "id2", "@refid": "id6", "#text": "1"}, "#text": "The UML has been accepted as a standard by the Object Management Group  (OMG).\nThe OMG is a non-profit organization with about 700 members that sets standards\nfor distributed object-oriented computing."}, {"emphasis": "the three amigos", "#text": "The UML was initially largely funded by the employer of Booch, Jacobson & Rumbaugh,\naka , Rational Software, which was sold to IBM in 2002."}, {"strong": ["not", "static", "dynamic"], "emphasis": "views", "#text": "A software model is any textual or graphic representation of an aspect of a software\nsystem.  This could include requirements, behavior, states or how the system is\ninstalled.  The model is  the actual system, rather it describes different\naspects of the system to be developed.\nThe UML defines a set of diagrams and corresponding rules that can be used\nto model a system.  The diagrams in the UML are generally divided into two\nbroad categories or ,  and ."}, {"footnote_reference": [{"@auto": "1", "@ids": "id3", "@refid": "id7", "#text": "2"}, {"@auto": "1", "@ids": "id4", "@refid": "id8", "#text": "3"}, {"@auto": "1", "@ids": "id5", "@refid": "id9", "#text": "4"}], "#text": "This course does not provide anywhere near a comprehensive review of the UML.\nThe intent is to introduce you to the basics you need to understand the\ndesigns presented in this course.\nSince there is an excellent chance you will encounter the UML or something\nvery similar to it in your professional career and the diagrams used in this\ncourse are used not only in the UML, but in other modeling systems as well   ."}], "footnote": [{"@auto": "1", "@backrefs": "id2", "@ids": "id6", "@names": "1", "label": "1", "paragraph": {"reference": {"@name": "OMG Homepage", "@refuri": "http://www.omg.org/", "#text": "OMG Homepage"}, "target": {"@ids": "omg-homepage", "@names": "omg\\ homepage", "@refuri": "http://www.omg.org/"}}}, {"@auto": "1", "@backrefs": "id3", "@ids": "id7", "@names": "2", "label": "2", "paragraph": {"reference": {"@name": "Data Flow Diagrams", "@refuri": "http://www.infoarchgroup.com/qrdfd.htm", "#text": "Data Flow Diagrams"}, "target": {"@ids": "data-flow-diagrams", "@names": "data\\ flow\\ diagrams", "@refuri": "http://www.infoarchgroup.com/qrdfd.htm"}}}, {"@auto": "1", "@backrefs": "id4", "@ids": "id8", "@names": "3", "label": "3", "paragraph": {"reference": {"@name": "The Integration DEFinition (IDEF) model family", "@refuri": "http://www.idef.com", "#text": "The Integration DEFinition (IDEF) model family"}, "target": {"@ids": "the-integration-definition-idef-model-family", "@names": "the\\ integration\\ definition\\ (idef)\\ model\\ family", "@refuri": "http://www.idef.com"}}}, {"@auto": "1", "@backrefs": "id5", "@ids": "id9", "@names": "4", "label": "4", "paragraph": {"reference": {"@name": "DoD Architecture Framework", "@refuri": "http://dodcio.defense.gov/Portals/0/Documents/DODAF/DoDAF_v2-02_web.pdf", "#text": "DoD Architecture Framework"}, "target": {"@ids": "dod-architecture-framework", "@names": "dod\\ architecture\\ framework", "@refuri": "http://dodcio.defense.gov/Portals/0/Documents/DODAF/DoDAF_v2-02_web.pdf"}}}], "section": [{"@ids": "static-and-dynamic-diagrams", "@names": "static\\ and\\ dynamic\\ diagrams", "title": "Static and Dynamic Diagrams", "paragraph": ["Static diagrams emphasize the static structure of the system, its objects\nattributes, methods, and relationships.\nStatic views include:", "In this course we are primarily interested in class diagrams.", "Dynamic diagrams emphasize the dynamic behavior of a system, its states or modes\nand the collaborations between objects.  Dynamic views include:"], "bullet_list": [{"@bullet": "-", "list_item": [{"paragraph": "Class diagrams and"}, {"paragraph": "Deployment diagrams"}]}, {"@bullet": "-", "list_item": [{"paragraph": "Sequence diagrams"}, {"paragraph": "State diagrams"}, {"paragraph": "Use Case diagrams"}]}]}, {"@ids": "class-diagrams", "@names": "class\\ diagrams", "title": "Class Diagrams", "sidebar": [{"title": "A Class", "raw": {"@format": "xml", "@xml:space": "preserve", "odsafig": "null"}}, {"title": "Attributes and Methods", "raw": {"@format": "xml", "@xml:space": "preserve", "odsafig": "null"}}, {"title": "Inheritance", "raw": {"@format": "xml", "@xml:space": "preserve", "odsafig": "null"}, "paragraph": ["Generalization in action:", "Students and Teachers are both People"]}, {"title": "Realization", "figure": {"image": {"@uri": "Images/BackUMLrealization.png"}}, "paragraph": {"emphasis": "realizing", "#text": "Two classes  an interface"}}, {"title": "Association", "raw": {"@format": "xml", "@xml:space": "preserve", "odsafig": "null"}}, {"title": "Aggregation", "raw": {"@format": "xml", "@xml:space": "preserve", "odsafig": "null"}, "paragraph": {"strong": "HAS A", "#text": "Aggregation is a form of the  relationship"}}, {"title": "Composiiton", "raw": {"@format": "xml", "@xml:space": "preserve", "odsafig": "null"}, "paragraph": {"emphasis": ["has", "owns"], "#text": "A car not only  an engine, it  it."}}, {"title": "Dependency", "raw": {"@format": "xml", "@xml:space": "preserve", "odsafig": "null"}}], "paragraph": [{"strong": "class diagram", "#text": "The  is one of the most commonly encountered diagrams.\nIt describes the types of objects in a system and the kinds of static\nrelationships that exist among them."}, {"emphasis": "AbstractClass", "#text": "In UML, a class is represented by a rectangle with one or more horizontal compartments.\nBy convention, the class name starts with a capital letter.\nAnother convention is to italicize the class name is the class is an .\nThe top compartment holds the name of the class. The name of the class is the only\nrequired field in a class diagram.\nThe middle compartment of the class rectangle holds the list of the class\nattributes.\nThe bottom compartment holds the list of methods."}, {"emphasis": "classifier members", "#text": "Attribute and method visibility is indicated using a single character before the\nclass member.  Static members are indicated by underlining the member name.\nThe UML term for static members is ."}, {"emphasis": "visibility name : type = defaultValue", "#text": "The UML syntax for an attribute is:"}, "Class diagrams use different notational standards to display class inheritance,\nclass composition, and other associations.", {"strong": "Inheritance relationships"}, {"emphasis": "generalization", "#text": "In the UML, the Inheritance relationship is referred to as a ."}, {"emphasis": "generalization", "strong": "IS A", "#text": "Inheritance is drawn as an empty arrow, pointing from the subclass to the superclass.\nThe super class is considered a  of the subclass, so it makes\nsense that the arrow should point to the super class.\nThe arrow is trying to say that the subclass  type of the super class."}, "In the example diagram, two classes inherit from the more general super class.\nIt is not expressly required to draw a single merged set of lines to the super class.\nSome UML drawing tools draw each inheritance line as a separate straight line\nto the parent class.  This has no impact on the meaning of the relationship.\nA merged line showing relationships does not imply that the two subclasses\nare in any way interdependent, other than they share a common ancestor.", {"strong": "Realization relationships"}, {"emphasis": "realization", "#text": "A  is a relationship between two model elements,\nin which one model element (the client) realizes (implements or executes) the\nbehavior that the other model element (the supplier) specifies."}, "The UML graphical representation of a realization is a hollow triangle\nshape on the interface end of the dashed line (or tree of lines) that\nconnects it to one or more implementers.\nA plain arrow head is used on the interface end of the dashed line that connects it to its users.", "A realization is a relationship between classes, interfaces, components,\nand packages that connects a client element with a supplier element.\nA realization relationship between classes and interfaces and between components\nand interfaces shows that the class realizes the operations offered by the interface.", {"strong": ["Person", "<<interface>>"], "literal": "<<interface>>", "emphasis": ["stereotype", "interface"], "#text": "In this class, we are primarily concerned with relationships between classes.\nNote the addition at the top of the  class: .\nThe angle brakets define a .  The stereotype allows UML modelers\nto extend the vocabulary of a model element or to be more specific about the\nrole or purpose of a model element.\nIn this case, the stereotype  tells us this is not just any\nold class, but this class defines an ."}, {"strong": ["Generalization", "Realization", "Generalization", "inheritance", "Realization", "interface implementation"], "#text": "Notice the similarity between the  relationship and\nthe  relationship.   always models \nrelationships between classes.\n always models \nrelationships between classes."}, {"strong": "Association"}, "An association represents a relationship between two classes.\nAn association between two classes is shown by a line joining the two classes.\nAssociation indicates that one class utilizes an attribute or methods of another class.\nIf there is no arrow on the line, the association is taken to be bi-directional,\nthat is, both classes hold information about the other class.\nA unidirectional association is indicated by an arrow pointing from the\nobject which holds to the object that is held.", "Association is the least specific type of association.\nIt is used when the classes each have their own life cycle and are independent of each other.\nFor example, two classes might be related because one or both takes the\nother as a parameter to a method.", {"emphasis": "Multiplicity"}, {"literal": "n..m", "#text": "Associations have a multiplicity (sometimes called cardinality) that\nindicates how many objects of each class can legitimately be involved in a given relationship.\nMultiplicity is expressed using an  notation near one end of the association line,\nclose to the class whose multiplicity in the association we want to show."}, {"literal": ["n", "m", "n = m", "n", "0", "*"], "emphasis": "zero or more", "#text": "Here  refers to the minimum number of class instances that may be involved\nin the association, and  to the maximum number of such instances.\nIf  only the  value is shown.\nAn optional relationship is expressed by writing  as the minimum number.\nThe wildcard character  is used to represent the concept ."}, {"strong": "Aggregation"}, "If an association conveys information that one object is part of another object,\nbut their lifetimes are independent (they could exist independently), then\nthis relationship is called aggregation.", "For example, a university owns various departments (e.g., chemistry),\nand each department has a number of professors.\nIf the university closes, the departments will no longer exist,\nbut the professors in those departments will continue to exist.\nTherefore, a University can be seen as a composition of departments,\nwhereas departments have an aggregation of professors.\nIn addition, a Professor could work in more than one department,\nbut a department could not be part of more than one university.\nFor example:", {"strong": "Composiiton"}, {"emphasis": "has an", "#text": "Composition is even more specific than aggregation.\nLike aggregation, one class  instance of another class,\nbut the child class's instance life cycle is dependent on the parent class's instance life cycle.\nIn other words, when the parent dies, the child dies."}, "An example might be two classes Car and Engine.\nWhen a Car is created, it comes with an Engine.\nThe Engine can exist only as long as the Car exists.\nFurthermore, the Engine exists solely for the benefit of the Car that contains\nthe Engine  no other car can use this engine.\nWhen the Car is destroyed, the Engine is destroyed.\nFor example:", {"strong": "Dependency relationships"}, "Dependency is represented when a reference to one class is passed in as\na method parameter to another class.\nFor example, an instance of class Book is passed in to a method of class Customer:", {"emphasis": ["Customer", "Book", "Book"], "#text": "The  class requires the  class to function, but doesn't own it.\nThe caller of the purchase method is required to supply a ."}, {"reference": {"@name": "uml-diagrams.org", "@refuri": "http://www.uml-diagrams.org/class-diagrams-overview.html", "#text": "uml-diagrams.org"}, "target": {"@ids": "uml-diagrams-org", "@names": "uml-diagrams.org", "@refuri": "http://www.uml-diagrams.org/class-diagrams-overview.html"}, "#text": "More example diagrams and explanations can be viewed at\n."}], "table": {"tgroup": {"@cols": "2", "colspec": [{"@colwidth": "6"}, {"@colwidth": "10"}], "thead": {"row": {"entry": [{"paragraph": "Symbol"}, {"paragraph": "Visibility"}]}}, "tbody": {"row": [{"entry": [{"paragraph": {"literal": "+"}}, {"paragraph": "Public"}]}, {"entry": [{"paragraph": {"literal": "-"}}, {"paragraph": "Private"}]}, {"entry": [{"paragraph": {"literal": "#"}}, {"paragraph": "Protected"}]}, {"entry": [{"paragraph": {"literal": "/"}}, {"paragraph": "Derived"}]}, {"entry": [{"paragraph": {"literal": "~"}}, {"paragraph": "Package"}]}]}}}, "raw": [{"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "block_quote": {"paragraph": "Example multiplicity values", "table": {"tgroup": {"@cols": "2", "colspec": [{"@colwidth": "44"}, {"@colwidth": "19"}], "thead": {"row": {"entry": [{"paragraph": "Cardinality and modality"}, {"paragraph": "Multiplicity Values"}]}}, "tbody": {"row": [{"entry": [{"paragraph": "One-to-one and mandatory"}, {"paragraph": {"literal": "1"}}]}, {"entry": [{"paragraph": "One-to-one and optional"}, {"paragraph": {"literal": "0..1"}}]}, {"entry": [{"paragraph": "One-to-many and mandatory"}, {"paragraph": {"literal": "1..*"}}]}, {"entry": [{"paragraph": "One-to-many and optional"}, {"paragraph": {"literal": "*"}}]}, {"entry": [{"paragraph": {"literal": ["l", "u"], "#text": "With lower bound  and upper bound"}}, {"paragraph": {"literal": "l..u"}}]}, {"entry": [{"paragraph": {"literal": "l", "#text": "With lower bound  and no upper bound"}}, {"paragraph": {"literal": "l..*"}}]}]}}}}, "tip": {"paragraph": {"strong": "Use aggregation judiciously"}, "block_quote": {"@classes": "epigraph", "paragraph": ["Few things in the UML cause more consternation than aggregation and composition,\nin particular how they vary from regular association.", "The full story is muddled by history.\nIn the pre-UML methods there was a common notation of defining some form\nof part  whole relationships.\nThe trouble was that each method defined different semantics for these\nrelationships (although to be fair, some of these were pretty semantics free).", "So when the time came to standardize, lots of people wanted part  whole\nrelationships, but they couldn't agree on what they meant.\nSo the UML introduced two relationships.", {"strong": "aggregation", "emphasis": "white diamond", "#text": "() has no semantics beyond a regular association.\nIt is, as Jim Rumbaugh puts it, a modeling placebo.  People can, and do,\nuse it  but there are no standard meanings for it.\nI would advise not using it yourself without some form of explanation."}, {"strong": "composition", "emphasis": "black diamond", "#text": "() does carry semantics.\nThe most particular is that an object can only be part of one composition relationship.\nSo even if both windows and panels can hold menu bars, any instance of menu bar\nmust be held by only one whole.  This is a constraint you can't easily\nexpress with the regular multiplicity markers."}], "attribution": {"reference": {"@name": "AggregationAndComposition blog post", "@refuri": "http://martinfowler.com/bliki/AggregationAndComposition.html", "#text": "AggregationAndComposition blog post"}, "target": {"@ids": "aggregationandcomposition-blog-post", "@names": "aggregationandcomposition\\ blog\\ post", "@refuri": "http://martinfowler.com/bliki/AggregationAndComposition.html"}, "#text": "Martin Fowler,   17 May 2003."}}}}]}}