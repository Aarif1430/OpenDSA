<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="writing\ a\ recursive\ function" ids="writing-a-recursive-function" source="&lt;string&gt;" title="Writing a recursive function"><title>Writing a recursive function</title><subtitle dupnames="writing\ a\ recursive\ function" ids="id1">Writing a recursive function</subtitle><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><odsalink>AV/RecurTutor/recurWriteCON.css</odsalink></raw><paragraph>Solving a "big" problem recursively means to solve one or more smaller
versions of the problem, and using those solutions of the smaller
problems to solve the "big" problem.
In particular, solving problems recursively means that
smaller versions of the problem are solved in a similar way.
For example, consider the problem of summing values of an array.
What's the difference between summing the first 50 elements in an
array versus summing the first 100 elements?
You would use the same technique.
You can even use the solution to the smaller problem to help you solve
the larger problem.</paragraph><paragraph>Here are the basic four steps that you need to write any recursive function.</paragraph><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="recurWriteStepsCON"
    long_name="recurWriteStepsCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><paragraph>Now le't see some different ways that we could write <literal>Sum</literal> recursively.</paragraph><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="recurWriteSumCON"
    long_name="recurWriteSumCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><topic><title>Example</title><paragraph>Our example for summing the first <title_reference>n</title_reference> numbers of an array
could have been written just as easily using a loop.
Here is an example of a function that is more naturally written
using recursion.</paragraph><paragraph>The following code computes the Fibonacci sequence for a given number.
The Fibonacci Sequence is the series of numbers: 1, 1, 2, 3, 5, 8,
13, 21, 34, ...
Any number in the sequence is found by adding up the two numbers
before it.
The base cases are that <literal>Fibonacci(0) = 1</literal> and
<literal>Fibonacci(1) = 1</literal>.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw></topic><raw format="xml" xml:space="preserve"><odsascript>AV/RecurTutor/recurWriteStepsCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/RecurTutor/recurWriteSumCON.js</odsascript></raw></document>