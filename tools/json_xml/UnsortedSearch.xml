<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="analyzing-search-in-unsorted-lists" names="analyzing\ search\ in\ unsorted\ lists" source="&lt;string&gt;" title="Analyzing Search in Unsorted Lists"><title>Analyzing Search in Unsorted Lists</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><section ids="analysis" names="analysis"><title>Analysis</title><paragraph>You already know the simplest form of search:
the sequential search algorithm.
Sequential search on an unsorted list requires <title_reference>Theta(n)</title_reference> time
in the worst case.</paragraph><paragraph>How many comparisons does linear search do on average?
A major consideration is whether <title_reference>K</title_reference> is in list <strong>L</strong> at
all.
We can simplify our analysis by ignoring everything about the input
except the position of <title_reference>K</title_reference> if it is found in <strong>L</strong>.
Thus, we have <title_reference>n+1</title_reference> distinct possible events:
That <title_reference>K</title_reference> is in one of positions 0 to <title_reference>n-1</title_reference> in <strong>L</strong>
(each position having its own probability), or that it is not in
<title_reference>L</title_reference> at all.
We can express the probability that <title_reference>K</title_reference> is not in <strong>L</strong> as</paragraph><math_block xml:space="preserve">\mathbf{P}(K \notin \mathbf{L}) =
1 - \sum_{i=1}^n \mathbf{P}(K = \mathbf{L}[i])</math_block><paragraph>where <title_reference>mathbf{P}(x)</title_reference> is the probability of event
<title_reference>x</title_reference>.</paragraph><paragraph>Let <title_reference>p_i</title_reference> be the probability that <title_reference>K</title_reference> is in position
<title_reference>i</title_reference> of <strong>L</strong> (indexed from 0 to <title_reference>n-1</title_reference>.
For any position <title_reference>i</title_reference> in the list, we must look at <title_reference>i+1</title_reference>
records to reach it.
So we say that the cost when <title_reference>K</title_reference> is in position <title_reference>i</title_reference> is
<title_reference>i+1</title_reference>.
When <title_reference>K</title_reference> is not in <strong>L</strong>, sequential search will require
<title_reference>n</title_reference> comparisons.
Let <title_reference>p_n</title_reference> be the probability that <title_reference>K</title_reference> is not in <strong>L</strong>.
Then the average cost <title_reference>mathbf{T}(n)</title_reference> will be</paragraph><math_block xml:space="preserve">\mathbf{T}(n) = n p_n + \sum_{i=0}^{n-1} (i+1) p_i.</math_block><paragraph>What happens to the equation if we assume all the <title_reference>p_i</title_reference> 's
are equal (except <title_reference>p_n</title_reference>)?</paragraph><math_block xml:space="preserve">\mathbf{T}(n) &amp;=&amp; p_n n + \sum_{i=0}^{n-1} (i+1) p\\
&amp;=&amp; p_n n + p\sum_{i=1}^n i\\
&amp;=&amp; p_n n + p\frac{n(n+1)}{2}\\
&amp;=&amp; p_n n + \frac{1 - p_n}{n}\frac{n(n+1)}{2}\\
&amp;=&amp; \frac{n + 1 + p_n(n-1)}{2}</math_block><paragraph>Depending on the value of <title_reference>p_n</title_reference>,
<title_reference>frac{n+1}{2} leq mathbf{T}(n) leq n</title_reference>.</paragraph></section><section ids="lower-bounds-proofs" names="lower\ bounds\ proofs"><title>Lower Bounds Proofs</title><paragraph>Given an (unsorted) list <strong>L</strong> of <title_reference>n</title_reference> elements and
a search key <title_reference>K</title_reference>, we seek to identify one element in <strong>L</strong>
which has key value <title_reference>k</title_reference>, if any exists.
For the rest of this discussion, we will assume that the key values
for the elements in <strong>L</strong> are unique, that the set of all possible
keys is totally ordered (that is, the operations
<title_reference>&lt;</title_reference>, <title_reference>=</title_reference>, and <title_reference>&gt;</title_reference> are defined for all pairs of key
values),
and that comparison is our only way to find the relative ordering of
two keys.
Our goal is to solve the problem using the minimum number of
comparisons.</paragraph><paragraph>Given this definition for searching, we can easily come up with the
standard sequential search algorithm, and we can also see that the
lower bound for this problem is "obviously" <title_reference>n</title_reference> comparisons.
(Keep in mind that the key <title_reference>K</title_reference> might not actually appear in the
list.)
However, lower bounds proofs are a bit slippery, and it is instructive
to see how they can go wrong.</paragraph><topic><title>Theorem</title><paragraph>The lower bound for the problem of searching in an unsorted list is
<title_reference>n</title_reference> comparisons.</paragraph></topic><paragraph>Here is our first attempt at proving the theorem.</paragraph><topic><title>Proof 1</title><paragraph>We will try a proof by contradiction.
Assume an algorithm <title_reference>A</title_reference> exists that requires only <title_reference>n-1</title_reference>
(or less) comparisons of <title_reference>K</title_reference> with elements of <strong>L</strong>.
Because there are <title_reference>n</title_reference> elements of <strong>L</strong>, <title_reference>A</title_reference> must have
avoided comparing <title_reference>K</title_reference> with <strong>L</strong> [<title_reference>n</title_reference>].
We can feed the algorithm an input with <title_reference>K</title_reference> in position
<title_reference>n</title_reference>.
Such an input is legal in our model, so the algorithm is
incorrect.</paragraph></topic><paragraph>Is this proof correct? Hopefully it is reasonably obvious to you that
not all algorithms must search through the list in a specific order,
so not all algorithms have to look at position <strong>L</strong> [<title_reference>n</title_reference>] last.</paragraph><paragraph>OK, so we can try to dress up the proof by making the process a bit more
flexible.</paragraph><topic><title>Proof 2</title><paragraph>We will try a proof by contradiction.
Assume an algorithm <title_reference>A</title_reference> exists that requires only <title_reference>n-1</title_reference>
(or less) comparisons of <title_reference>K</title_reference> with elements of <strong>L</strong>.
Because there are <title_reference>n</title_reference> elements of <strong>L</strong>, <title_reference>A</title_reference> must have
avoided comparing <title_reference>K</title_reference> with <strong>L</strong> [<title_reference>i</title_reference>] for some value
<title_reference>i</title_reference>.
We can feed the algorithm an input with <title_reference>K</title_reference> in position
<title_reference>i</title_reference>.
Such an input is legal in our model, so the algorithm is
incorrect.</paragraph></topic><paragraph>Is this proof correct? Still, no.
First of all, any given algorithm need not necessarily consistently
skip any given position <title_reference>i</title_reference> in its <title_reference>n-1</title_reference> searches.
For example, it is not necessary that all algorithms search the list
from left to right.
It is not even necessary that all algorithms search the same
<title_reference>n-1</title_reference> positions first each time through the list.
Perhaps it picks them at random.</paragraph><paragraph>Again, we can try to dress up the proof as follows.</paragraph><topic><title>Proof 3</title><paragraph>On any given run of the algorithm,
if <title_reference>n-1</title_reference> elements are compared against <title_reference>K</title_reference>, then
<emphasis>some</emphasis> element position (call it position <title_reference>i</title_reference>) gets skipped.
It is possible that <title_reference>K</title_reference> is in position <title_reference>i</title_reference> at that
time, and will not be found.
Therefore, <title_reference>n</title_reference> comparisons are required.</paragraph></topic><paragraph>Unfortunately, there is another error that needs to be fixed.
It is not true that all algorithms for solving the problem must work
by comparing elements of <strong>L</strong> against <title_reference>K</title_reference>.
An algorithm might make useful progress by comparing elements of
<strong>L</strong> against each other.
For example, if we compare two elements of <strong>L</strong>, then compare the
greater against <title_reference>K</title_reference> and find that this element is less than
<title_reference>K</title_reference>, we know that the other element is also less than
<title_reference>K</title_reference>.
It seems intuitively obvious that such comparisons won't actually lead
to a faster algorithm, but how do we know for sure?
We somehow need to generalize the proof to account for this approach.</paragraph><paragraph>We will now present a useful abstraction for expressing the state of
knowledge for the value relationships among a set of objects.
A <title_reference>total order</title_reference> defines relationships within a
collection of objects such that for every pair of objects, one is
greater than the other.
A <title_reference>partially ordered set</title_reference> or <title_reference>poset</title_reference> is a set on which
only a partial order is defined.
That is, there can be pairs of elements for which we cannot decide
which is "greater".
For our purpose here, the partial order is the state of our current
knowledge about the objects,
such that zero or more of the order relations between pairs of
elements are known.
We can represent this knowledge by drawing directed acyclic graphs
(DAGs) showing the known relationships, as illustrated by
Figure <title_reference>Figure #Poset</title_reference>.</paragraph><target refid="poset"></target><raw format="xml" ids="poset" names="poset" xml:space="preserve"><odsafig>null</odsafig></raw><topic><title>Proof 4</title><paragraph>Initially, we know nothing about the relative order of the
elements in <strong>L</strong>, or their relationship to <title_reference>K</title_reference>.
So initially, we can view the <title_reference>n</title_reference> elements in <strong>L</strong> as being
in <title_reference>n</title_reference> separate partial orders.
Any comparison between two elements in <strong>L</strong> can affect the
structure of the partial orders.</paragraph><paragraph>Now, every comparison between elements in <strong>L</strong> can at best combine
two of the partial orders together.
Any comparison between <title_reference>K</title_reference> and an element, say <title_reference>A</title_reference>, in
<strong>L</strong> can at best eliminate the partial order that contains
<title_reference>A</title_reference>.
Thus, if we spend <title_reference>m</title_reference> comparisons comparing elements in <strong>L</strong>
we have at least <title_reference>n-m</title_reference> partial orders.
Every such partial order needs at least one comparison against
<title_reference>K</title_reference> to make sure that <title_reference>K</title_reference> is not somewhere in that
partial order.
Thus, any algorithm must make at least <title_reference>n</title_reference> comparisons in the
worst case.</paragraph></topic></section></document>