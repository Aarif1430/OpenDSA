{
  "chapters": {
    "Binary Trees": {
      "Binary/BST": {
        "long_name": "Binary Search Trees",
        "sections": {
          "BST Analysis": {
            "BSTSumm": {
              "long_name": "BSTSumm",
              "points": 1.0,
              "required": true,
              "threshold": 5
            }
          },
          "BST Insert": {
            "BSTinsertCON": {
              "long_name": "BSTinsertCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "BSTinsertPRO": {
              "long_name": "BSTinsertPRO",
              "points": 1.0,
              "required": true,
              "threshold": 0.9
            }
          },
          "BST Remove": {
            "BSTdeletemaxCON": {
              "long_name": "BSTdeletemaxCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "BSTremoveCON": {
              "long_name": "BSTremoveCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "BSTremovePRO": {
              "long_name": "BSTremovePRO",
              "points": 0.0,
              "required": true,
              "threshold": 1
            }
          },
          "Binary Search Tree Definition": {
            "BSTsearchCON": {
              "long_name": "BSTsearchCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "BSTsearchPRO": {
              "long_name": "BSTsearchPRO",
              "points": 1.0,
              "required": true,
              "threshold": 0.9
            }
          }
        }
      },
      "Binary/BSTDict": {
        "long_name": "Dictionary Implementation Using a BST",
        "sections": {}
      },
      "Binary/BinaryChapSumm": {
        "long_name": "Binary Tree Chapter Summary",
        "sections": {
          "Summary Questions": {
            "BinaryChapSumm": {
              "long_name": "BinaryChapSumm",
              "points": 1.0,
              "required": true,
              "threshold": 5
            }
          }
        }
      },
      "Binary/BinaryTree": {
        "long_name": "Binary Trees",
        "sections": {
          "Definitions and Properties": {
            "BinDiffCON": {},
            "BinExampCON": {},
            "DefSumm": {
              "long_name": "DefSumm",
              "points": 1.0,
              "required": true,
              "threshold": 5
            },
            "FullCompCON": {}
          },
          "Practice Questions": {
            "Treeprobs": {
              "long_name": "Treeprobs",
              "points": 1.0,
              "required": true,
              "threshold": 5
            }
          }
        }
      },
      "Binary/BinaryTreeFullThm": {
        "long_name": "The Full Binary Tree Theorem",
        "sections": {}
      },
      "Binary/BinaryTreeImpl": {
        "long_name": "Binary Tree Node Implementations",
        "sections": {
          "Binary Tree Node Implementations": {
            "BTnullpointerCON": {},
            "expressionTraversalCON": {
              "long_name": "expressionTraversalCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "expressionTreeCON": {}
          }
        }
      },
      "Binary/BinaryTreeIntro": {
        "long_name": "Binary Trees Chapter Introduction",
        "sections": {}
      },
      "Binary/BinaryTreeNodeSpace": {
        "long_name": "Binary Tree Space Requirements",
        "sections": {
          "Binary Tree Space Requirements": {
            "TreeOverheadFIB": {
              "long_name": "TreeOverheadFIB",
              "points": 1.0,
              "required": true,
              "threshold": 5
            }
          }
        }
      },
      "Binary/BinaryTreeTraversal": {
        "long_name": "Binary Tree Traversals",
        "sections": {
          "Binary Tree Traversals": {
            "BinExampCON": {},
            "inorderCON": {
              "long_name": "inorderCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "postorderCON": {
              "long_name": "postorderCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "preorderCON": {
              "long_name": "preorderCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            }
          },
          "Implementation": {
            "btTravInorderPRO": {
              "long_name": "btTravInorderPRO",
              "points": 1.0,
              "required": true,
              "threshold": 0.9
            }
          },
          "Postorder Traversal Practice": {
            "btTravPostorderPRO": {
              "long_name": "btTravPostorderPRO",
              "points": 1.0,
              "required": true,
              "threshold": 0.9
            }
          },
          "Preorder Traversal Practice": {
            "btTravPreorderPRO": {
              "long_name": "btTravPreorderPRO",
              "points": 1.0,
              "required": true,
              "threshold": 0.9
            }
          },
          "Summary Questions": {
            "TravSumm": {
              "long_name": "TravSumm",
              "points": 1.0,
              "required": true,
              "threshold": 5
            }
          }
        }
      },
      "Binary/CompleteTree": {
        "long_name": "Array Implementation for Complete Binary Trees",
        "sections": {
          "Array Implementation for Complete Binary Trees": {
            "CompleteFIB": {
              "long_name": "CompleteFIB",
              "points": 1.0,
              "required": true,
              "threshold": 5
            }
          }
        }
      },
      "Binary/Composite": {
        "long_name": "Composite-based Expression Tree",
        "sections": {
          "Composite-based Expression Tree": {}
        }
      },
      "Binary/Heaps": {
        "long_name": "Heaps and Priority Queues",
        "sections": {
          "Building a Heap": {
            "heapbuildCON": {
              "long_name": "heapbuildCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "heapbuildPRO": {
              "long_name": "heapbuildPRO",
              "points": 1.0,
              "required": true,
              "threshold": 0.9
            },
            "heapbuildProofCON": {
              "long_name": "heapbuildProofCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            }
          },
          "Heaps and Priority Queues": {
            "heapinsertCON": {
              "long_name": "heapinsertCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "heapinsertPRO": {
              "long_name": "heapinsertPRO",
              "points": 1.0,
              "required": true,
              "threshold": 0.9
            }
          },
          "Priority Queues": {
            "HeapSumm": {
              "long_name": "HeapSumm",
              "points": 1.0,
              "required": true,
              "threshold": 5
            }
          },
          "Removing from the heap": {
            "heapmaxCON": {
              "long_name": "heapmaxCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "heapremoveCON": {
              "long_name": "heapremoveCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "heapremovePRO": {
              "long_name": "heapremovePRO",
              "points": 1.0,
              "required": true,
              "threshold": 0.9
            }
          }
        }
      },
      "Binary/HuffProof": {
        "long_name": "Proof of Optimality for Huffman Coding",
        "sections": {
          "Proof of Optimality for Huffman Coding": {
            "HuffProofCON": {}
          }
        }
      },
      "Binary/Huffman": {
        "long_name": "Huffman Coding Trees",
        "sections": {
          "Assigning and Using Huffman Codes (1)": {
            "huffmanLabelCON": {
              "long_name": "huffmanLabelCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            }
          },
          "Assigning and Using Huffman Codes (2)": {
            "huffmanCodesCON": {
              "long_name": "huffmanCodesCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            }
          },
          "Building Huffman Coding Trees": {
            "huffmanBuildCON": {
              "long_name": "huffmanBuildCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            }
          },
          "Decoding": {
            "huffmanDecodeCON": {
              "long_name": "huffmanDecodeCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            }
          },
          "Decoding Practice": {
            "HuffmanDecodePRO": {
              "long_name": "HuffmanDecodePRO",
              "points": 1.0,
              "required": true,
              "threshold": 5
            }
          },
          "How efficient is Huffman coding?": {},
          "Huffman Coding Trees": {}
        }
      },
      "Binary/RecursiveDS": {
        "long_name": "Binary Tree as a Recursive Data Structure",
        "sections": {
          "Binary Tree as a Recursive Data Structure": {
            "BinRecDSCON": {},
            "ListRecDSCON": {},
            "SumBinaryTreeCON": {
              "long_name": "SumBinaryTreeCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            }
          }
        }
      },
      "Binary/TreeTrie": {
        "long_name": "Trees versus Tries",
        "sections": {
          "Trees versus Tries": {
            "TreeTimelineCON": {
              "long_name": "TreeTimelineCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            },
            "TrieTimelineCON": {
              "long_name": "TrieTimelineCON",
              "points": 0.0,
              "required": true,
              "threshold": 1.0
            }
          }
        }
      },
      "Binary/WritingTraversals": {
        "long_name": "Implementing Tree Traversals",
        "sections": {
          "Binary Tree Increment By One Exercise": {
            "learning_tool": "code-workout",
            "points": 1.0,
            "resource_name": "Binary Tree Increment By One Exercise",
            "resource_type": "external_assignment"
          },
          "Implementing Tree Traversals": {}
        }
      }
    }
  }
}