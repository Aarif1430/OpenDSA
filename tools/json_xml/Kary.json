{"document": {"@ids": "k-ary-trees", "@names": "k-ary\\ trees", "@source": "<string>", "@title": "K-ary Trees", "title": {"title_reference": "K", "#text": "-ary Trees"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "todo": "null"}], "paragraph": [{"title_reference": ["K", "K", "<Spatial>", "K", "K", "K", "K", "K"], "literal": "null", "#text": "-ary trees are trees whose internal nodes all have exactly\n children.\nThus, a full binary tree is a 2-ary tree.\nThe PR Quadtree discussed in Module  is an example\nof a 4-ary tree.\nBecause -ary tree nodes have a fixed number of children,\nunlike general trees, they are relatively easy to implement.\nIn general, -ary trees bear many similarities to binary\ntrees, and similar implementations can be used for -ary tree\nnodes.\nNote that as  becomes large, the potential number of \npointers grows, and the difference between the required sizes for\ninternal nodes and leaf nodes increases.\nThus, as  becomes larger, the need to choose separate\nimplementations for the internal and leaf nodes becomes more\npressing."}, {"title_reference": ["Full K-ary trees <full K-ary tree>", "complete K-ary trees <complete K-ary tree>"], "#text": "and\n are analogous\nto full and complete binary trees, respectively."}, {"title_reference": ["K", "K", "K", "K", "<CompleteTree>"], "literal": "null", "#text": "Many of the properties of binary trees extend to -ary trees.\nEquivalent theorems to those in Module numref`<BinSpace>` regarding the\nnumber of  pointers in a -ary tree and the\nrelationship between the number of leaves and the number of internal\nnodes in a -ary tree can be derived.\nWe can also store a complete -ary tree in an array,\nusing simple formulas to compute a node's relations in a manner\nsimilar to that used in\nSection ."}]}}