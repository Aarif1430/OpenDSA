<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="chapter-introduction-lists" names="chapter\ introduction:\ lists" source="&lt;string&gt;" title="Chapter Introduction: Lists"><title>Chapter Introduction: Lists</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><paragraph>If your program needs to store a few things  numbers,
payroll records, or job descriptions for example  the simplest
and most effective approach might be to put them in a list.
Only when you have to organize and search through a large number of
things do more sophisticated data structures like
<title_reference>search trees &lt;search tree&gt;</title_reference>
become necessary.
Many applications don't require any form of search,
and they do not require that an ordering be placed on the objects
being stored.
Some applications require that actions be performed in a strict
chronological order,
processing objects in the order that they arrived,
or perhaps processing objects in the reverse of the order that they
arrived.
For all these situations, a simple list structure is appropriate.</paragraph><paragraph>This chapter describes representations both for lists and for
two important list-like structures called the <title_reference>stack</title_reference> and the
<title_reference>queue</title_reference>.
Along with presenting these fundamental data structures, the other
goals of the chapter are to:</paragraph><enumerated_list enumtype="arabic" prefix="" suffix="."><list_item><paragraph>Give examples that show the separation of a logical representation
in the form of an ADT from a physical implementation as a data
structure.</paragraph></list_item><list_item><paragraph>Illustrate the use of asymptotic analysis in the context of
simple operations that you might already be familiar with.
In this way you can begin to see how asymptotic
analysis works, without the complications that arise when analyzing
more sophisticated algorithms and data structures.</paragraph></list_item></enumerated_list><paragraph>We begin by defining an <title_reference>ADT for lists &lt;ListADT&gt;</title_reference>.
Two implementations for the list ADT  the
<title_reference>array-based list &lt;ListArray&gt;</title_reference> and the
<title_reference>linked list &lt;linked list&gt; &lt;ListLinked&gt;</title_reference>  are covered in
detail and their relative merits discussed.
The chapter finishes with implementations for
<title_reference>stacks &lt;stack&gt; &lt;stack&gt;</title_reference> and
<title_reference>queues &lt;queue&gt; &lt;Queue&gt;</title_reference>.</paragraph></document>