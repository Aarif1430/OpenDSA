{"document": {"@ids": "linked-stacks", "@names": "linked\\ stacks", "@source": "<string>", "@title": "Linked Stacks", "title": "Linked Stacks", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/List/lstackCON.css"}], "section": [{"@ids": "linked-stack-implementation", "@names": "linked\\ stack\\ implementation", "title": "Linked Stack Implementation", "paragraph": ["The linked stack implementation is quite simple.\nElements are inserted and removed only from the head of the list.\nA header node is not used because no special-case code is required\nfor lists of zero or one elements.\nHere is the complete linked stack implementation.", "Here is a visual representation for the linked stack."], "raw": [{"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@ids": "lstackdiagram", "@names": "lstackdiagram", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "lstackDiagramCON", "@long_name": "lstackDiagramCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}], "target": {"@refid": "lstackdiagram"}, "section": {"@ids": "linked-stack-push", "@names": "linked\\ stack\\ push", "title": "Linked Stack Push", "raw": [{"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "lstackPushCON", "@long_name": "lstackPushCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "LstackPushPRO", "@long_name": "LstackPushPRO", "@points": "1.0", "@required": "True", "@threshold": "5"}}]}}, {"@ids": "linked-stack-pop", "@names": "linked\\ stack\\ pop", "title": "Linked Stack Pop", "raw": [{"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "lstackPopCON", "@long_name": "lstackPopCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "LstackPopPRO", "@long_name": "LstackPopPRO", "@points": "1.0", "@required": "True", "@threshold": "5"}}], "section": {"@ids": "comparison-of-array-based-and-linked-stacks", "@names": "comparison\\ of\\ array-based\\ and\\ linked\\ stacks", "title": "Comparison of Array-Based and Linked Stacks", "paragraph": ["All operations for the array-based and linked stack implementations\ntake constant time, so from a time efficiency perspective,\nneither has a significant advantage.\nAnother basis for comparison is the total space\nrequired.\nThe analysis is similar to that done for list implementations.\nThe array-based stack must declare a fixed-size array initially, and\nsome of that space is wasted whenever the stack is not full.\nThe linked stack can shrink and grow but requires the overhead of a\nlink field for every element.", "When implementing multiple stacks, sometimes you can take advantage of\nthe one-way growth of the array-based stack\nby using a single array to store two stacks.\nOne stack grows inward from each end as illustrated by the figure\nbelow, hopefully leading to less wasted space.\nHowever, this only works well when the space requirements of the two\nstacks are inversely correlated.\nIn other words, ideally when one stack grows, the other will shrink.\nThis is particularly effective when elements are taken from\none stack and given to the other.\nIf instead both stacks grow at the same time, then the free space\nin the middle of the array will be exhausted quickly."], "target": {"@refid": "twoarraystacks"}, "raw": [{"@format": "xml", "@ids": "twoarraystacks", "@names": "twoarraystacks", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "lstackTwostackCON", "@long_name": "lstackTwostackCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llist.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/lstackDiagramCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/lstackPushCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/lstackPopCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/lstackTwostackCON.js"}]}}]}}