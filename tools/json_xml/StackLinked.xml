<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="linked-stacks" names="linked\ stacks" source="&lt;string&gt;" title="Linked Stacks"><title>Linked Stacks</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><odsalink>AV/List/lstackCON.css</odsalink></raw><section ids="linked-stack-implementation" names="linked\ stack\ implementation"><title>Linked Stack Implementation</title><paragraph>The linked stack implementation is quite simple.
Elements are inserted and removed only from the head of the list.
A header node is not used because no special-case code is required
for lists of zero or one elements.
Here is the complete linked stack implementation.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>Here is a visual representation for the linked stack.</paragraph><target refid="lstackdiagram"></target><raw format="xml" ids="lstackdiagram" names="lstackdiagram" xml:space="preserve"><inlineav
    type="dgm"
    exer_name="lstackDiagramCON"
    long_name="lstackDiagramCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><section ids="linked-stack-push" names="linked\ stack\ push"><title>Linked Stack Push</title><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="lstackPushCON"
    long_name="lstackPushCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="LstackPushPRO"
    long_name="LstackPushPRO"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw></section></section><section ids="linked-stack-pop" names="linked\ stack\ pop"><title>Linked Stack Pop</title><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="lstackPopCON"
    long_name="lstackPopCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="LstackPopPRO"
    long_name="LstackPopPRO"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw><section ids="comparison-of-array-based-and-linked-stacks" names="comparison\ of\ array-based\ and\ linked\ stacks"><title>Comparison of Array-Based and Linked Stacks</title><paragraph>All operations for the array-based and linked stack implementations
take constant time, so from a time efficiency perspective,
neither has a significant advantage.
Another basis for comparison is the total space
required.
The analysis is similar to that done for list implementations.
The array-based stack must declare a fixed-size array initially, and
some of that space is wasted whenever the stack is not full.
The linked stack can shrink and grow but requires the overhead of a
link field for every element.</paragraph><paragraph>When implementing multiple stacks, sometimes you can take advantage of
the one-way growth of the array-based stack
by using a single array to store two stacks.
One stack grows inward from each end as illustrated by the figure
below, hopefully leading to less wasted space.
However, this only works well when the space requirements of the two
stacks are inversely correlated.
In other words, ideally when one stack grows, the other will shrink.
This is particularly effective when elements are taken from
one stack and given to the other.
If instead both stacks grow at the same time, then the free space
in the middle of the array will be exhausted quickly.</paragraph><target refid="twoarraystacks"></target><raw format="xml" ids="twoarraystacks" names="twoarraystacks" xml:space="preserve"><inlineav
    type="dgm"
    exer_name="lstackTwostackCON"
    long_name="lstackTwostackCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/llist.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/lstackDiagramCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/lstackPushCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/lstackPopCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/lstackTwostackCON.js</odsascript></raw></section></section></document>