<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="the\ unified\ modeling\ language" ids="the-unified-modeling-language" source="&lt;string&gt;" title="The Unified Modeling Language"><title>The Unified Modeling Language</title><subtitle dupnames="the\ unified\ modeling\ language" ids="id1">The Unified Modeling Language</subtitle><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2015-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><index>null</index></raw><paragraph>The Unified Modeling Language, or UML is an industry standard graphical
notation for describing and analysing software designs.
The symbols and graphs used in the UML are an outgrowth of efforts in the
1980's and early 1990's to devise standards for
Computer-Aided Software Engineering (CASE). The UML represents a
<strong>unification</strong> of these efforts.
In 1994 - 1995 several leaders in the development of modeling languages,
Grady Booch, Ivar Jacobson and James Rumbaugh attempted to unify their work.
To eliminate the method fragmentation that they concluded was impeding
commercial adoption of modeling tools, they developed UML,
which provided a level playing field for all tool vendors.</paragraph><paragraph>The UML has been accepted as a standard by the Object Management Group  (OMG).
The OMG is a non-profit organization with about 700 members that sets standards
for distributed object-oriented computing.</paragraph><paragraph>The UML was initially largely funded by the employer of Booch, Jacobson &amp; Rumbaugh,
aka <emphasis>the three amigos</emphasis>, Rational Software, which was sold to IBM in 2002.</paragraph><paragraph>A software model is any textual or graphic representation of an aspect of a software
system.  This could include requirements, behavior, states or how the system is
installed.  The model is <strong>not</strong> the actual system, rather it describes different
aspects of the system to be developed.
The UML defines a set of diagrams and corresponding rules that can be used
to model a system.  The diagrams in the UML are generally divided into two
broad categories or <emphasis>views</emphasis>, <strong>static</strong> and <strong>dynamic</strong>.</paragraph><paragraph>This course does not provide anywhere near a comprehensive review of the UML.
The intent is to introduce you to the basics you need to understand the
designs presented in this course.
Since there is an excellent chance you will encounter the UML or something
very similar to it in your professional career and the diagrams used in this
course are used not only in the UML, but in other modeling systems as well .</paragraph><footnote auto="1" ids="id2" names="1"><label>1</label><paragraph><reference name="OMG Homepage" refuri="http://www.omg.org/">OMG Homepage</reference><target ids="omg-homepage" names="omg\ homepage" refuri="http://www.omg.org/"></target></paragraph></footnote><footnote auto="1" ids="id3" names="2"><label>2</label><paragraph><reference name="Data Flow Diagrams" refuri="http://www.infoarchgroup.com/qrdfd.htm">Data Flow Diagrams</reference><target ids="data-flow-diagrams" names="data\ flow\ diagrams" refuri="http://www.infoarchgroup.com/qrdfd.htm"></target></paragraph></footnote><footnote auto="1" ids="id4" names="3"><label>3</label><paragraph><reference name="The Integration DEFinition (IDEF) model family" refuri="http://www.idef.com">The Integration DEFinition (IDEF) model family</reference><target ids="the-integration-definition-idef-model-family" names="the\ integration\ definition\ (idef)\ model\ family" refuri="http://www.idef.com"></target></paragraph></footnote><footnote auto="1" ids="id5" names="4"><label>4</label><paragraph><reference name="DoD Architecture Framework" refuri="http://dodcio.defense.gov/Portals/0/Documents/DODAF/DoDAF_v2-02_web.pdf">DoD Architecture Framework</reference><target ids="dod-architecture-framework" names="dod\ architecture\ framework" refuri="http://dodcio.defense.gov/Portals/0/Documents/DODAF/DoDAF_v2-02_web.pdf"></target></paragraph></footnote><section ids="static-and-dynamic-diagrams" names="static\ and\ dynamic\ diagrams"><title>Static and Dynamic Diagrams</title><paragraph>Static diagrams emphasize the static structure of the system, its objects
attributes, methods, and relationships.
Static views include:</paragraph><bullet_list bullet="-"><list_item><paragraph>Class diagrams and</paragraph></list_item><list_item><paragraph>Deployment diagrams</paragraph></list_item></bullet_list><paragraph>In this course we are primarily interested in class diagrams.</paragraph><paragraph>Dynamic diagrams emphasize the dynamic behavior of a system, its states or modes
and the collaborations between objects.  Dynamic views include:</paragraph><bullet_list bullet="-"><list_item><paragraph>Sequence diagrams</paragraph></list_item><list_item><paragraph>State diagrams</paragraph></list_item><list_item><paragraph>Use Case diagrams</paragraph></list_item></bullet_list></section><section ids="class-diagrams" names="class\ diagrams"><title>Class Diagrams</title><sidebar><title>A Class</title><raw format="xml" xml:space="preserve"><odsafig>null</odsafig></raw></sidebar><paragraph>The <strong>class diagram</strong> is one of the most commonly encountered diagrams.
It describes the types of objects in a system and the kinds of static
relationships that exist among them.</paragraph><paragraph>In UML, a class is represented by a rectangle with one or more horizontal compartments.
By convention, the class name starts with a capital letter.
Another convention is to italicize the class name is the class is an <emphasis>AbstractClass</emphasis>.
The top compartment holds the name of the class. The name of the class is the only
required field in a class diagram.
The middle compartment of the class rectangle holds the list of the class
attributes.
The bottom compartment holds the list of methods.</paragraph><sidebar><title>Attributes and Methods</title><raw format="xml" xml:space="preserve"><odsafig>null</odsafig></raw></sidebar><paragraph>Attribute and method visibility is indicated using a single character before the
class member.  Static members are indicated by underlining the member name.
The UML term for static members is <emphasis>classifier members</emphasis>.</paragraph><paragraph>The UML syntax for an attribute is:
<emphasis>visibility name : type = defaultValue</emphasis></paragraph><table><tgroup cols="2"><colspec colwidth="6"></colspec><colspec colwidth="10"></colspec><thead><row><entry><paragraph>Symbol</paragraph></entry><entry><paragraph>Visibility</paragraph></entry></row></thead><tbody><row><entry><paragraph><literal>+</literal></paragraph></entry><entry><paragraph>Public</paragraph></entry></row><row><entry><paragraph><literal>-</literal></paragraph></entry><entry><paragraph>Private</paragraph></entry></row><row><entry><paragraph><literal>#</literal></paragraph></entry><entry><paragraph>Protected</paragraph></entry></row><row><entry><paragraph><literal>/</literal></paragraph></entry><entry><paragraph>Derived</paragraph></entry></row><row><entry><paragraph><literal>~</literal></paragraph></entry><entry><paragraph>Package</paragraph></entry></row></tbody></tgroup></table><paragraph>Class diagrams use different notational standards to display class inheritance,
class composition, and other associations.</paragraph><paragraph><strong>Inheritance relationships</strong></paragraph><sidebar><title>Inheritance</title><raw format="xml" xml:space="preserve"><odsafig>null</odsafig></raw><paragraph>Generalization in action:</paragraph><paragraph>Students and Teachers are both People</paragraph></sidebar><paragraph>In the UML, the Inheritance relationship is referred to as a <emphasis>generalization</emphasis>.</paragraph><paragraph>Inheritance is drawn as an empty arrow, pointing from the subclass to the superclass.
The super class is considered a <emphasis>generalization</emphasis> of the subclass, so it makes
sense that the arrow should point to the super class.
The arrow is trying to say that the subclass <strong>IS A</strong> type of the super class.</paragraph><paragraph>In the example diagram, two classes inherit from the more general super class.
It is not expressly required to draw a single merged set of lines to the super class.
Some UML drawing tools draw each inheritance line as a separate straight line
to the parent class.  This has no impact on the meaning of the relationship.
A merged line showing relationships does not imply that the two subclasses
are in any way interdependent, other than they share a common ancestor.</paragraph><paragraph><strong>Realization relationships</strong></paragraph><paragraph>A <emphasis>realization</emphasis> is a relationship between two model elements,
in which one model element (the client) realizes (implements or executes) the
behavior that the other model element (the supplier) specifies.</paragraph><sidebar><title>Realization</title><figure><image uri="Images/BackUMLrealization.png"></image></figure><paragraph>Two classes <emphasis>realizing</emphasis> an interface</paragraph></sidebar><paragraph>The UML graphical representation of a realization is a hollow triangle
shape on the interface end of the dashed line (or tree of lines) that
connects it to one or more implementers.
A plain arrow head is used on the interface end of the dashed line that connects it to its users.</paragraph><paragraph>A realization is a relationship between classes, interfaces, components,
and packages that connects a client element with a supplier element.
A realization relationship between classes and interfaces and between components
and interfaces shows that the class realizes the operations offered by the interface.</paragraph><paragraph>In this class, we are primarily concerned with relationships between classes.
Note the addition at the top of the <strong>Person</strong> class: <literal>&lt;&lt;interface&gt;&gt;</literal>.
The angle brakets define a <emphasis>stereotype</emphasis>.  The stereotype allows UML modelers
to extend the vocabulary of a model element or to be more specific about the
role or purpose of a model element.
In this case, the stereotype <strong>&lt;&lt;interface&gt;&gt;</strong> tells us this is not just any
old class, but this class defines an <emphasis>interface</emphasis>.</paragraph><paragraph>Notice the similarity between the <strong>Generalization</strong> relationship and
the <strong>Realization</strong> relationship.  <strong>Generalization</strong> always models <strong>inheritance</strong>
relationships between classes.
<strong>Realization</strong> always models <strong>interface implementation</strong>
relationships between classes.</paragraph><paragraph><strong>Association</strong></paragraph><sidebar><title>Association</title><raw format="xml" xml:space="preserve"><odsafig>null</odsafig></raw></sidebar><paragraph>An association represents a relationship between two classes.
An association between two classes is shown by a line joining the two classes.
Association indicates that one class utilizes an attribute or methods of another class.
If there is no arrow on the line, the association is taken to be bi-directional,
that is, both classes hold information about the other class.
A unidirectional association is indicated by an arrow pointing from the
object which holds to the object that is held.</paragraph><paragraph>Association is the least specific type of association.
It is used when the classes each have their own life cycle and are independent of each other.
For example, two classes might be related because one or both takes the
other as a parameter to a method.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph><emphasis>Multiplicity</emphasis></paragraph><paragraph>Associations have a multiplicity (sometimes called cardinality) that
indicates how many objects of each class can legitimately be involved in a given relationship.
Multiplicity is expressed using an <literal>n..m</literal> notation near one end of the association line,
close to the class whose multiplicity in the association we want to show.</paragraph><paragraph>Here <literal>n</literal> refers to the minimum number of class instances that may be involved
in the association, and <literal>m</literal> to the maximum number of such instances.
If <literal>n = m</literal> only the <literal>n</literal> value is shown.
An optional relationship is expressed by writing <literal>0</literal> as the minimum number.
The wildcard character <literal>*</literal> is used to represent the concept <emphasis>zero or more</emphasis>.</paragraph><block_quote><paragraph>Example multiplicity values</paragraph><table><tgroup cols="2"><colspec colwidth="44"></colspec><colspec colwidth="19"></colspec><thead><row><entry><paragraph>Cardinality and modality</paragraph></entry><entry><paragraph>Multiplicity Values</paragraph></entry></row></thead><tbody><row><entry><paragraph>One-to-one and mandatory</paragraph></entry><entry><paragraph><literal>1</literal></paragraph></entry></row><row><entry><paragraph>One-to-one and optional</paragraph></entry><entry><paragraph><literal>0..1</literal></paragraph></entry></row><row><entry><paragraph>One-to-many and mandatory</paragraph></entry><entry><paragraph><literal>1..*</literal></paragraph></entry></row><row><entry><paragraph>One-to-many and optional</paragraph></entry><entry><paragraph><literal>*</literal></paragraph></entry></row><row><entry><paragraph>With lower bound <literal>l</literal> and upper bound <literal>u</literal></paragraph></entry><entry><paragraph><literal>l..u</literal></paragraph></entry></row><row><entry><paragraph>With lower bound <literal>l</literal> and no upper bound</paragraph></entry><entry><paragraph><literal>l..*</literal></paragraph></entry></row></tbody></tgroup></table></block_quote><paragraph><strong>Aggregation</strong></paragraph><paragraph>If an association conveys information that one object is part of another object,
but their lifetimes are independent (they could exist independently), then
this relationship is called aggregation.</paragraph><sidebar><title>Aggregation</title><raw format="xml" xml:space="preserve"><odsafig>null</odsafig></raw><paragraph>Aggregation is a form of the <strong>HAS A</strong> relationship</paragraph></sidebar><paragraph>For example, a university owns various departments (e.g., chemistry),
and each department has a number of professors.
If the university closes, the departments will no longer exist,
but the professors in those departments will continue to exist.
Therefore, a University can be seen as a composition of departments,
whereas departments have an aggregation of professors.
In addition, a Professor could work in more than one department,
but a department could not be part of more than one university.
For example:</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><tip><paragraph><strong>Use aggregation judiciously</strong></paragraph><block_quote classes="epigraph"><paragraph>Few things in the UML cause more consternation than aggregation and composition,
in particular how they vary from regular association.</paragraph><paragraph>The full story is muddled by history.
In the pre-UML methods there was a common notation of defining some form
of part  whole relationships.
The trouble was that each method defined different semantics for these
relationships (although to be fair, some of these were pretty semantics free).</paragraph><paragraph>So when the time came to standardize, lots of people wanted part  whole
relationships, but they couldn't agree on what they meant.
So the UML introduced two relationships.</paragraph><paragraph><strong>aggregation</strong> (<emphasis>white diamond</emphasis>) has no semantics beyond a regular association.
It is, as Jim Rumbaugh puts it, a modeling placebo.  People can, and do,
use it  but there are no standard meanings for it.
I would advise not using it yourself without some form of explanation.</paragraph><paragraph><strong>composition</strong> (<emphasis>black diamond</emphasis>) does carry semantics.
The most particular is that an object can only be part of one composition relationship.
So even if both windows and panels can hold menu bars, any instance of menu bar
must be held by only one whole.  This is a constraint you can't easily
express with the regular multiplicity markers.</paragraph><attribution>Martin Fowler, <reference name="AggregationAndComposition blog post" refuri="http://martinfowler.com/bliki/AggregationAndComposition.html">AggregationAndComposition blog post</reference><target ids="aggregationandcomposition-blog-post" names="aggregationandcomposition\ blog\ post" refuri="http://martinfowler.com/bliki/AggregationAndComposition.html"></target>  17 May 2003.</attribution></block_quote></tip><paragraph><strong>Composiiton</strong></paragraph><sidebar><title>Composiiton</title><raw format="xml" xml:space="preserve"><odsafig>null</odsafig></raw><paragraph>A car not only <emphasis>has</emphasis> an engine, it <emphasis>owns</emphasis> it.</paragraph></sidebar><paragraph>Composition is even more specific than aggregation.
Like aggregation, one class <emphasis>has an</emphasis> instance of another class,
but the child class's instance life cycle is dependent on the parent class's instance life cycle.
In other words, when the parent dies, the child dies.</paragraph><paragraph>An example might be two classes Car and Engine.
When a Car is created, it comes with an Engine.
The Engine can exist only as long as the Car exists.
Furthermore, the Engine exists solely for the benefit of the Car that contains
the Engine  no other car can use this engine.
When the Car is destroyed, the Engine is destroyed.
For example:</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph><strong>Dependency relationships</strong></paragraph><sidebar><title>Dependency</title><raw format="xml" xml:space="preserve"><odsafig>null</odsafig></raw></sidebar><paragraph>Dependency is represented when a reference to one class is passed in as
a method parameter to another class.
For example, an instance of class Book is passed in to a method of class Customer:</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><paragraph>The <emphasis>Customer</emphasis> class requires the <emphasis>Book</emphasis> class to function, but doesn't own it.
The caller of the purchase method is required to supply a <emphasis>Book</emphasis>.</paragraph><paragraph>More example diagrams and explanations can be viewed at
<reference name="uml-diagrams.org" refuri="http://www.uml-diagrams.org/class-diagrams-overview.html">uml-diagrams.org</reference><target ids="uml-diagrams-org" names="uml-diagrams.org" refuri="http://www.uml-diagrams.org/class-diagrams-overview.html"></target>.</paragraph></section></document>