{"document": {"@ids": "the-list-adt", "@names": "the\\ list\\ adt", "@source": "<string>", "@title": "The List ADT", "title": "The List ADT", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/List/listADTCON.css"}], "section": [{"@ids": "list-terminology-and-notation", "@names": "list\\ terminology\\ and\\ notation", "title": "List Terminology and Notation", "paragraph": [{"title_reference": ["position", "list", "elements <element>", "sequence"], "#text": "We all have an intuitive understanding of what we mean by a \"list\".\nWe want to turn this intuitive understanding into a concrete data\nstructure with implementations for its operations.\nThe most important concept related to lists is that of\n.\nIn other words, we perceive that there is a first element in the list,\na second element, and so on.\nSo, define a  to be a finite, ordered\nsequence of data items known as .\nThis is close to the mathematical concept of\na ."}, {"strong": "not", "#text": "\"Ordered\" in this definition means that each element has a\nposition in the list.\nSo the term \"ordered\" in this context does  mean that the list\nelements are sorted by value.\n(Of course, we can always choose to sort the elements on the list if\nwe want, its just that keeping the elements sorted is not an inherent\nproperty of being a list.)"}, {"title_reference": ["ADT", "data type"], "#text": "Each list element must have some data type.\nIn the simple list implementations discussed in this chapter, all\nelements of the list are usually assumed to have the same data type,\nalthough there is no conceptual objection to lists whose elements have\ndiffering data types if the application requires it.\nThe operations defined as part of the list  do not\ndepend on the elemental .\nFor example, the list ADT can be used for lists of integers, lists of\ncharacters, lists of payroll records, even lists of lists."}, {"title_reference": ["empty", "length", "head", "tail"], "#text": "A list is said to be  when it contains no elements.\nThe number of elements currently stored is called the\n of the list.\nThe beginning of the list is called the ,\nthe end of the list is called the ."}, {"title_reference": "sequences <sequence>", "math": ["n", "n-1", "\\langle\\ a_0,\\ a_1,\\ ...,\\ a_{n-1}\\ \\rangle", "\\langle\\ \\rangle"], "#text": "We need some notation to show the contents of a list,\nso we will use the same angle bracket notation that is normally used\nto represent .\nTo be consistent with standard array indexing, the first position\non the list is denoted as 0.\nThus, if there are  elements in the list, they are given\npositions 0 through  as\n.\nThe subscript indicates an element's position within the list.\nUsing this notation, the empty list would appear as\n."}], "section": {"@ids": "defining-the-adt", "@names": "defining\\ the\\ adt", "title": "Defining the ADT", "paragraph": ["What basic operations do we want our lists to support?\nOur common intuition about lists tells us that a list should be able\nto grow and shrink in size as we insert and remove elements.\nWe should be able to insert and remove elements from anywhere in\nthe list.\nWe should be able to gain access to any element's value,\neither to read it or to change it.\nWe must be able to create and clear (or reinitialize)\nlists.\nIt is also convenient to access the next or previous\nelement from the \"current\" one.", {"literal": "List", "#text": "Now we can define the ADT for a list object in terms of a set\nof operations on that object.\nWe will use an interface to formally define the list ADT.\n defines the member functions that any list\nimplementation inheriting from it must support, along with their\nparameters and return types."}, "True to the notion of an ADT, an interface\ndoes not specify how operations are implemented.\nTwo complete implementations are presented later in later modules,\nboth of which use the same list ADT to define their operations.\nBut they are  considerably different in approaches and in their\nspace/time tradeoffs.", {"title_reference": "container class", "literal": "Object", "#text": "The code below presents our list ADT.\nAny implementation for a  such as a list should\nbe able to support different data types for the elements.\nOne way to do this in Java is to store data values of type\n.\nLanguages that support generics (Java) or templates (C++) give more\ncontrol over the element types."}, {"literal": ["insert", "moveToPos", "moveToStart", "next", "prev"], "title_reference": ["current position", "iterator"], "#text": "The comments given with each member function describe what it is\nintended to do.\nHowever, an explanation of the basic design should help make this\nclearer.\nGiven that we wish to support the concept of a sequence, with access\nto any position in the list, the need for many of the member\nfunctions such as  and  is clear.\nThe key design decision embodied in this ADT is support for the\nconcept of a .\nFor example, member  sets\nthe current position to be the first element on the list, while\nmethods  and  move the current position\nto the next and previous elements, respectively.\nThe intention is that any implementation for this ADT support the\nconcept of a current position.\nThe current position is where any action such as insertion or deletion\nwill take place.\nAn alternative design is to factor out position as a separate position\nobject, sometimes referred to as an ."}, {"literal": ["List", "clear"], "#text": "The  member functions allow you to build a list with elements\nin any desired order, and to access any desired position in the list.\nYou might notice that the  method is a \"convenience\" method,\nsince it could be implemented by means of the other\nmember functions in the same asymptotic time."}, "A list can be iterated through follows:", {"literal": ["it", "doSomething"], "#text": "In this example, each element of the list in turn is stored\nin , and passed to the  function.\nThe loop terminates when the current position reaches the end of the\nlist."}, {"literal": ["true", "false", "find"], "#text": "The list class declaration presented here is just one of\nmany possible interpretations for lists.\nOur list interface provides most of the operations that one\nnaturally expects to perform on lists and serves to illustrate the\nissues relevant to implementing the list data structure.\nAs an example of using the list ADT, here is a function to\nreturn  if there is an occurrence of a given integer in the\nlist, and  otherwise.\nThe  method needs no knowledge about the specific list\nimplementation, just the list ADT."}, {"literal": ["find", "find", "k", "==", "k", "find"], "title_reference": ["key", "composite type", "how keys may be compared <comparable> <Comparison>"], "#text": "In languages that support it, this implementation for  could\nbe rewritten as a generic or template with respect to the element\ntype.\nWhile making it more flexible, even generic types still\nare limited in their ability to handle different data types stored on\nthe list.\nIn particular, for the  function generic types would only work\nwhen the description for the object being searched for ( in the\nfunction) is of the same type as the objects themselves.\nThey also have to be comparable when using the  operator.\nA more realistic situation is that we are searching for a record that\ncontains a  field whose value matches .\nSimilar functions to find and return a  based\non a key value can be created using the list implementation, but to do\nso requires some agreement between the list ADT and the \nfunction on the concept of a key, and on\n."}, {"title_reference": ["array-based list <ListArray>", "linked list <linked list> <ListLinked>"], "#text": "There are two standard approaches to implementing lists, the\n, and the\n."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "listADTposCON", "@long_name": "listADTposCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "line_block": {"line": null}}}, {"@ids": "list-adt-programming-exercise", "@names": "list\\ adt\\ programming\\ exercise", "title": "List ADT Programming Exercise", "raw": [{"@format": "xml", "@xml:space": "preserve", "extertool": {"@resource_name": "List ADT Programming Exercise", "@resource_type": "external_assignment", "@learning_tool": "code-workout", "@points": "2.0"}}, {"@format": "xml", "@xml:space": "preserve", "todo": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/listADTposCON.js"}]}]}}