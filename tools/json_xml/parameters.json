{"document": {"@ids": "parsing-command-line-parameters-in-your-progam", "@names": "parsing\\ command\\ line\\ parameters\\ in\\ your\\ progam", "@source": "<string>", "@title": "Parsing Command Line Parameters In Your Progam", "title": "Parsing Command Line Parameters In Your Progam", "subtitle": {"@ids": "parameters-in-programming", "@names": "parameters\\ in\\ programming", "#text": "Parameters In Programming"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsafig": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "paragraph": ["Alright I get the idea of parameters for a function, that's easy enough. But\nhow does a Program itself have parameters? This comes in the Main function that\nevery Java program has. Consider this the \"launch\" function. Usually the \"main\"\nfunction is named Main and takes an array of strings as its parameter\n(see below).", "So when you launch the command from the terminal it passes in an array of all\nthe additional information (and it usually trims white space). So if I run", "Then args is an array containing:", "*Authors Note: This is true for Java, but is a little different for C or C++.\nIn C, the first parameter that you are given is always the command name so\nyour array in C would be:", "Java however, removes the command name and only provides parameters.", {"raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://pastebin.com/gwSH2cEa\" target=\"_blank\">download it</a>"}, "#text": "I have created a main function skeleton for you to use in your projects. It is\nset up simply and makes use of switch cases. You can .\nLet's see how it works."}, {"raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html\" target=\"_blank\">switch statements</a>"}, "#text": "We have our main function take an array of Strings (named args). If that array\nis empty then we may or may not want to exit as we have no parameters. It will\nthen progress into a while loop that iterates through all parameters. The syntax\nof this loop is useful as it does not lock parameters into any fixed order. You\ncan invoke them anyway you wish. The switch case statement allows you to easily\nwrite for any parameter and add a case for unrecognized parameters by using the\ndefault case for any non matching parameters. In this example I choose to exit\nafter printing the unrecognized string. In the future you may wish to change\nthis to something else. You can learn more about .\nIt is also important to note that this function will possibly throw an exception\nor behave in an unexpected way if you use \"-f\" but do not give a file name. For\nexample you call the program with {\"-f\", \"-v\"}, this will set the filename to -v.\nOr if you call the program with {\"-f\"}, you will get an exception for trying to\naccess outside the array bounds. You can prevent this by using a try catch, but\nfor simplicity's sake I chose to make example very simple. Once you have your\nparameters set, you can call the appropriate methods to launch your program.\nThere you go simple command line parsing!"}], "literal_block": [{"@xml:space": "preserve", "#text": "public static void main(String[] args)"}, {"@xml:space": "preserve", "#text": "{\"-l\", \"file.txt\"}"}, {"@xml:space": "preserve", "#text": "{\"ls\", \"-l\", \"file.txt\"}"}], "substitution_definition": [{"@names": "external_link1", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://pastebin.com/gwSH2cEa\" target=\"_blank\">download it</a>"}}, {"@names": "external_link2", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html\" target=\"_blank\">switch statements</a>"}}]}}