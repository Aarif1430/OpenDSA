{"document": {"@ids": "junit-testing-and-you", "@names": "junit\\ testing\\ and\\ you", "@source": "<string>", "@title": "JUnit Testing And You", "title": "JUnit Testing And You", "subtitle": {"@ids": "getting-started", "@names": "getting\\ started", "#text": "Getting Started"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "paragraph": [{"emphasis": "To err is human, to correct is divine."}, {"raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://web-cat.org/junit-quickstart/\" target = \"_blank\">here</a>"}, "#text": "When writing code we often will make mistakes. To develop code with no bugs\nwould be akin to having the power of a modern day God! As such it is extremely\nimportant that we test our code frequently and often in order to help spot, fix\nand remove bugs. Thankfully Java comes with a wonderful suite of tools to help\ntest code. In addition to this Virginia Tech has developed a few more extensions\nof this suite and released them for students to make use of. For the purpose of\nthese tutorials we will make use of this class for our test cases. Note that it\nwill in many ways be similar to the standard JUnit functionality, but will have\nsome additional functions that help with testing.\nAs such we must import and set our program to make use of this library.\nYou can find directions .\nIn addition to configuring your build path, be sure to look over this page as it\nis an excellent quick start to JUnit functionality."}], "substitution_definition": {"@names": "external_link1", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://web-cat.org/junit-quickstart/\" target = \"_blank\">here</a>"}}, "section": [{"@ids": "design-considerations", "@names": "design\\ considerations", "title": "Design Considerations", "paragraph": {"literal": "setName, getName, setWeight, getWeight, walk,\njump.", "#text": "There are a few different approaches to testing code. The approach most classes\nat Virginia Tech teach is code coverage. The code coverage approach to testing\nis fairly easy to understand. If our test cases hit every line of code and\nproduce the expected results then we have a good indication that our code is\nrelatively bug free. Given this design we should try and keep our test cases\nas modular as possible. As such it is generally recommended that for every\nmethod in your class you design a test method corresponding to it. Thus if I\nhad a Human class with methods;  There are two sets of getters and setters and two independent methods.\nThus it would be wise to create a test method called testName() which tests the\ngetter/setter for name, and a test method called testWeight() which tests the\ngetter/setter for weight. Things a coder might wish to consider when testing\nthese methods could include: what happens whne you cast a data type to fit\ninside a setter (i.e. if your weight is represented integers will the system\nround as expected or should you regear your data choice), additionally be sure\nto consider any issues that arise from abusing the  setter (i.e. negative\nweight, or giving NULL for the name). As you test your try to consider anyway\nin which you can break your program. Finally we have two methods left untested.\nThe walk and jump methods. In order to keep them modular simply create two\nseperate test methods: testJump and testWalk."}}, {"@ids": "meaningful-tests", "@names": "meaningful\\ tests", "title": "Meaningful Tests", "paragraph": "When writing your test cases it is important not to just run the code with\nrandom tests. All the tests should be designed to test common runtime conditions\nas well as possible edge conditions that may change the behavior. Additionally\ntry to develop test cases that are independent of each other. If a segment of\ncode has already been properly tested, testing the same chunks of code over\nagain will not add anything and will slow down the overall runtime of tests.\nRemember quality over quantity!"}, {"@ids": "more-information", "@names": "more\\ information", "title": "More Information", "paragraph": {"raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://openmymind.net/2011/2/23/Foundations-of-Programming-2-Chapter-5-Effective-T/\" target = \"_blank\">this blog</a>"}, "#text": "For more information \nis an excellent resource to read and learn from."}, "substitution_definition": {"@names": "external_link2", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://openmymind.net/2011/2/23/Foundations-of-Programming-2-Chapter-5-Effective-T/\" target = \"_blank\">this blog</a>"}}}]}}