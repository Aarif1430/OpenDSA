{"document": {"@dupnames": "sequential\\ fit\\ peformance", "@ids": "sequential-fit-peformance", "@source": "<string>", "@title": "Sequential Fit Peformance", "title": "Sequential Fit Peformance", "subtitle": {"@dupnames": "sequential\\ fit\\ peformance", "@ids": "id1", "#text": "Sequential Fit Peformance"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ss", "@exer_name": "firstFitAV", "@long_name": "firstFitAV", "@points": "0.0", "@required": "True", "@threshold": "1.0"}}], "paragraph": "Which sequential fit strategy is best depends on the expected types of\nmemory requests.\nIf the requests are of widely ranging size, best fit might work well.\nIf the requests tend to be of similar size, with rare large and small\nrequests, first or worst fit might work well.\nUnfortunately, there are always request patterns that one of the\nthree sequential fit methods will service, but which the other two\nwill not be able to service.\nFor example, if the series of requests 600, 650, 900, 500, 100 is\nmade to a freelist containing blocks 500, 700, 650, 900\n(in that order),\nthe requests can all be serviced by first fit, but not by best fit.\nAlternatively, the series of requests 600, 500, 700, 900 can be\nserviced by best fit but not by first fit on this same freelist."}}