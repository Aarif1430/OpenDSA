{"document": {"@dupnames": "common\\ debugging\\ methods", "@ids": "common-debugging-methods", "@source": "<string>", "@title": "Common Debugging Methods", "title": "Common Debugging Methods", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "section": [{"@dupnames": "common\\ debugging\\ methods", "@ids": "id1", "title": "Common Debugging Methods", "paragraph": "When tracking down bugs in your code, there are a number of methods that\nprogrammers can make use of. These methods all have different strengths, but\nthe main goal of each is to help narrow down where the bugs exist and why they\ncause problems."}, {"@ids": "print-debugging", "@names": "print\\ debugging", "title": "Print Debugging", "paragraph": ["I frequently use this method to help me track down bugs in my code. The main\nidea is simple. Print out as much information as poissible in every stage of\nyour program. By doing so we can see at every stage of the program how our\ndata changes and if it changes in the way that we planned. It should be noted\nthat this method comes with a few disadvantages as well.", "1. It requires print statements throughout the code and this means that\nit will have to be removed later on", "2. Depending on how much data the program prints, it may be flooded with so much\ninformation that it becomes difficult to gain any meaning from it"]}, {"@ids": "rubber-duck-debugging", "@names": "rubber\\ duck\\ debugging", "title": "Rubber Duck Debugging", "paragraph": {"raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://blog.codinghorror.com/rubber-duck-problem-solving/\" target = \"_blank\">this blog</a>"}, "#text": "Rubber Duck Debugging has become popular through the programming industry.\nRubber Duck Debugging focuses on making the programmer carefully examine each\nline of their code and not just assume that it does what they expect, but explain\nhow it works. In order to use Rubber Duck Debugging a programmer should make use\nof a rubber duck toy (or any other object to stand in as a person), and then go\nthrough each line of their code and explain it to the duck as if it were a\nnormal person with no programming experience. Rubber Duck Debugging is only as\neffective as the thought put into it, however. When making use of the technique\nbe sure to be thorough in your explanations and to consider every possible case.\nFor an example of Rubber Duck Debugging read ."}, "substitution_definition": {"@names": "external_link", "raw": {"@format": "html", "@xml:space": "preserve", "#text": "<a href=\"http://blog.codinghorror.com/rubber-duck-problem-solving/\" target = \"_blank\">this blog</a>"}}}, {"@ids": "wolf-fence-debugging", "@names": "wolf\\ fence\\ debugging", "title": "Wolf Fence Debugging", "paragraph": "Imagine there is only one wolf in Alaska. How would you find him? The most\neffective way would be to fence Alaska in half and wait for the wolf to \"howl.\"\nWhen you know which half has the wolf split it and again wait.\nKeep repeating until you find the wolf.\nThis is the basis of Wolf Fence Debugging. Work to find where the bug occurs,\neliminating areas repeatedly until the method and then the line of code causing\nthe problem has been found. The method is particularly useful when used in\nconjunction with Exceptions as the stack trace can show each line of code called\nleading to the actual Exception being thrown."}, {"@ids": "print-debugging-vs-source-debugging", "@names": "print\\ debugging\\ vs\\ source\\ debugging", "title": "Print Debugging vs Source Debugging", "paragraph": "Choosing between source code debugging and print based debugging can be difficult\nat times.\nThere are advantages and disadvantages to each method.\nGenerally, print-based debugging can conveniently give you a small\namount of targetted information (that is, you know what you want).\nOtherwise, source-level debugging makes it easy to explore what is\ngoing on with your code."}]}}