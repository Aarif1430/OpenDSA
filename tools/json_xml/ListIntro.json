{"document": {"@ids": "chapter-introduction-lists", "@names": "chapter\\ introduction:\\ lists", "@source": "<string>", "@title": "Chapter Introduction: Lists", "title": "Chapter Introduction: Lists", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "paragraph": [{"title_reference": "search trees <search tree>", "#text": "If your program needs to store a few things  numbers,\npayroll records, or job descriptions for example  the simplest\nand most effective approach might be to put them in a list.\nOnly when you have to organize and search through a large number of\nthings do more sophisticated data structures like\n\nbecome necessary.\nMany applications don't require any form of search,\nand they do not require that an ordering be placed on the objects\nbeing stored.\nSome applications require that actions be performed in a strict\nchronological order,\nprocessing objects in the order that they arrived,\nor perhaps processing objects in the reverse of the order that they\narrived.\nFor all these situations, a simple list structure is appropriate."}, {"title_reference": ["stack", "queue"], "#text": "This chapter describes representations both for lists and for\ntwo important list-like structures called the  and the\n.\nAlong with presenting these fundamental data structures, the other\ngoals of the chapter are to:"}, {"title_reference": ["ADT for lists <ListADT>", "array-based list <ListArray>", "linked list <linked list> <ListLinked>", "stacks <stack> <stack>", "queues <queue> <Queue>"], "#text": "We begin by defining an .\nTwo implementations for the list ADT  the\n and the\n  are covered in\ndetail and their relative merits discussed.\nThe chapter finishes with implementations for\n and\n."}], "enumerated_list": {"@enumtype": "arabic", "@prefix": "", "@suffix": ".", "list_item": [{"paragraph": "Give examples that show the separation of a logical representation\nin the form of an ADT from a physical implementation as a data\nstructure."}, {"paragraph": "Illustrate the use of asymptotic analysis in the context of\nsimple operations that you might already be familiar with.\nIn this way you can begin to see how asymptotic\nanalysis works, without the complications that arise when analyzing\nmore sophisticated algorithms and data structures."}]}}}