{"document": {"@ids": "chapter-introduction-search", "@names": "chapter\\ introduction:\\ search", "@source": "<string>", "@title": "Chapter Introduction: Search", "title": "Chapter Introduction: Search", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "paragraph": ["Organizing and retrieving information is at the heart of most computer\napplications, and searching is surely the most frequently performed\nof all computing tasks.\nSearch can be viewed abstractly as a process to determine if\nan element with a particular value is a member of a particular set.\nThe more common view of searching is an attempt to\nfind the record within a collection of records that has\na particular key value, or those records in a collection whose key\nvalues meet some criterion such as falling within a range of\nvalues.", {"strong": "L", "title_reference": "n", "#text": "We can define searching formally as follows.\nSuppose that we have a collection  of  records of the\nform"}, {"title_reference": ["I_j", "k_j", "j", "1 leq j leq n", "K", "search problem", "(k_j, I_j)", "k_j = K", "Searching", "k_j = K"], "strong": "L", "#text": "where  is information associated with key \nfrom record  for .\nGiven a particular key value ,\nthe  is to locate a record\n in  such that \n(if one exists).\n is a systematic method for\nlocating the record (or records) with key value ."}, {"title_reference": ["successful search", "k_j = K", "unsuccessful search", "k_j = K"], "#text": "A  is one in which a record with key\n is found.\nAn  is one in which no record with\n is found (and no such record exists)."}, {"title_reference": ["exact-match query", "range query"], "#text": "An  is a search for the record whose key\nvalue matches a specified key value.\nA  is a search for all records whose key value\nfalls within a specified range of key values."}, "We can categorize search algorithms into three general\napproaches:", {"title_reference": "Dictionary <dictionary> <Dictionary>", "#text": "Any of these approaches are potentially suitable for implementing the\n ADT.\nHowever, each has different performance characteristics that make it\nthe method of choice in particular circumstances."}, {"title_reference": ["sets <set> <SetSearch>", "Hashing"], "#text": "The current chapter considers methods for searching data stored in\nlists.\nList in this context means any list implementation including a\nlinked list or an array.\nMost of these methods are appropriate for sequences\n(i.e., duplicate key values are allowed), although there are special\ntechniques applicable to .\nThe techniques from the first three sections of this chapter are most\nappropriate for searching a collection of records stored in RAM.\nChapter  introduces hashing, a technique for\norganizing data in an array such that the location of each record\nwithin the array is a function of its key value.\nHashing is appropriate when records are stored either in RAM or on\ndisk."}, {"title_reference": "Indexing", "#text": "Chapter  discusses tree-based methods for organizing\ninformation on disk, including a commonly used file structure called\nthe B-tree.\nNearly all programs that must organize large collections of records\nstored on disk use some variant of either hashing or the B-tree.\nHashing is practical for only certain access applications\n(exact-match queries) and is generally appropriate only when duplicate\nkey values are not allowed.\nB-trees are the method of choice for dynamic disk-based\napplications anytime hashing is not appropriate."}], "math_block": {"@xml:space": "preserve", "#text": "(k_1, I_1), (k_2, I_2), ..., (k_n, I_n)"}, "enumerated_list": {"@enumtype": "arabic", "@prefix": "", "@suffix": ".", "list_item": [{"paragraph": "Sequential and list methods."}, {"paragraph": "Direct access by key value (hashing)."}, {"paragraph": "Tree indexing methods."}]}}}