<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="a-hard-information-flow-problem" names="a\ hard\ information\ flow\ problem" source="&lt;string&gt;" title="A Hard Information Flow Problem"><title>A Hard Information Flow Problem</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><paragraph>Sometimes, passing the right information up and down the tree to
control a recursive function gets complicated.
The information flow itself is simple enough, but deciding what to
pass might be tricky.
Here is an example with checking to see if a given binary tree follows
the rules for a BST.</paragraph><topic><title>Example</title><paragraph>A more difficult example is illustrated by the following problem.
Given an arbitrary binary tree we wish to determine if,
for every node <title_reference>A</title_reference>, are all nodes in <title_reference>A</title_reference>'s left
subtree less than the value of <title_reference>A</title_reference>, and are all nodes in
<title_reference>A</title_reference>'s right subtree greater than the value of <title_reference>A</title_reference>?
(This happens to be the definition for a binary search tree.)
Unfortunately, to make this decision we need to know some context
that is not available just by looking at the node's parent or
children.</paragraph><target refid="bstcheckfig"></target><raw format="xml" ids="bstcheckfig" names="bstcheckfig" xml:space="preserve"><odsafig>null</odsafig></raw><paragraph>As shown by Figure <title_reference>Figure #BSTCheckFig</title_reference>,
it is not enough to verify that <title_reference>A</title_reference>'s left child has a value
less than that of <title_reference>A</title_reference>, and that <title_reference>A</title_reference>'s right child
has a greater value.
Nor is it enough to verify that <title_reference>A</title_reference> has a value consistent
with that of its parent.
In fact, we need to know information about what range of values is
legal for a given node.
That information might come from any of the node's ancestors.
Thus, relevant range information must be passed down the tree.
We can implement this function as follows.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw></topic></document>