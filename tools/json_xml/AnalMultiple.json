{"document": {"@ids": "multiple-parameters", "@names": "multiple\\ parameters", "@source": "<string>", "@title": "Multiple Parameters", "title": "Multiple Parameters", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "paragraph": [{"title_reference": ["C - 1", "P"], "#text": "Sometimes the proper analysis for an algorithm requires\nmultiple parameters to describe the cost.\nTo illustrate the concept, consider an algorithm to compute\nthe rank ordering for counts of all pixel values in a picture.\nPictures are often represented by a two-dimensional array, and a\npixel is one cell in the array.\nThe value of a pixel is either the code value for the color, or a\nvalue for the intensity of the picture at that pixel.\nAssume that each pixel can take any integer value in the range 0\nto .\nThe problem is to find the number of pixels of each color\nvalue and then sort the color values with respect to the number\nof times each value appears in the picture.\nAssume that the picture is a rectangle with  pixels.\nA pseudocode algorithm to solve the problem follows."}, {"literal": ["count", "C", "value(i)"], "title_reference": "i", "#text": "In this example,  is an array of size  that\nstores the number of pixels for each color value.\nFunction  returns the color value for pixel ."}, {"literal": ["for", "count", "sort"], "title_reference": ["C", "Theta(P)", "Theta(P log P)", "P", "Theta(P log P)"], "#text": "The time for the first  loop (which initializes\n) is based on the number of colors, .\nThe time for the second loop (which determines the number of pixels\nwith each color) is .\nThe time for the final line, the call to , depends on the\ncost of the sorting algorithm used.\nWe will assume that the sorting algorithm has cost\n if  items are sorted,\nthus yielding  as the total algorithm cost."}, {"title_reference": ["C", "P", "Theta(P log P)", "P", "P", "C", "Theta(C)", "Theta(P)", "Theta(C log C)", "Theta(P + C log C)"], "#text": "Is this a good representation for the cost of this algorithm?\nWhat is actually being sorted?\nIt is not the pixels, but rather the colors.\nWhat if  is much smaller than ?\nThen the estimate of  is pessimistic,\nbecause much fewer than  items are being sorted.\nInstead, we should use  as our analysis variable for steps\nthat look at each pixel, and  as our analysis variable for\nsteps that look at colors.\nThen we get  for the initialization loop,\n for the pixel count loop,\nand  for the sorting operation.\nThis yields a total cost of ."}, {"title_reference": ["C", "Theta(C log C)", "C", "P", "times", "P", "C log C", "P", "C", "P", "C log C"], "#text": "Why can we not simply use the value of  for input size and\nsay that the cost of the algorithm is ?\nBecause,  is typically much less than .\nFor example, a picture might have 1000  1000 pixels and\na range of 256 possible colors.\nSo,  is one million, which is much larger than .\nBut, if  is smaller, or  larger (even if it is still\nless than ), then  can become the larger\nquantity.\nThus, neither variable should be ignored."}], "block_quote": {"raw": {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}}}}