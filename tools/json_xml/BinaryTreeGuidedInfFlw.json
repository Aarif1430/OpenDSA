{"document": {"@dupnames": "binary\\ tree\\ guided\\ information\\ flow", "@ids": "binary-tree-guided-information-flow", "@source": "<string>", "@title": "Binary Tree Guided Information Flow", "title": "Binary Tree Guided Information Flow", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "section": [{"@dupnames": "binary\\ tree\\ guided\\ information\\ flow", "@ids": "id1", "title": "Binary Tree Guided Information Flow", "paragraph": ["When writing a recursive method to solve a problem that requires\ntraversing a binary tree, we want to make sure that we are visiting\nthe required nodes (no more and no less).", {"title_reference": "Guided traversal", "#text": "So far, we have seen several tree traversals that visited every node\nof the tree.\nWe also saw the BST search, insert, and remove routines, that each go\ndown a single path of the tree.\n refers to a problem that does not require\nvisiting every node in the tree, though it typically requires looking\nat more than one path through the tree.\nThis means that the recursive function is making some decision at each\nnode that sometimes lets it avoid visiting one or both of its\nchildren.\nThe decision is typically based on the value of the current node.\nMany problems that require information flow on binary search\ntrees are \"guided\" in this way."}, "Here is a problem that typically needs to visit more\nthan just a single path, but not all of the nodes."], "topic": {"title": "Example:", "paragraph": "An extreme example is finding the minimum value in a BST.\nA bad solution to this problem would visit every node of the tree.\nHowever, we can take advantage of the BST property to\navoid visiting most nods in the tree.\nYou know that the values greater than the root are always in the right\nsubtree, and those values less than the root are in the left subtree.\nThus, at each node we need only visit the left subtree until we reach\na leaf node."}, "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "IneffBinaryTreeRangeCON", "@long_name": "IneffBinaryTreeRangeCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"@ids": "binary-search-tree-small-count-exercise", "@names": "binary\\ search\\ tree\\ small\\ count\\ exercise", "title": "Binary Search Tree Small Count Exercise", "raw": [{"@format": "xml", "@xml:space": "preserve", "extertool": {"@resource_name": "Binary Search Tree Small Count Exercise", "@resource_type": "external_assignment", "@learning_tool": "code-workout", "@points": "2.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/BTRecurTutor/IneffBinaryTreeRangeCON.js"}]}]}}