{"document": {"@dupnames": "doubly\\ linked\\ lists", "@ids": "doubly-linked-lists", "@source": "<string>", "@title": "Doubly Linked Lists", "title": "Doubly Linked Lists", "subtitle": {"@dupnames": "doubly\\ linked\\ lists", "@ids": "id1", "#text": "Doubly Linked Lists"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "DataStructures/DoubleLinkList.css"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/List/dlistCON.css"}, {"@format": "xml", "@ids": "dbllistfig", "@names": "dbllistfig", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "dlistDiagramCON", "@long_name": "dlistDiagramCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "paragraph": [{"title_reference": ["singly linked list <linked list> <ListLinked>", "doubly linked list"], "#text": "The  allows\nfor direct access from a list node only to the next node in the list.\nA  allows convenient access from a list node\nto the next node and also to the preceding node on the list.\nThe doubly linked list node accomplishes this in the obvious way by\nstoring two pointers: one to the node following it (as in the singly\nlinked list), and a second pointer to the node preceding it."}, {"literal": "List", "#text": "The most common reason to use a doubly linked list is\nbecause it is easier to implement than a singly linked list.\nWhile the code for the doubly linked implementation is a little longer\nthan for the singly linked version, it tends to be a bit more\n\"obvious\" in its intention, and so easier to implement and debug.\nWhether a list implementation is doubly or singly linked should\nbe hidden from the  class user."}, {"title_reference": "header node", "literal": ["head", "tail", "insert", "append", "remove"], "#text": "Like our singly linked list implementation, the doubly linked list\nimplementation makes use of a .\nWe also add a tailer node to the end of the list.\nThe tailer is similar to the header, in that it is a node that\ncontains no value, and it always exists.\nWhen the doubly linked list is initialized, the header and tailer\nnodes are created.\nData member  points to the header node, and \npoints to the tailer node.\nThe purpose of these nodes is to simplify the ,\n, and  methods by eliminating all need for\nspecial-case code when the list is empty, or when we insert at the\nhead or tail of the list."}, {"literal": "curr", "title_reference": ["current position", "trailer node"], "#text": "In our implementation,  will point to the\n (or to the  if the\ncurrent position is at the end of the list)."}, {"literal": "Link", "#text": "Here is the complete implementation for a\n class to be used with doubly linked lists.\nThis code is a little longer than that for the singly linked list node\nimplementation since\nthe doubly linked list nodes have an extra data member."}], "target": {"@refid": "dbllistfig"}, "section": [{"@ids": "insert", "@names": "insert", "title": "Insert", "paragraph": {"literal": ["insert", "append"], "#text": "The following slideshows illustrate the  and \ndoubly linked list methods.\nThe class declaration and the remaining member functions for the\ndoubly linked list class are nearly identical to the singly linked\nlist version.\nWhile the code for these methods might be a little longer than their\nsingly linked list counterparts (since there is an extra pointer in\neach node to deal with), they tend to be easier to understand."}, "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "dlistInsertCON", "@long_name": "dlistInsertCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"@ids": "append", "@names": "append", "title": "Append", "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "dlistAppendCON", "@long_name": "dlistAppendCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"@ids": "remove", "@names": "remove", "title": "Remove", "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "dlistRemoveCON", "@long_name": "dlistRemoveCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"@ids": "prev", "@names": "prev", "title": "Prev", "raw": [{"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "dlistPrevCON", "@long_name": "dlistPrevCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "todo": "null"}], "paragraph": "The only disadvantage of the doubly linked list as compared to the\nsingly linked list is the additional space used.\nThe doubly linked list requires two pointers per node, and so in the\nimplementation presented it requires twice as much overhead as\nthe singly linked list."}, {"@ids": "mangling-pointers", "@names": "mangling\\ pointers", "title": "Mangling Pointers", "paragraph": [{"math": ["a + b", "c", "b = c - a", "a = c - b"], "literal": ["prev", "next"], "#text": "There is a space-saving technique that can be employed to eliminate\nthe additional space requirement, though it will complicate the\nimplementation and be somewhat slower.\nThus, this is an example of a\nspace/time tradeoff.\nIt is based on observing that, if we store the sum of two values,\nthen we can get either value back by subtracting the other.\nThat is, if we store  in variable , then\n and .\nOf course, to recover one of the values out of the stored summation,\nthe other value must be supplied.\nA pointer to the first node in the list, along with the value of one\nof its two link fields, will allow access to all of the remaining\nnodes of the list in order.\nThis is because the pointer to the node must be the same as the value\nof the following node's  pointer, as well as the previous\nnode's  pointer.\nIt is possible to move down the list breaking apart the\nsummed link fields as though you were opening a zipper."}, "The principle behind this technique is worth remembering, as it\nhas many applications.\nThe following code fragment will\nswap the contents of two variables without using a temporary variable\n(at the cost of three arithmetic operations).", "A similar effect can be had by using the exclusive-or operator.\nThis fact is widely used in computer graphics.\nA region of the computer screen can be highlighted by\nXORing the outline of a box around it.\nXORing the box outline a second time restores the original\ncontents of the screen."], "raw": [{"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "DataStructures/DoubleLinkList.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/dlist.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/dlistDiagramCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/dlistInsertCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/dlistAppendCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/dlistRemoveCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/dlistPrevCON.js"}]}]}}