{"document": {"@dupnames": "faster\\ computer,\\ or\\ faster\\ algorithm?", "@ids": "faster-computer-or-faster-algorithm", "@source": "<string>", "@title": "Faster Computer, or Faster Algorithm?", "title": "Faster Computer, or Faster Algorithm?", "subtitle": {"@dupnames": "faster\\ computer,\\ or\\ faster\\ algorithm?", "@ids": "id1", "#text": "Faster Computer, or Faster Algorithm?"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "FasterCorASumm", "@long_name": "FasterCorASumm", "@points": "1.0", "@required": "True", "@threshold": "5"}}], "paragraph": [{"math": ["n^2", "n", "n^2"], "#text": "Imagine that you have a problem to solve, and you know of an algorithm\nwhose running time is proportional to  where  is a\nmeasure of the input size.\nUnfortunately, the resulting program takes ten times too long to run.\nIf you replace your current computer with a new one that is ten times\nfaster, will the  algorithm become acceptable?\nIf the problem size remains the same, then perhaps\nthe faster computer will allow you to get your work done quickly\nenough even with an algorithm having a high growth rate.\nBut a funny thing happens to most people who get a faster computer.\nThey don't run the same problem faster.\nThey run a bigger problem!\nSay that on your old computer you were content to sort\n10,000 records because that could be done by the computer during your\nlunch break.\nOn your new computer you might hope to sort 100,000\nrecords in the same time.\nYou won't be back from lunch any sooner, so you are better off solving\na larger problem.\nAnd because the new machine is ten times faster, you would like to\nsort ten times as many records."}, {"math": ["n", "\\mathbf{T}(n) = cn", "c", "cn", "c_1n^2"], "emphasis": "not", "#text": "If your algorithm's growth rate is linear (i.e., if the equation that\ndescribes the running time on input size  is\n for some constant ),\nthen 100,000 records on the new machine will be sorted in the same\ntime as 10,000 records on the old machine.\nIf the algorithm's growth rate is greater than ,\nsuch as , then you will  be able to do a\nproblem ten times the size in the same amount of time on a machine\nthat is ten times faster."}, {"math": "n", "#text": "How much larger a problem can be solved\nin a given amount of time by a faster computer?\nAssume that the new machine is ten times faster than the old.\nSay that the old machine could solve a problem of size  in an\nhour.\nWhat is the largest problem that the new machine can solve in one\nhour?\nThe following table shows how large a problem can be solved\non the two machines for five running-time functions."}, {"emphasis": "improvement", "#text": "This table illustrates many important points.\nThe first two equations are both linear; only the value of the\nconstant factor has changed.\nIn both cases, the machine that is ten times faster gives an increase\nin problem size by a factor of ten.\nIn other words, while the value of the constant\ndoes affect the absolute size of the problem that can be solved in a\nfixed amount of time, it does not affect the  in\nproblem size (as a proportion to the original size) gained by a faster\ncomputer.\nThis relationship holds true regardless of the algorithm's growth\nrate:\nConstant factors never affect the relative improvement gained\nby a faster computer."}, {"math": ["\\mathbf{T}(n) = 2n^2", "\\sqrt{10} \\approx 3.16"], "emphasis": "also", "#text": "An algorithm with time equation  does not\nreceive nearly as great an improvement from the faster machine as an\nalgorithm with linear growth rate.\nInstead of an improvement by a factor of ten, the improvement\nis only the square root of that: .\nThus, the algorithm with higher growth rate not only solves a smaller\nproblem in a given time in the first place, it \nreceives less of a speedup from a faster computer.\nAs computers get ever faster, the disparity in problem sizes becomes\never greater."}, {"math": "\\mathbf{T}(n) = 5 n \\log n", "#text": "The algorithm with growth rate \nimproves by a greater amount than the one with quadratic growth rate,\nbut not by as great an amount as the algorithms with linear growth\nrates."}, {"math": ["2^n", "n", "n + 3", "n + \\log_2 10", "n", "2^n"], "title_reference": "computational complexity theory <computational complexity theory> <LimComp>", "#text": "Note that something special happens in the case of the\nalgorithm whose running time grows exponentially.\nIf you look at its plot on a graph, the curve for the algorithm\nwhose time is proportional to  goes up very quickly as\n grows.\nThe increase in problem size on the machine ten times as fast is\nabout \n(to be precise, it is ).\nThe increase in problem size for an algorithm with exponential growth\nrate is by a constant addition, not by a multiplicative factor.\nBecause the old value of  was 13, the new problem size is\n16.\nIf next year you buy another computer ten times faster yet, then the\nnew computer (100 times faster than the original computer) will only\nrun a problem of size 19.\nIf you had a second program whose growth rate is  and for\nwhich the original computer could run a problem of size 1000 in an hour,\nthan a machine ten times faster can run a problem only of size 1003 in\nan hour!\nThus, an exponential growth rate is radically different than the\nother growth rates shown in the table.\nThe significance of this difference is an important topic in\n."}, {"math": ["n^2", "n \\log n", "\\mathbf{T}n=n^2", "1024 \\times 1024 = 1,048,576", "n=1024", "\\mathbf{T}(n) = n \\log n", "1024 \\times 10 = 10,240", "n = 1024", "\\mathbf{T}(n) = n^2", "n^2 > 10 n \\log n", "n > 58"], "#text": "Instead of buying a faster computer,\nconsider what happens if you replace an algorithm whose\nrunning time is proportional to  with a new\nalgorithm whose running time is proportional to .\nIn a graph relating growth rate functions to input size,\na fixed amount of time would appear as a horizontal line.\nIf the line for the amount of time available to solve your problem\nis above the point at which the curves for the two growth rates in\nquestion meet, then the algorithm whose running time grows less\nquickly is faster.\nAn algorithm with running time  requires\n time steps for an input of size\n.\nAn algorithm with running time \nrequires  time steps for an input of\nsize , which is an improvement of much more than a\nfactor of ten when compared to the algorithm with running time\n.\nBecause  whenever ,\nif the typical problem size is larger than 58 for this example,\nthen you would be much better off changing algorithms instead of\nbuying a computer ten times faster.\nFurthermore, when you do buy a faster computer, an algorithm with a\nslower growth rate provides a greater benefit in terms of larger\nproblem size that can run in a certain time on the new computer."}], "target": {"@refid": "speedups"}, "topic": {"@ids": "speedups", "@names": "speedups", "title": "Table", "paragraph": {"math": ["n", "n'", "n'", "n", "n'", "n'", "n"], "#text": "The increase in problem size that can be run\nin a fixed period of time on a computer that is ten times faster.\nThe first column lists the right-hand sides for five growth rate\nequations.\nFor the purpose of this example, arbitrarily assume that the old\nmachine can run 10,000 basic operations in one hour.\nThe second column shows the maximum value for  that can be\nrun in 10,000 basic operations on the old machine.\nThe third column shows the value for , the new maximum\nsize for the problem that can be run in the same time on the new\nmachine that is ten times faster.\nVariable  is the greatest size for the problem that can\nrun in 100,000 basic operations.\nThe fourth column shows how the size of  changed to become\n on the new machine.\nThe fifth column shows the increase in the problem size as the\nratio of  to ."}, "math_block": {"@xml:space": "preserve", "#text": "\\begin{array} {l|r|r|l|r}\n\\mathbf{f(n)} &\n\\mathbf{n} &\n\\mathbf{n'} &\n\\mathbf{Change} &\n\\mathbf{n'/n}\\\\\n\\hline\n10n         & 1000 & 10,000 & n' = 10n               & 10\\\\\n20n         & 500  & 5000   & n' = 10n               & 10\\\\\n5 n \\log n  & 250  & 1842   & \\sqrt{10} n < n' < 10n & 7.37\\\\\n2 n^2       & 70   & 223    & n' = \\sqrt{10} n       & 3.16\\\\\n2^n         & 13   & 16     & n' = n + 3             & --\\\\\n\\end{array}"}}}}