{"document": {"@dupnames": "solving\\ recurrence\\ relations", "@ids": "solving-recurrence-relations", "@source": "<string>", "@title": "Solving Recurrence Relations", "title": "Solving Recurrence Relations", "subtitle": {"@dupnames": "solving\\ recurrence\\ relations", "@ids": "id1", "#text": "Solving Recurrence Relations"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Development/AlgAnal/DivideAndConquerRecurrencesCON.css"}, {"@format": "xml", "@xml:space": "preserve", "todo": "null"}], "paragraph": [{"title_reference": ["Mergesort <Mergesort> <Mergesort>", "n", "n"], "#text": "Recurrence relations are often used to model the cost of recursive\nfunctions.\nFor example, the standard \ntakes a list of size , splits it in half, performs Mergesort\non each half, and finally merges the two sublists in  steps.\nThe cost for this can be modeled as"}, {"title_reference": ["n", "n/2", "n"], "#text": "In other words, the cost of the algorithm on input of\nsize  is two times the cost for input of size \n(due to the two recursive calls to Mergesort) plus \n(the time to merge the sublists together again)."}, "There are many approaches to solving recurrence relations, and we\nbriefly consider three here.\nThe first is an estimation technique:\nGuess the upper and lower bounds for the recurrence, use\ninduction to prove the bounds, and tighten as required.\nThe second approach is to expand the recurrence to convert it to a\nsummation and then use summation techniques.\nThe third approach is to take advantage of already proven theorems\nwhen the recurrence is of a suitable form.\nIn particular, typical divide-and-conquer algorithms such as\nMergesort yield recurrences of a form that fits a pattern for which\nwe have a ready solution."], "math_block": {"@xml:space": "preserve", "#text": "{\\bf T}(n) = 2{\\bf T}(n/2) + n."}, "section": [{"@ids": "estimating-upper-and-lower-bounds", "@names": "estimating\\ upper\\ and\\ lower\\ bounds", "title": "Estimating Upper and Lower Bounds", "paragraph": "The first approach to solving recurrences is to guess the\nanswer and then attempt to prove it correct.\nIf a correct upper or lower bound estimate is given,\nan easy induction proof will verify this fact.\nIf the proof is successful, then try to tighten the bound.\nIf the induction proof fails, then loosen the bound and try again.\nOnce the upper and lower bounds match, you are finished.\nThis is a useful technique when you are only looking for asymptotic\ncomplexities.\nWhen seeking a precise closed-form solution (i.e., you seek the\nconstants for the expression), this method will probably be too much\nwork.", "topic": [{"title": "Example", "comment": {"@xml:space": "preserve", "#text": "Very close to Manber's example."}, "paragraph": ["Use the guessing technique to find the asymptotic bounds for\nMergesort, whose running time is described by the equation", {"title_reference": "O(n^2)", "#text": "We begin by guessing that this recurrence has an upper\nbound in .\nTo be more precise, assume that"}, {"title_reference": ["n", "{bf T}(2) = 1 leq 2^2", "{bf T}(n) leq n^2", "{bf T}(2n) leq (2n)^2", "n = 2^N, N geq 1"], "#text": "We prove this guess is correct by induction.\nIn this proof, we assume that  is a\npower of two, to make the calculations easy.\nFor the base case, .\nFor the induction step, we need to show that\n implies that\n for .\nThe induction hypothesis is"}, "It follows that", {"title_reference": ["{bf T}(n)", "O(n^2)"], "#text": "which is what we wanted to prove.\nThus,  is in ."}, {"title_reference": ["O(n^2)", "n^2 + 2n", "4n^2", "O(n^2)", "{bf T}(n) leq cn", "c", "c 2 n = 2 c n", "n", "cn", "n^2"], "#text": "Is  a good estimate?\nIn the next-to-last step we went from  to the much\nlarger .\nThis suggests that   is a high estimate.\nIf we guess something smaller, such as \nfor some constant , it should be clear that this cannot\nwork because  and there is no room for the\nextra  cost to join the two pieces together.\nThus, the true cost must be somewhere between  and\n."}, {"title_reference": ["{bf T}(n) leq n log n", "{bf T}(2) = 1 leq (2 cdot log 2) = 2", "{bf T}(n) leq n log n"], "#text": "Let us now try .\nFor the base case, the definition of the recurrence sets\n.\nAssume (induction hypothesis) that .\nThen,"}, {"title_reference": ["{bf T}(n)", "Omega(n log n)", "{bf T}(n)", "Theta(n log n)"], "#text": "which is what we seek to prove.\nIn similar fashion, we can prove that  is in\n.\nThus,  is also ."}], "math_block": [{"@xml:space": "preserve", "#text": "{\\bf T}(n) = 2{\\bf T}(n/2) + n; \\quad {\\bf T}(2) = 1."}, {"@xml:space": "preserve", "#text": "{\\bf T}(n) \\leq n^2."}, {"@xml:space": "preserve", "#text": "{\\bf T}(i) \\leq i^2,\\ {\\rm for\\ all}\\ i \\leq n."}, {"@xml:space": "preserve", "#text": "{\\bf T}(2n) = 2{\\bf T}(n) + 2n \\leq 2n^2 + 2n \\leq 4n^2 \\leq (2n)^2"}, {"@xml:space": "preserve", "#text": "{\\bf T}(2n) = 2{\\bf T}(n) + 2n \\leq 2n \\log n + 2n\n\\leq 2n(\\log n + 1) \\leq 2 n \\log 2n"}]}, {"title": "Example", "paragraph": [{"title_reference": ["2^n", "n^n"], "#text": "We know that the factorial function grows exponentially.\nHow does it compare to ? To ?\nDo they all grow \"equally fast\" (in an asymptotic sense)?\nWe can begin by looking at a few initial terms."}, "We can also look at these functions in terms of their recurrences.", "At this point, our intuition should be telling us pretty clearly\nthe relative growth rates of these three functions.\nBut how do we prove formally which grows the fastest?\nAnd how do we decide if the differences are significant in an\nasymptotic sense, or just constant factor differences?", {"title_reference": ["log 2^n = n", "log n^n = n log n", "2^n", "o(n^n)", "n^n", "2^n"], "#text": "We can use logarithms to help us get an idea about the relative\ngrowth rates of these functions.\nClearly, .\nEqually clearly, .\nWe can easily see from this that  is ,\nthat is,  grows asymptotically faster than ."}, {"title_reference": ["n!", "n! leq n^n", "log n!", "O(n log n)"], "#text": "How does  fit into this?\nWe can again take advantage of logarithms.\nObviously , so we know that  is\n.\nBut what about a lower bound for the factorial function?\nConsider the following."}, "Therefore", {"title_reference": ["log n!", "Omega(n log n)", "log n! = Theta(n log n)"], "#text": "In other words,  is in .\nThus, ."}, {"strong": "not", "title_reference": ["n! = Theta(n^n)", "log n^2 = 2 log n", "log n = Theta(log n^2)", "n neq Theta(n^2)", "log f(n)", "O(log g(n))", "f(n)", "O(g(n))", "log f(n) = Theta(log g(n))", "f(n) = Theta(g(n))"], "#text": "Note that this does  mean that .\nBecause , it follows that\n but .\nThe log function often works as a \"flattener\" when dealing with\nasymptotics.\nThat is, whenever  is in  we\nknow that  is in .\nBut knowing that  does not\nnecessarily mean that ."}], "math_block": [{"@xml:space": "preserve", "#text": "\\begin{array}{r|rrrrrrrrr}\nn&1&2&3&4&5&6&7&8&9\\\\\n\\hline\nn! &1&2&6&24&120&720&5040&40320&362880\\\\\n2^n&2&4&8&16&32&64&128&256&512\\\\\nn^n&1&4&9&256&3125&46656&823543&16777216&387420489\n\\end{array}"}, {"@xml:space": "preserve", "#text": "n! = \\left\\{\n\\begin{array}{ll}\n1&n=1\\\\\nn(n-1)!&n>1\\\\\n\\end{array}\n\\right."}, {"@xml:space": "preserve", "#text": "2^n = \\left\\{\n\\begin{array}{ll}\n2&n=1\\\\\n2(2^{n-1})&n>1\\\\\n\\end{array}\n\\right."}, {"@xml:space": "preserve", "#text": "n^n = \\left\\{\n\\begin{array}{ll}\nn&n=1\\\\\nn(n^{n-1})&n>1\\\\\n\\end{array}\n\\right."}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\nn! &=& n \\times (n - 1) \\times \\cdots \\times \\frac{n}{2} \\times\n(\\frac{n}{2} - 1) \\times \\cdots \\times 2 \\times 1\\\\\n&\\geq& \\frac{n}{2} \\times \\frac{n}{2} \\times \\cdots \\times \\frac{n}{2}\n\\times 1 \\times \\cdots \\times 1 \\times 1\\\\\n&=& (\\frac{n}{2})^{n/2}\n\\end{eqnarray*}"}, {"@xml:space": "preserve", "#text": "\\log n! \\geq \\log(\\frac{n}{2})^{n/2} =\n(\\frac{n}{2})\\log(\\frac{n}{2})."}]}, {"title": "Example", "paragraph": [{"title_reference": ["f(n) = f(n-1) + f(n-2)", "n geq 2", "f(0) = f(1) = 1"], "#text": "What is the growth rate of the Fibonacci sequence?\nWe define the Fibonacci sequence as\n for ;\n."}, {"title_reference": ["f(n)", "f(n-1)"], "#text": "In this case it is useful to compare the ratio of  to\n.\nThe following table shows the first few values."}, {"title_reference": ["f(n)/f(n-1)", "n"], "#text": "If we continue for more terms, the ratio appears to converge on a\nvalue slightly greater then 1.618.\nAssuming  really does converge to a fixed value\nas  grows, we can determine what that value must be."}, {"title_reference": ["x", "f(n) = f(n-1) + f(n-2)", "f(n-2)", "f(n)"], "#text": "for some value .\nThis follows from the fact that .\nWe divide by  to make the second term go away, and we\nalso get something useful in the first term.\nRemember that the goal of such manipulations is to give us an\nequation that relates  to something without recursive\ncalls."}, {"title_reference": "n", "#text": "For large , we also observe that:"}, {"title_reference": ["n", "f(n)/f(n-2)", "f(n-1)/f(n-1)"], "#text": "as  gets big.\nThis comes from multiplying  by\n and rearranging."}, {"title_reference": ["x", "x^2 - x - 1 rightarrow 0"], "#text": "If  exists, then .\nUsing the quadratic equation, the only solution greater than one is"}, {"title_reference": ["phi", "f(n) = Theta(phi^n)", "f(n)"], "#text": "This expression also has the name .\nWhat does this say about the growth rate of the Fibonacci sequence?\nIt is exponential, with .\nMore precisely,  converges to"}], "math_block": [{"@xml:space": "preserve", "#text": "\\begin{array}{c|lllllll}\nn&1&2&3&4&5&6&7\\\\\n\\hline\nf(n)&1&2&3&5&8&13&21\\\\\nf(n)/f(n-1)&1&2&1.5&1.666&1.625&1.615&1.619\n\\end{array}"}, {"@xml:space": "preserve", "#text": "\\frac{f(n)}{f(n-2)} = \\frac{f(n-1)}{f(n-2)} + \\frac{f(n-2)}{f(n-2)}\n\\rightarrow x+1"}, {"@xml:space": "preserve", "#text": "\\frac{f(n)}{f(n-2)} = \\frac{f(n)}{f(n-1)}\\frac{f(n-1)}{f(n-2)}\n\\rightarrow x^2"}, {"@xml:space": "preserve", "#text": "x = \\frac{1 + \\sqrt{5}}{2} \\approx 1.618."}, {"@xml:space": "preserve", "#text": "\\frac{\\phi^n - (1 - \\phi)^n}{\\sqrt{5}}."}]}]}, {"@ids": "expanding-recurrences", "@names": "expanding\\ recurrences", "title": "Expanding Recurrences", "paragraph": {"title_reference": "expanding the recurrence", "#text": "Estimating bounds is effective if you only need an approximation to\nthe answer.\nMore precise techniques are required to find an exact solution.\nOne approach is called .\nIn this method, the smaller terms on the right side of the equation\nare in turn replaced by their definition.\nThis is the expanding step.\nThese terms are again expanded, and so on, until a full series\nwith no recurrence results.\nThis yields a :ref`summation <summation> <Summation>`,\nand techniques for solving summations can then be used.\nA more complex example is given next."}, "topic": [{"title": "Example", "paragraph": ["Find the solution for", {"title_reference": ["n", "n = 2^k"], "#text": "For simplicity we assume that  is a power of two,\nso we will rewrite it as .\nThis recurrence can be expanded as follows:"}, "This last expression can best be represented by a summation\nas follows:", {"title_reference": "Summation <Summation> <Summation>", "#text": "From Equation (6) of Module ,\nwe have:"}, {"emphasis": "exact", "title_reference": "n", "#text": "This is the  solution to the recurrence for \na power of two.\nAt this point, we should use a simple induction proof to verify\nthat our solution is indeed correct."}], "math_block": [{"@xml:space": "preserve", "#text": "{\\bf T}(n) = 2{\\bf T}(n/2) + 5 n^2; \\quad {\\bf T}(1) = 7."}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\n{\\bf T}(n) & = & 2{\\bf T}(n/2) + 5n^2\\\\\n           & = & 2(2{\\bf T}(n/4) + 5(n/2)^2) + 5n^2\\\\\n           & = & 2(2(2{\\bf T}(n/8) + 5(n/4)^2) + 5(n/2)^2) + 5n^2\\\\\n           & = & 2^k{\\bf T}(1) + 2^{k-1}\\cdot5\\left (\\frac{n}{2^{k-1}}\\right )^2\n                   + \\cdots + 2\\cdot5\\left (\\frac{n}{2}\\right )^2\n                   + 5n^2.\n\\end{eqnarray*}"}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\n&   & 7n + 5\\sum_{i=0}^{k-1} n^2/2^i\\\\\n& = & 7n + 5n^2\\sum_{i=0}^{k-1} 1/2^i.\\\\\n\\end{eqnarray*}"}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\n& = & 7n + 5n^2\\left (2 - 1/2^{k-1}\\right )\\\\\n& = & 7n + 5n^2(2 - 2/n)\\\\\n& = & 7n + 10 n^2 - 10n\\\\\n& = & 10n^2 - 3n.\n\\end{eqnarray*}"}]}, {"title": "Example", "paragraph": [{"title_reference": "heap <heap> <Heaps>", "#text": "Our next example models the cost of the algorithm to build a heap.\nYou should recall that to build a ,\nwe first heapify the two subheaps, then push down the root to its\nproper position.\nThe cost is:"}, "Let us find a closed form solution for this recurrence.\nWe can expand the recurrence a few times to see that", "We can deduce from this expansion that this recurrence is\nequivalent to following summation and its derivation:"], "math_block": [{"@xml:space": "preserve", "#text": "f(n) \\leq 2f(n/2) + 2 \\log n."}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\nf(n) &\\leq& 2f(n/2) + 2 \\log n\\\\\n&\\leq& 2[2f(n/4) + 2 \\log n/2] + 2 \\log n\\\\\n&\\leq& 2[2(2f(n/8) + 2 \\log n/4) + 2 \\log n/2] + 2 \\log n\n\\end{eqnarray*}"}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\nf(n) &\\leq& \\sum_{i=0}^{\\log n -1} 2^{i+1} \\log(n/2^i)\\\\\n&=& 2 \\sum_{i=0}^{\\log n -1} 2^i (\\log n - i)\\\\\n&=& 2 \\log n \\sum_{i=0}^{\\log n -1} 2^i - 4 \\sum_{i=0}^{\\log n -1} i 2^{i-1}\\\\\n&=& 2 n \\log n - 2 \\log n - 2 n \\log n + 4n -4\\\\\n&=& 4n - 2 \\log n - 4.\n\\end{eqnarray*}"}]}], "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "DivideAndConquerRecurrencesCON", "@long_name": "DivideAndConquerRecurrencesCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"@ids": "divide-and-conquer-recurrences", "@names": "divide-and-conquer\\ recurrences", "title": "Divide-and-Conquer Recurrences", "paragraph": [{"title_reference": "divide-and-conquer recurrences", "#text": "The third approach to solving recurrences is to take advantage of\nknown theorems that provide the solution for classes of recurrences.\nOf particular practical use is a theorem that gives the\nanswer for a class known as .\nThese have the form"}, {"title_reference": ["a", "b", "c", "k", "n", "a", "n/b", "cn^k", "n = b^m"], "#text": "where , , , and  are constants.\nIn general, this recurrence describes a problem of size \ndivided into  subproblems of size ,\nwhile  is the amount of work necessary to combine the\npartial solutions.\nMergesort is an example of a divide and conquer algorithm, and its\nrecurrence fits this form.\nSo does binary search.\nWe use the method of expanding recurrences to derive the general\nsolution for any divide and conquer recurrence, assuming that\n."}, "Note that", {"title_reference": "r = b^k/a", "#text": "The summation is a geometric series whose sum depends on the ratio\n.\nThere are three cases."}, {"title_reference": "Master Theorem", "#text": "We can summarize the above derivation as the following theorem,\nsometimes referred to as the ."}, "This theorem may be applied whenever appropriate, rather than\nre-deriving the solution for the recurrence."], "math_block": [{"@xml:space": "preserve", "#text": "{\\bf T}(n) = a{\\bf T}(n/b) + cn^k; \\quad {\\bf T}(1) = c"}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\n{\\bf T}(n) & = & a{\\bf T}(n/b) + cn^k\\\\\n  & = & a(a{\\bf T}(n/b^2) + c(n/b)^k) + cn^k\\\\\n  & = & a(a[a{\\bf T}(n/b^3) + c(n/b^2)^k] + c(n/b)^k) + cn^k\\\\\n  & = & a^m{\\bf T}(1) + a^{m-1}c(n/b^{m-1})^k + \\cdots + ac(n/b)^k + cn^k\\\\\n  & = & a^mc + a^{m-1}c(n/b^{m-1})^k + \\cdots + ac(n/b)^k + cn^k\\\\\n  & = & c\\sum_{i=0}^{m} a^{m-i} b^{ik}\\\\\n  & = &ca^m\\sum_{i=0}^{m} (b^k/a)^i.\n\\end{eqnarray*}"}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray}\n\\label{ThmEquiv}\na^m = a^{\\log_bn} = n^{\\log_ba}.\n\\end{eqnarray}"}], "enumerated_list": {"@enumtype": "arabic", "@prefix": "(", "@suffix": ")", "list_item": [{"paragraph": [{"title_reference": "r<1", "#text": ".\nFrom Equation (4) of Module :ref`summation <summation> <Summation>`,"}, "Thus,"], "math_block": [{"@xml:space": "preserve", "#text": "\\sum_{i=0}^{m}r^i < 1/(1-r),\\ {\\rm a~constant.}"}, {"@xml:space": "preserve", "#text": "{\\bf T}(n) = \\Theta(a^m) = \\Theta(n^{log_ba})."}]}, {"paragraph": [{"title_reference": ["r = b^k/a", "a = b^k", "k = log_b a", "m = log_b n"], "#text": "r=1`.\nBecause , we know that .\nFrom the definition of logarithms it follows immediately that\n.\nWe also note from Equation (1) above that .\nThus,"}, {"title_reference": "a^m = n log_b a = n^k", "#text": "Because , we have"}], "math_block": [{"@xml:space": "preserve", "#text": "\\sum_{i=0}^{m} r = m + 1 = \\log_bn + 1."}, {"@xml:space": "preserve", "#text": "{\\bf T}(n) = \\Theta(n^{\\log_ba}\\log n) = \\Theta(n^k\\log n)."}]}, {"paragraph": [{"title_reference": "r>1", "#text": ".\nFrom Equation (5) of Module :ref`summation <summation> <Summation>`,"}, "Thus,"], "math_block": [{"@xml:space": "preserve", "#text": "\\sum_{i=0}^{m} r = \\frac{r^{m+1} - 1}{r - 1} = \\Theta(r^m)."}, {"@xml:space": "preserve", "#text": "{\\bf T}(n) = \\Theta(a^mr^m)\n           = \\Theta(a^m(b^k/a)^m)\n           = \\Theta(b^{km})\n           = \\Theta(n^k)."}]}]}, "target": {"@refid": "recurthm"}, "topic": [{"@ids": "recurthm", "@names": "recurthm", "title": "Theorem", "paragraph": {"strong": "The Master Theorem:", "title_reference": "{bf T}(n) = a{bf T}(n/b) + cn^k, {bf T}(1) = c", "#text": "For any recurrence relation of the form\n,\nthe following relationships hold."}, "math_block": {"@xml:space": "preserve", "#text": "{\\bf T}(n) = \\left\\{ \\begin{array}{ll}\n             \\Theta(n^{\\log_ba}) & \\mbox{if \\(a > b^k\\)} \\\\\n             \\Theta(n^k\\log n)   & \\mbox{if \\(a = b^k\\)} \\\\\n             \\Theta(n^k)         & \\mbox{if \\(a < b^k\\).}\n            \\end{array}\n   \\right."}}, {"title": "Example", "paragraph": ["Apply the Master Theorem to solve", {"title_reference": ["a=3", "b=5", "c=8", "k=2", "3<5^2", "{bf T}(n) = Theta(n^2)"], "#text": "Because , , , and , we\nfind that .\nApplying case (3) of the theorem, ."}], "math_block": {"@xml:space": "preserve", "#text": "{\\bf T}(n) = 3{\\bf T}(n/5) + 8n^2."}}, {"title": "Example", "paragraph": ["Use the Master Theorem to solve the recurrence relation\nfor Mergesort:", {"title_reference": ["a=2", "b=2", "c=1", "k=1", "2 = 2^1", "{bf T}(n) = Theta(n log n)"], "#text": "Because , , , and ,\nwe find that .\nApplying case (2) of the theorem,\n."}], "math_block": {"@xml:space": "preserve", "#text": "{\\bf T}(n) = 2{\\bf T}(n/2) + n; \\quad {\\bf T}(1) = 1."}}]}, {"@ids": "average-case-analysis-of-quicksort", "@names": "average-case\\ analysis\\ of\\ quicksort", "title": "Average-Case Analysis of Quicksort", "paragraph": [{"title_reference": "Quicksort <Quicksort> <Quicksort>", "#text": "In Module , we determined that\nthe average-case analysis of Quicksort had the following recurrence:"}, {"title_reference": ["cn", "findpivot", "partition", "k", "{bf T}(k)", "{bf T}(n - 1 - k)", "T(0)", "T(n-1)", "T(n-1)", "T(0)"], "#text": "The  term is an upper bound on the  and\n steps.\nThis equation comes from assuming that the partitioning element is\nequally likely to occur in any position .\nIt can be simplified by observing that the two\nrecurrence terms  and  are\nequivalent, because one simply counts up from  to\n while the other counts down from  to\n.\nThis yields"}, {"title_reference": ["recurrence with full history", "n", "n{bf T}(n+1)"], "#text": "This form is known as a .\nThe key to solving such a recurrence is to cancel out the summation\nterms.\nThe shifting method for summations provides a way to do\nthis.\nMultiply both sides by  and subtract the result from the\nformula for :"}, {"title_reference": "n{bf T}(n)", "#text": "Subtracting  from both sides yields:"}, {"title_reference": "frac{c(2n+1)}{n+1} < 2c", "#text": "At this point, we have eliminated the summation and can now\nuse our normal methods for solving recurrences to get a closed-form\nsolution.\nNote that , so we can simplify the\nresult.\nExpanding the recurrence, we get"}, {"title_reference": ["{cal H}_{n+1}", "{cal H}_{n+1} = Theta(log n)", "Theta(n log n)"], "#text": "for , the Harmonic Series.\nFrom Equation (10) of Module :ref`summation <summation> <Summation>`,\n,\nso the final solution is ."}], "math_block": [{"@xml:space": "preserve", "#text": "{\\bf T}(n) = cn + \\frac{1}{n}\\sum_{k=0}^{n-1} [{\\bf T}(k) +\n {\\bf T}(n -1 - k)], \\qquad {\\bf T}(0) = {\\bf T}(1) = c."}, {"@xml:space": "preserve", "#text": "{\\bf T}(n) = cn + \\frac{2}{n}\\sum_{k=0}^{n-1} {\\bf T}(k)."}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\nn{\\bf T}(n) & = & cn^2 + 2 \\sum_{k=1}^{n-1} {\\bf T}(k)\\\\\n(n+1){\\bf T}(n+1) & = & c(n+1)^2 + 2 \\sum_{k=1}^{n} {\\bf T}(k).\n\\end{eqnarray*}"}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\n(n+1){\\bf T}(n+1) - n{\\bf T}(n) & = & c(n+1)^2 - cn^2 + 2{\\bf T}(n)\\\\\n(n+1){\\bf T}(n+1) - n{\\bf T}(n) & = & c(2n+1) + 2{\\bf T}(n)\\\\\n(n+1){\\bf T}(n+1) & = & c(2n+1) + (n+2){\\bf T}(n)\\\\\n{\\bf T}(n+1) & = & \\frac{c(2n+1)}{n+1} + \\frac{n+2}{n+1}{\\bf T}(n).\n\\end{eqnarray*}"}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray*}\n{\\bf T}(n+1) & \\leq & 2c + \\frac{n+2}{n+1} {\\bf T}(n)\\\\\n          & = & 2c + \\frac{n+2}{n+1}\\left (2c +\n                     \\frac{n+1}{n}{\\bf T}(n-1)\\right )\\\\\n          & = & 2c + \\frac{n+2}{n+1}\\left (2c + \\frac{n+1}{n}\\left\n                    (2c + \\frac{n}{n-1}{\\bf T}(n-2)\\right )\\right )\\\\\n          & = & 2c + \\frac{n+2}{n+1}\\left (2c + \\cdots +\n                         \\frac{4}{3}(2c + \\frac{3}{2}{\\bf T}(1))\\right )\\\\\n          & = & 2c\\left (1 + \\frac{n+2}{n+1}\n                  + \\frac{n+2}{n+1}\\frac{n+1}{n} + \\cdots\n                  + \\frac{n+2}{n+1}\\frac{n+1}{n}\\cdots\\frac{3}{2}\\right )\\\\\n          & = & 2c\\left (1 + (n+2)\\left (\\frac{1}{n+1}\n                  + \\frac{1}{n} + \\cdots + \\frac{1}{2}\\right )\\right )\\\\\n          & = & 2c + 2c(n+2)\\left ({\\cal H}_{n+1} - 1\\right )\\\\\n\\end{eqnarray*}"}], "raw": {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Development/AlgAnal/DivideAndConquerRecurrencesCON.js"}}]}}