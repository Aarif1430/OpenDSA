{"document": {"@ids": "finding-prime-numbers", "@names": "finding\\ prime\\ numbers", "@source": "<string>", "@title": "Finding Prime Numbers", "title": "Finding Prime Numbers", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "paragraph": [{"math": ["\\lfloor\\sqrt{n}\\rfloor", "\\lfloor\\sqrt{n}\\rfloor -1"], "#text": "How do we tell if a number is prime?\nOne approach is the prime sieve: Test all prime up to\n.\nThis requires up to  divisions."}, {"math": ["n", "\\log n"], "#text": "How does the cost of this algorithm compare to the input size?\nA problem instance is a single value, and our model syas that size for\nvalue  is .\nTherefore, this is an exponential time algorithm!"}, {"math": ["n", "n", "n"], "#text": "Note that it is easy to check the number of times 2 divides \nwhen using a binary representation.\nWhat about checking for the number of times that 3 divides ?\nThis is not so easy.\nWhat if  were represented in trinary?\nThen it would be easy to check for divisions by 3."}, "In general, is there a polynomial time algorithm?\nWe don't know of one (and that fact is important to modern\ncryptography, which relies on the \"fact\" that factoring large numbers\ntakes a lot of time.\nBut what if we are willing to settle for a\nprobabilistic algorithm?", "Here are some useful theorems from Number Theory:", "To prove that a number is composite, we need only one factor.\nAnd, given a (claimed) factor, it is easy to verify whether that claim\nis true.\nWhat does it take to prove that a number is prime?\nProving something is prime is much harder than proving that something\nis composite!\nBecause we need to check a lot more than just one value.", {"math": ["\\sqrt{n}", "n", "n", "< \\sqrt{n}"], "#text": "Do we need to check all  candidates for possible\nfactors of  in order to know if  is prime?\nIt depends on how safe you want to be.\n(Of course, we actually only need to check primes .)"}, {"math": "n", "#text": "Here are some potential probablistic algorithms that we might use to\ndecide if a value  is prime."}, "None of those are really serious probabilistic algorithms to solve the\nproblem.\nHowever, using number theory, it is possible to create a cheap test\nthat probabilistically determines a number to be composite (if it is\nactually composite) 50% of the time.\nUsing this test, we can build an algorithm for prime testing as follows:", "In other words, we can repeatedly try the test, until our number\npasses enough times for us to be comfortable about claiming that it is\nprime.\nOf course, this does nothing to help you find the factors!\nBut there is a nice aspect to this approach.\nWe use large primes for cryptography.\nBut, the numbers used don't actually need to be prime.\nThey only need to be hard to factor!\nAnd those numbers that continually pass the cheap 50/50 test tend to\nbe hard to factor.\nSo, even if a non-prime is used, it will still probably succeed in its\nintended use."], "bullet_list": {"@bullet": "*", "list_item": [{"paragraph": {"strong": "Prime Number Theorem", "math": ["n", "\\frac{n}{\\ln n}"], "#text": ": The number of primes less than  is\n(approximately) ."}}, {"paragraph": {"math": "\\ln n", "#text": "The average distance between primes is ."}}, {"paragraph": {"strong": "Prime Factors Distribution Theorem", "math": ["n", "n", "\\ln \\ln n", "\\sqrt{\\ln \\ln n}", "2^{32}", "\\log \\log n = 5"], "#text": ": For large ,\non average,  has about  different prime\nfactors with a standard deviation of .\nNote that this is quite small.\nFor , ."}}]}, "enumerated_list": {"@enumtype": "arabic", "@prefix": "", "@suffix": ".", "list_item": [{"paragraph": {"math": ["n", "1/log n"], "#text": "Always say that Prime() is FALSE.\nThis simple algorithm \"usually\" works.\nIt only fails  times on average!"}}, {"paragraph": {"math": ["1/\\ln n", "n"], "#text": "If you don't like the notion that for the actual primes values this\nalways fails, than an alternative is to say, with probability\n, that Prime() is TRUE.\nEven though it is is not sometimes right and sometimes wrong,\nof course this no better than the previous algorithm."}}, {"paragraph": {"math": ["m", "\\sqrt{n}", "n", "m", "n"], "emphasis": "not", "#text": "Pick a number  between 2 and .\nSay  is prime if and only if  does not divide\n.\nThis is not not much help, because it probably did  pick a\nfactor!"}}]}, "literal_block": {"@xml:space": "preserve", "#text": "Prime(n) {\n  for(i=0; i<COMFORT; i++)\n    if !CHEAPTEST(n)\n    return FALSE;\n  return TRUE;\n}"}}}