{"document": {"@dupnames": "finding\\ the\\ maximum\\ value", "@ids": "finding-the-maximum-value", "@source": "<string>", "@title": "Finding the Maximum Value", "title": "Finding the Maximum Value", "subtitle": {"@dupnames": "finding\\ the\\ maximum\\ value", "@ids": "id1", "#text": "Finding the Maximum Value"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "paragraph": [{"math": ["i", "i"], "#text": "How can we find the  th largest value in a sorted list?\nObviously we just go to the  th position.\nBut what if we have an unsorted list?\nCan we do better than to sort it?\nIf we are looking for the minimum or maximum value, certainly we can\ndo better than sorting the list.\nIs this true for the second biggest value?\nFor the median value?\nIn later sections we will examine those questions.\nFor this section, we will continue our examination of lower bounds\nproofs by reconsidering the simple problem of finding the maximum\nvalue in an unsorted list."}, "Here is a simple algorithm for finding the largest value.", {"math": "n", "#text": "Obviously this algorithm requires  comparisons.\nIs this optimal?\nIt should be intuitively obvious that it is, but let us try to prove\nit.\n(Before reading further you might try writing down your own proof.)"}, {"math": "n-1", "#text": "This proof is clearly wrong, because the winner does not need to\nexplicitly compare against all other elements to be recognized.\nFor example, a standard single-elimination playoff sports tournament\nrequires only  comparisons, and the winner does not play\nevery opponent.\nSo let's try again."}, {"title_reference": "posets <poset>", "#text": "This proof is sound.\nHowever, it will be useful later to abstract this by introducing the\nconcept of .\nWe can view the maximum-finding problem as starting with a poset where\nthere are no known relationships, so every member of the collection is\nin its own separate DAG of one element."}, {"literal": ["largest", "largest", "largest", "for"], "math": "n-1", "#text": "What is the average cost of ?\nBecause it always does the same number of comparisons,\nclearly it must cost  comparisons.\nWe can also consider the number of assignments that \nmust do.\nFunction  might do an assignment on any iteration of the\n loop."}, {"literal": ["largest", "A"], "math": ["i", "i", "i", "1/i"], "#text": "Because this event does happen, or does not happen,\nif we are given no information about distribution we could guess that\nan assignment is made after each comparison with a probability of one\nhalf.\nBut this is clearly wrong.\nIn fact,  does an assignment on the  th iteration\nif and only if  [] is the biggest of the the first\n elements.\nAssuming all permutations are equally likely, the probability of this\nbeing true is .\nThus, the average number of assignments done is"}, {"math": "{\\cal H}_n", "#text": "which is the Harmonic Series ."}, {"math": ["{\\cal H}_n", "\\log_e n"], "#text": "More exactly,  is close to ."}, {"literal": "Largest", "#text": "How \"reliable\" is this average?\nThat is, how much will a given run of the program deviate from the\nmean cost?\nAccording to Cebysev's Inequality, an observation will fall\nwithin two standard deviations of the mean at least 75% of the time.\nFor , the variance is"}, {"math": ["\\sqrt{\\log_e n}", "\\log_e n - 2\\sqrt{\\log_e n}", "\\log_e n + 2\\sqrt{\\log_e n}"], "#text": "The standard deviation is thus about .\nSo, 75% of the observations are between\n\nand .\nIs this a narrow spread or a wide spread?\nCompared to the mean value, this spread is pretty wide, meaning\nthat the number of assignments varies widely from run to run of the\nprogram."}], "block_quote": {"raw": {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}}, "topic": [{"title": "Proof 1", "paragraph": {"math": "n-1", "#text": "The winner must compare against all other elements, so there must be\n comparisons."}}, {"title": "Proof 2", "paragraph": {"math": ["n-1", "n-1"], "#text": "Only the winner does not lose.\nThere are  losers.\nA single comparison generates (at most) one (new) loser.\nTherefore, there must be  comparisons."}}, {"title": "Proof 2a", "paragraph": {"math": ["n", "n-1", "n-1", "n-1"], "#text": "To find the largest value, we start with a poset of  DAGs\neach with a single element, and we must build a poset having all\nelements in one DAG such that there is one maximum value\n(and by implication,  losers).\nWe wish to connect the elements of the poset into a single DAG with\nthe minimum number of links.\nThis requires at least  links.\nA comparison provides at most one new link.\nThus, a minimum of  comparisons must be made."}}], "math_block": [{"@xml:space": "preserve", "#text": "1 + \\sum_{i=2}^n \\frac{1}{i} = \\sum_{i=1}^n \\frac{1}{i}"}, {"@xml:space": "preserve", "#text": "{\\cal H}_n = \\Theta(\\log n)."}, {"@xml:space": "preserve", "#text": "{\\cal H}_n - \\frac{\\pi^2}{6} = \\log_e n - \\frac{\\pi^2}{6}."}]}}