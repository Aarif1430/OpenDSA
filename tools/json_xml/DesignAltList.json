{"document": {"@ids": "alternative-list-adt-designs", "@names": "alternative\\ list\\ adt\\ designs", "@source": "<string>", "@title": "Alternative List ADT Designs", "title": "Alternative List ADT Designs", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "paragraph": [{"title_reference": "list ADT <list> <ListADT>", "#text": "The  specifies that a List\ncomprises not only a collection of objects in linear order,\nbut also \"the current position\".\nWhile this is a simple way to present the main concepts embodied by a\nlist, it complicates any algorithm that relies on having two or more\ndistinct \"current positions\" in the same list, such as any algorithm\nthat steps from both ends towards the middle."}, {"literal": ["ListIndex", "ListIndex"], "title_reference": "iterator", "#text": "An alternative design is to separate the \"current position\" as a\nseparate object.\nIn the following ADT, we will call this a .\nThis is a simple form of a concept that is sometimes called an\n.\nThe  interface abstracts the notion of a position in a\nlist."}, {"literal": ["ListIndex", "ListIndex", "List"], "#text": "There is the issue in an implementation of how the two classes will\ncommunicate.\nFor the array-based list, the  merely needs to store an\ninteger for the position.\nFor the linked list class, the  would store a pointer to\na linked list node.\nThis means that the  class needs to be able to set and get\nthis pointer, but nobody outside should need to know about it.\nSome languages like Java and C++ have mechanisms that allow a specific\nclass to have access to non-public members of another class.\nOher languages like Processing have no such concept."}, {"literal": "ListIndex", "#text": "One general solution is to make the interface for \npublic, but make the implementation a private inner class of the List\nimplementation.\nThis approach is used in the following implmentation for the\nArray-based list."}]}}