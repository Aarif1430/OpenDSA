{"document": {"@dupnames": "list\\ element\\ implementations", "@ids": "list-element-implementations", "@source": "<string>", "@title": "List Element Implementations", "title": "List Element Implementations", "subtitle": {"@dupnames": "list\\ element\\ implementations", "@ids": "id1", "#text": "List Element Implementations"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/List/listElementCON.css"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "listElementDataCON", "@long_name": "listElementDataCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}], "paragraph": [{"title_reference": "container class", "#text": "When designing any , there are a number of\ndesign choices to be made regarding the data elements."}, {"title_reference": "elements <element>", "#text": "What to do if something can appear multiple times on a list?\nOne option is to use a reference to .\nAnother is to store separate copies.\nIn general, the larger the elements and the more that they are\nduplicated, the more likely that pointers to shared elements is the\nbetter approach."}], "section": [{"@ids": "homogeneity", "@names": "homogeneity", "title": "Homogeneity", "paragraph": [{"title_reference": "homogeneity", "#text": "The next issue to consider is whether to enforce \nin the list elements.\nThat is, should lists be restricted so that all data elements stored\nare of the same object type?\nOr should it be possible to store different types?"}, "If you want to enforce homogeneity, the most rigid way is to simply\ndefine the elements to be of a fixed type.\nBut that does not help if you want one list to store integers while\nanother stores strings.\nA much more flexible approach is to use Java generics or C++\ntemplates.\nIn this way, the compiler will enforce that a given list will only\nstore a single data type, while still allowing different lists to have\ndifferent data types.\nAnother approach is to store an object of the appropriate type in the\nheader node of the list (perhaps an object of the appropriate type is\nsupplied as a parameter to the list constructor), and then check that\nall insert operations on that list use the same element type.\nThis approach is useful in a language like JavaScript that does not\nuse strong typing, but does allow a program to test the type of an\nobject.", {"literal": ["Object", "void*"], "#text": "In some applications, the designer would like to allow a given list\nstore elements with different types.\nIn Java, declaring the element to be of type  will stop the\ncompiler from enforcing any type restrictions.\nIn C++, a similar effect can be achieved by using  pointers."}], "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "listElementTypeCON", "@long_name": "listElementTypeCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"@ids": "element-deletion", "@names": "element\\ deletion", "title": "Element Deletion", "paragraph": "Our last design issue is what to do to the list elements when the list\nitself is deleted?\nThis is a serious concern in a language like C++ that does not support\nautomatic garbage collection.", "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "listElementDeleteCON", "@long_name": "listElementDeleteCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"@ids": "practice-questions", "@names": "practice\\ questions", "title": "Practice Questions", "raw": [{"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "ListSumm", "@long_name": "ListSumm", "@points": "1.0", "@required": "True", "@threshold": "5"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/listElementDataCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/listElementTypeCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/listElementDeleteCON.js"}]}]}}