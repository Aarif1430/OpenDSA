{"document": {"@ids": "writing-more-sophisticated-recursive-functions", "@names": "writing\\ more\\ sophisticated\\ recursive\\ functions", "@source": "<string>", "@title": "Writing More Sophisticated Recursive Functions", "title": "Writing More Sophisticated Recursive Functions", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}], "paragraph": ["Some recursive functions have only one base case and one recursive\ncall.\nBut it is common for there to be more than one of either or both.", "The following is the general structure for a recursive function."], "topic": [{"title": "Example", "paragraph": [{"literal": ["X", "Y", "Y = X - 1"], "#text": "Consider a rather simple function to determine if an integer  is\nprime or not.\n is a helper variable that is used as the devisor.\nWhen calling the function initially,"}, {"literal": "Prime", "#text": "We see that  has two base cases and one recursive call."}], "raw": {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}}, {"title": "Example", "paragraph": [{"literal": ["int", "set", "isSubsetSum", "set", "sum", "sum = 4", "true", "sum = 6", "true", "sum = 2", "false", "n", "set.length"], "title_reference": "8 + 1 + -3 = 6", "#text": "Here is a function that has multiple recursive calls.\nGiven an  array named , function\n determines whether some of the values in\n add up to .\nFor example, given the number 3, 8, 1, 7, and -3, with ,\nthe result is  because the values 3 and 1 sum to 4.\nIf , then the result will be  because the\n.\nOn the other hand, if  then the result is \nthere is no combination of the five numbers that adds up to 2.\nIn this code, variable  is the number of values that we look\nat.\nWe don't want to just use  because the recursive\ncalls need to limit their work to part of the array."}, "This example has two base cases and two recursive calls."], "raw": {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}}, {"title": "Example", "paragraph": [{"literal": ["paths", "n = 3", "paths"], "title_reference": "1+1+1, 1+2, 2+1,", "#text": "Here is a function that has multiple base cases and multiple\nrecursive calls.\nFunction  counts the number of different ways to reach a\ngiven basketball score.\nRecall that in Basketball, it is possible to get points in\nincrements of 1, 2, or 3.\nSo if , then  will return 4, since there are four\ndifferent ways to accumulate 3 points:  and 3."}, "This function has three base cases and three recursive calls."], "raw": {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}}]}}