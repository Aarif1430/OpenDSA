{"document": {"@dupnames": "common\\ misunderstandings", "@ids": "common-misunderstandings", "@source": "<string>", "@title": "Common Misunderstandings", "title": "Common Misunderstandings", "subtitle": {"@dupnames": "common\\ misunderstandings", "@ids": "id1", "#text": "Common Misunderstandings"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/AlgAnal/MisunderstandingsGraphCON.css"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "MisunderstandingsGraphCON", "@long_name": "MisunderstandingsGraphCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "MisSumm", "@long_name": "MisSumm", "@points": "1.0", "@required": "True", "@threshold": "5"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/AlgAnal/MisunderstandingsGraphCON.js"}], "paragraph": [{"title_reference": ["Asymptotic analysis <asymptotic analysis>", "growth rates <growth rate>"], "#text": "is one of the most\nintellectually difficult topics that undergraduate computer science\nmajors are confronted with.\nMost people find  and asymptotic\nanalysis confusing and so develop misconceptions about either the\nconcepts or the terminology.\nIt helps to know what the standard points of confusion are,\nin hopes of avoiding them."}, {"title_reference": ["upper <upper bound>", "lower bounds <lower bound>", "read about analyzing problems <AnalProblem>"], "math": "\\Theta", "#text": "One problem with differentiating the concepts of\n and  is\nthat, for most algorithms that you will encounter, it is\neasy to recognize the true growth rate for that algorithm.\nGiven complete knowledge about a cost function, the upper and lower\nbound for that cost function are always the same.\nThus, the distinction between an upper and a lower bound is only\nworthwhile when you have incomplete knowledge about the thing being\nmeasured.\nIf this distinction is still not clear,\nthen you should .\nWe use -notation to indicate that there is no meaningful\ndifference between what we know about the growth rates of the upper\nand lower bound (which is usually the case for simple algorithms)."}, {"title_reference": ["worst case", "best case", "average cases <average case>"], "strong": ["define a cost", "growth rate"], "math": ["\\Omega", "\\Theta"], "#text": "It is a common mistake to confuse the concepts of upper bound or\nlower bound on the one hand, and  or\n on the other.\nThe best, worst, or  each\n for a specific input instance\n(or specific set of instances for the average case).\nIn contrast, upper and lower bounds describe our understanding of the\n for that cost measure.\nSo to define the growth rate for an algorithm or problem, we need to\ndetermine what we are measuring (the best, worst, or average case) and\nalso our description for what we know about the growth rate of that\ncost measure (big-Oh, , or )."}, {"math": ["n", "n", "n", "n"], "strong": ["growth rate", "rate", "change", "change"], "#text": "The upper bound for an algorithm is not the same as the worst case for\nthat algorithm for a given input of size .\nWhat is being bounded is not the actual cost (which you can\ndetermine for a given value of ), but rather the\n for the cost.\nThere cannot be a growth rate for a single point, such as a particular\nvalue of .\nThe growth  applies to the  in cost as a\n in input size occurs.\nLikewise, the lower bound is not the same as the best case for a given\nsize ."}, {"math": ["i", "i", "i"], "#text": "Another common misconception is thinking that the best case for an\nalgorithm occurs when the input size is as small as possible, or that\nthe worst case occurs when the input size is as large as possible.\nWhat is correct is that best- and worse-case instances exist for\neach possible size of input.\nThat is, for all inputs of a given size, say ,\none (or more) of the inputs of size  is the best and one\n(or more) of the inputs of size  is the worst.\nOften (but not always!), we can characterize the best input case for\nan arbitrary size, and we can characterize the worst input case for an\narbitrary size.\nIdeally, we can determine the growth rate for the characterized best,\nworst, and average cases as the input size grows."}], "topic": {"title": "Example", "paragraph": {"math": ["n", "n", "n", "n=1"], "emphasis": "not", "#text": "What is the growth rate of the best case for sequential search?\nFor any array of size , the best case occurs when the\nvalue we are looking for appears in the first position of the\narray.\nThis is true regardless of the size of the array.\nThus, the best case (for arbitrary size ) occurs when the\ndesired value is in the first of  positions, and its cost\nis 1.\nIt is  correct to say that the best case occurs when\n."}}}}