<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="the-substitution-based-model-of-evaluation" names="the\ substitution-based\ model\ of\ evaluation" source="&lt;string&gt;" title="The Substitution-Based Model of Evaluation"><title>The Substitution-Based Model of Evaluation</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-13 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><odsalink>AV/PL/main.css</odsalink></raw><section ids="substitution-algorithm" names="substitution\ algorithm"><title>Substitution Algorithm</title><paragraph>In this section, we continue our investigation of the semantics of the
lambda calculus. Now that we understand the meaning of each one of the
three types of lambda expressions (see
<title_reference>semantics-of-the-lambda-calculus</title_reference>), the meaning of free and
bound variables (see <title_reference>free-and-bound-variables</title_reference>) and how bound
variables can be systematically renamed (see <title_reference>alpha-conversion</title_reference>),
we have all of the tools we need to explain the meaning of function
calls in the lambda calculus. Note that, since functions are the only
entities in the lambda calculus, interpreting a lambda calculus
program boils down to executing function calls.</paragraph><paragraph>First, consider how you would execute the following function call in
your head:</paragraph><literal_block classes="code" xml:space="preserve">f(8)</literal_block><paragraph>You would first look up the definition of the function <literal classes="code">f</literal>, say:</paragraph><literal_block classes="code" xml:space="preserve">var f = function(x) { return  2 * x - 5; };</literal_block><paragraph>Then you could compute the value of <literal classes="code">f(8)</literal> by computing the
value of the body of <literal classes="code">f</literal> after substituting <literal classes="code">8</literal> for
<literal classes="code">x</literal> in it, yielding <literal classes="code">2*8 - 5 = 11</literal>. This intuitive
approach to evaluating function calls naturally leads to a
<emphasis>substitution-based model of interpretation</emphasis>. In this section, we
discuss a well-known algorithm for performing substitutions in the
lambda calculus.</paragraph><paragraph>Since both the body of a function and the argument of a function call
can be arbitrary lambda expressions, we need an algorithm that can
substitute any lambda expression <math>a</math> (the argument) for the
variable <math>p</math> (the parameter of the function) in the lambda
expression <math>b</math> (the body of the function). In this section, we
forget about the interpretation of <math>a</math>, <math>p</math> and <math>b</math>
as components of a function call. Instead, we describe the algorithm
in general terms, that is, as an algorithm to substitute <math>a</math> for
<math>p</math> in <math>b</math>, which we denote by:</paragraph><math_block xml:space="preserve">subst(a, p, b)</math_block><paragraph>where <math>a</math> and <math>b</math> are arbitrary lambda expressions and
<math>p</math> is any variable.</paragraph><paragraph>Note that <math>subst(a, p, b)</math> means "substitute <math>a</math> for
<math>p</math> in <math>b</math>" or equivalently, "replace <math>p</math> by
<math>a</math> in <math>b</math>. Whichever way you choose to phrase it,
<math>b</math> is always the expression inside which we are performing the
substitution, <math>p</math> is always the expression that gets taken out
of <math>b</math> and <math>a</math> is always the expression that gets
inserted into <math>b</math>.</paragraph><paragraph>Now, back to the substitution algorithm. Since <math>b</math> is an
arbitrary lambda expression, looking back at the BNF grammar for the
<title_reference>lambda calculus &lt;lambda calculus&gt; &lt;Semantics&gt;</title_reference>,
we see that we must
consider three cases for <math>b</math>, namely a variable, a lambda
abstraction or an application expression. Therefore, our description
of the algorithm is broken down into three numbered cases.</paragraph><paragraph><strong>Case 1:</strong> If <math>b</math> is a variable, say <math>x</math>, then
<math>subst(a, p, b)</math> becomes <math>subst(a, p,x)</math>. Recall that
<math>p</math> and <math>x</math> are generic variables. So we need to
distinguish two subcases. First, if <math>p</math> and <math>x</math> are the
same variable, say <math>v</math>, then <math>subst(a,p,x)</math> is really
<math>subst(a,v,v)</math>, whose value is <math>a</math>, because that is what
we get when we replace <math>v</math> by <math>a</math>. We call this part of the
algorithm <strong>Case 1a</strong>. Second, if <math>p</math> and <math>x</math> are two
different variables, then <math>subst(a,p,x)</math> is equal to <math>x</math>,
because the variable <math>p</math> does not occur in <math>x</math> and no
substitutions are needed or possible. We call this part of the
algorithm <strong>Case 1b</strong></paragraph><paragraph>Let's look at two examples of substitutions that belong to
Case 1. First, in <math>subst(\lambda x.x, u, v)</math>, <math>v</math> is a
variable that is different from <math>u</math>. Therefore, this example
matches Case 1b, and the output of the algorithm is <math>v</math>. On the
other hand, <math>subst(\lambda y.(y\ x), u, u)</math> falls into Case 1a,
since both <math>p</math> and <math>b</math> are equal to the same variable
<math>u</math>. So, the algorithm returns <math>\lambda y.(y\ x)</math>.</paragraph><comment xml:space="preserve">.. inlineav:: substCase1b ss</comment><comment xml:space="preserve">:output: show</comment><paragraph><strong>Case 2:</strong> To be completed</paragraph><paragraph><strong>Case 3:</strong> If <math>b</math> is an application expression, say
<math>(e_1\ e_2)</math>, where <math>e_1</math> and <math>e_2</math> are arbitrary
lambda expressions, then the value of <math>subst(a,p,b)</math>, really
<math>subst(a,p,(e_1\ e_2))</math>, is <math>(subst(a,p,e_1)\
subst(a,p,e_2))</math>, that is, the application expression that is obtained
by substituting <math>a</math> for <math>p</math> recursively in each component
of the original application expression.</paragraph><paragraph>As an example, consider <math>subst(\lambda y.(y\ x), u, (\lambda
v.u\ u))</math>. Since the expression we are substituting into (i.e., the
third one) is an application expression, the algorithm requires us to
return the application that results from recursively substituting
<math>\lambda y.(y\ x)</math> for <math>u</math> in both components of this
application. Since we already performed these two substitutions in the
examples listed above, the final result of the algorithm is
<math>(\lambda v.\lambda y.(y\ x)\ \lambda y.(y\ x))</math>.</paragraph></section><section ids="rp-15-part-2" names="rp\ 15\ part\ 2"><title>RP 15 part 2</title><paragraph>The following exercise is good practice for identifying which case
applies at each step of the substitution algorithm. To get credit for
this randomized problem, you must solve it correctly three times in
a row.</paragraph><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="RP15part2"
    long_name="RP15part2"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw></section><section ids="rp-15-part-3" names="rp\ 15\ part\ 3"><title>RP 15 part 3</title><paragraph>The following exercise will test your ability to complete a full
substitution by applying the algorithm scrupulously. To get credit for
this randomized problem, you must solve it correctly three times in
a row.</paragraph><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="RP15part3"
    long_name="RP15part3"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw><comment xml:space="preserve">.. odsascript:: AV/PL/AV/substCase1b.js</comment></section></document>