{"document": {"@dupnames": "tracing\\ recursive\\ code", "@ids": "tracing-recursive-code", "@source": "<string>", "@title": "Tracing Recursive Code", "title": "Tracing Recursive Code", "subtitle": {"@dupnames": "tracing\\ recursive\\ code", "@ids": "id1", "#text": "Tracing Recursive Code"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/RecurTutor/recurTraceCON.css"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/RecurTutor/TOHfigCON.css"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "recurTraceWindCON", "@long_name": "recurTraceWindCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "recurTraceFactCON", "@long_name": "recurTraceFactCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "recurTraceSumCON", "@long_name": "recurTraceSumCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}], "paragraph": ["When writing a recursive function, you should think in a top-down\nmanner.\nDo not worry about how the recursive call solves the sub-problem.\nSimply accept that it will solve it correctly.\nUse this result as though you had called some library function,\nto correctly solve the original problem.", "When you have to read or trace a recursive function, then you do need\nto consider how the function is doing its work.\nTracing a few recursive functions is a great way to learn how\nrecursion behaves.\nBut after you become comfortable with tracing, you will rarely need to\nwork through so many details again.\nYou will begin to develop confidence about how recursion works.", "You know that information can be passed in (using a function\nparameter) from one recursive call to another, on ever smaller\nproblems, until a base case is reached in the winding phase.\nThen, a return value is passed back as the series of recursive calls\nunwinds.\nSometimes people forget about the \"unwinding\" phase.", "During the winding phase, any parameter passed through the recursive\ncall flows forward until the base case is reached.\nDuring the unwinding phase, the return value of the function (if there\nis one) flows backwards to the calling copy of the function.\nIn the following example, a recursive function to compute factorial\nhas information flowing forward during the winding phase, and backward\nduring the unwinding phase.", "The recursive function may have information flow for more than one parameter. For example, a recursive\nfunction that sums the values in an array recursively may pass the array itself\nand the index through the recursive call in the winding phase and returns back the summed value so far\nin the unwinding phase."], "section": [{"@ids": "a-domino-analogy", "@names": "a\\ domino\\ analogy", "title": "A Domino Analogy", "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "recurTraceDmnCON", "@long_name": "recurTraceDmnCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, "paragraph": ["This recursive model for the domino effect can be used as a template\nfor the solution to all linear recursive functions.\nThink of tipping over each domino as performing a further step\nof computation toward the final solution.\nRemember these rules:", "1. Since the first domino has to be tipped over manually,\nthe solution for the base case is computed non-recursively.", "2. Before any given domino can be tipped over,\nall preceding dominos have to be tipped over."]}, {"@ids": "towers-of-hanoi", "@names": "towers\\ of\\ hanoi", "title": "Towers of Hanoi", "paragraph": ["Here is another example of recursion, based on a famous puzzle called\n\"Towers of Hanoi\".\nThe natural algorithm to solve this problem has multiple recursive calls.\nIt cannot be rewritten easily using loops.\n\"Towers of Hanoi\" comes from an ancient Vietnamese legend.\nA group of monks is tasked with moving a tower of 64 disks of\ndifferent sizes according to certain rules.\nThe legend says that, when the monks will have finished moving all of\nthe disks, the world will end.", {"title_reference": "n", "#text": "The Towers of Hanoi puzzle begins with three poles and \nrings, where all rings start on the leftmost pole (labeled Pole A).\nThe rings each have a different size, and are stacked in order of\ndecreasing size with the largest ring at the bottom, as shown in\npart (a) of the figure.\nThe problem is to move the rings from the leftmost pole to the\nmiddle pole (labeled Pole B) in a series of steps.\nAt each step the top ring on some pole is moved to another pole.\nWhat makes this puzzle interesting is the limitation on where rings\nmay be moved:\nA ring may never be moved on top of a smaller ring."}, {"title_reference": ["n-1", "X", "n-1", "X", "n-1", "X"], "#text": "How can you solve this problem?\nIt is easy if you don't think too hard about the details.\nInstead, consider that all rings are to be moved from Pole A to Pole B.\nIt is not possible to do this without first moving the bottom\n(largest) ring to Pole B.\nTo do that, Pole B must be empty, and only the bottom ring can be on\nPole A.\nThe remaining  rings must be stacked up in order\non Pole C, as shown in part (b) of the figure.\nHow can you do this?\nAssume that a function  is available to solve the\nproblem of moving the top  rings from Pole A to Pole C.\nThen move the bottom ring from Pole A to Pole B.\nFinally, again use function  to move the\nremaining  rings from Pole C to Pole B.\nIn both cases, \"function \" is simply the Towers of Hanoi\nfunction called on a smaller version of the problem."}, {"emphasis": "how", "#text": "The secret to success is relying on the Towers of Hanoi\nalgorithm to do the work for you.\nYou need not be concerned about the gory details of  the\nTowers of Hanoi subproblem will be solved.\nThat will take care of itself provided that two things are done.\nFirst, there must be a base case (what to do if there is only one\nring) so that the recursive process will not go on forever.\nSecond, the recursive call to Towers of Hanoi can only be used to\nsolve a smaller problem, and then only one of the proper form (one\nthat meets the original definition for the Towers of Hanoi problem,\nassuming appropriate renaming of the poles)."}, {"literal": ["move(start, goal)", "start", "goal", "move", "TOH"], "#text": "Here is an implementation for the recursive Towers of Hanoi\nalgorithm.\nFunction  takes the top ring from Pole\n and moves it to Pole .\nIf  were to print the values of its parameters,\nthen the result of calling  would be a list of\nring-moving instructions that solves the problem."}, "This next slideshow explains the solution to the Towers of Hanoi problem."], "raw": [{"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "TOHfigCON", "@long_name": "TOHfigCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "recurTraceTOHCON", "@long_name": "recurTraceTOHCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/RecurTutor/recurTraceWindCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/RecurTutor/recurTraceSumCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/RecurTutor/recurTraceFactCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/RecurTutor/recurTraceDmnCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/RecurTutor/recurTraceTOHCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/RecurTutor/TOHfigCON.js"}]}]}}