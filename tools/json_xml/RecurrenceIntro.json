{"document": {"@dupnames": "recurrence\\ relations", "@ids": "recurrence-relations", "@source": "<string>", "@title": "Recurrence Relations", "title": "Recurrence Relations", "subtitle": {"@dupnames": "recurrence\\ relations", "@ids": "id1", "#text": "Recurrence Relations"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Background/LinearRecurrencesCON.css"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Background/LinearRecurrencesNCON.css"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "LinearRecurrencesCON", "@long_name": "LinearRecurrencesCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "LinearRecurrencesNCON", "@long_name": "LinearRecurrencesNCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Background/LinearRecurrencesCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Background/LinearRecurrencesNCON.js"}], "paragraph": [{"title_reference": "recurrence relation", "#text": "The running time for a recursive algorithm is most easily expressed by\na recursive expression because the total time for the recursive\nalgorithm includes the time to run the recursive\ncall(s).\nA  defines a function by means of an\nexpression that includes one or more (smaller) instances of itself.\nA classic example is the recursive definition for the\nfactorial function:"}, "Another standard example of a recurrence is the Fibonacci\nsequence:", "From this definition, the first seven numbers of the\nFibonacci sequence are", {"math": ["\\mbox{Fib}(n)", "\\mbox{Fib}(1)", "\\mbox{Fib}(2)"], "#text": "Notice that this definition contains two parts: the general\ndefinition for  and the base cases for\n and .\nLikewise, the definition for factorial contains a recursive part and\nbase cases."}, {"math": ["n", "n = 0", "n = 1", "n-1"], "literal": "fact", "#text": "Recurrence relations are often used to model the cost of recursive\nfunctions.\nFor example, the number of multiplications required by a recursive\nversion of the factorial function for an input of size\n will be zero when  or  (the base\ncases), and it will be one plus the cost of calling  on a\nvalue of .\nThis can be defined using the following recurrence:"}, {"math": "\\mathbf{T}", "#text": "As with summations, we typically wish to replace the recurrence\nrelation with a closed-form solution.\nOne approach is to expand the recurrence by replacing any\noccurrences of  on the right-hand side with its\ndefinition."}, "A slightly more complicated recurrence is", "Again, we will use expansion to help us find a closed form solution."], "math_block": [{"@xml:space": "preserve", "#text": "n! = (n-1)! \\cdot n\\ \\mbox{for}\\ n>1; \\quad 1! = 0! = 1."}, {"@xml:space": "preserve", "#text": "1, 1, 2, 3, 5, 8,\\ \\mbox{and}\\ 13."}, {"@xml:space": "preserve", "#text": "\\mathbf{T}(n) = \\mathbf{T}(n-1) + 1\\ \\mbox{for}\\ n>1;\n\\quad \\mathbf{T}(0) = \\mathbf{T}(1) = 0."}, {"@xml:space": "preserve", "#text": "\\mathbf{T}(n) = \\mathbf{T}(n-1) + n; \\quad \\mathbf{T}(1) = 1."}], "block_quote": {"math_block": {"@xml:space": "preserve", "#text": "\\mbox{Fib}(n) = \\mbox{Fib}(n-1) + \\mbox{Fib}(n-2)\\ \\mbox{for}\\ n>2;\n\\quad\\mbox{Fib}(1) = \\mbox{Fib}(2) = 1."}}}}