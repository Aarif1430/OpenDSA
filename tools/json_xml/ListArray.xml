<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="array-based\ list\ implementation" ids="array-based-list-implementation" source="&lt;string&gt;" title="Array-Based List Implementation"><title>Array-Based List Implementation</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><odsalink>AV/List/alistCON.css</odsalink></raw><section dupnames="array-based\ list\ implementation" ids="id1"><title>Array-Based List Implementation</title><paragraph>Here is an implementation for the array-based list, named <literal>AList</literal>.
<literal>AList</literal> inherits from the <title_reference>List ADT &lt;ListADT&gt;</title_reference>,
and so must implement all of the member functions of <literal>List</literal>.</paragraph><raw format="xml" xml:space="preserve"><codeinclude>null</codeinclude></raw><line_block><line></line></line_block><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="alistVarsCON"
    long_name="alistVarsCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="alistIntroCON"
    long_name="alistIntroCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><section ids="insert" names="insert"><title>Insert</title><paragraph>Because the array-based list implementation is defined to store list
elements in contiguous cells of the array, the <literal>insert</literal>, <literal>append</literal>,
and <literal>remove</literal> methods must maintain this property.</paragraph><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="alistInsertCON"
    long_name="alistInsertCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw></section></section><section ids="insert-practice-exericse" names="insert\ practice\ exericse"><title>Insert Practice Exericse</title><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="AlistInsertPRO"
    long_name="AlistInsertPRO"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw></section><section ids="append-and-remove" names="append\ and\ remove"><title>Append and Remove</title><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="alistAppendCON"
    long_name="alistAppendCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><paragraph>Removing an element from the head of the list is
similar to insert in that all remaining elements  must shift toward
the head by one position to fill in the gap.
If we want to remove the element at position <title_reference>i</title_reference>, then
<title_reference>n - i - 1</title_reference> elements must shift toward the head, as shown in the
following slideshow.</paragraph><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="alistRemoveCON"
    long_name="alistRemoveCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><paragraph>In the average case, insertion or removal each requires moving half
of the elements, which is <title_reference>Theta(n)</title_reference>.</paragraph><section ids="remove-practice-exericise" names="remove\ practice\ exericise"><title>Remove Practice Exericise</title><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="AlistRemovePRO"
    long_name="AlistRemovePRO"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw><paragraph>Aside from <literal>insert</literal> and <literal>remove</literal>, the only other operations that
might require more than constant time are the constructor and
<literal>clear</literal>.
The other methods for Class <literal>AList</literal> simply
access the current list element or move the current position.
They all require <title_reference>Theta(1)</title_reference> time.</paragraph></section></section><section ids="array-based-list-practice-questions" names="array-based\ list\ practice\ questions"><title>Array-based List Practice Questions</title><raw format="xml" xml:space="preserve"><avembed
    type="ka"
    exer_name="ALSumm"
    long_name="ALSumm"
    points="1.0"
    required="True"
    threshold="5">
</avembed>
</raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/alistVarsCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/alistIntroCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/alistInsertCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/alistAppendCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/List/alistRemoveCON.js</odsascript></raw></section></document>