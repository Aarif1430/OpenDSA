{"document": {"@dupnames": "best,\\ worst,\\ and\\ average\\ cases", "@ids": "best-worst-and-average-cases", "@source": "<string>", "@title": "Best, Worst, and Average Cases", "title": "Best, Worst, and Average Cases", "subtitle": {"@dupnames": "best,\\ worst,\\ and\\ average\\ cases", "@ids": "id1", "#text": "Best, Worst, and Average Cases"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/AlgAnal/AnalCasesCON.css"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "AnalCasesSameCON", "@long_name": "AnalCasesSameCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "AnalCasesDiffCON", "@long_name": "AnalCasesDiffCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/AlgAnal/AnalCasesSameCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/AlgAnal/AnalCasesDiffCON.js"}], "line_block": {"line": null}, "paragraph": [{"title_reference": ["Shellsort <Shellsort> <Shellsort>", "Quicksort <Quicksort> <Quicksort>", "Insertion Sort <Insertion Sort> <InsertionSort>"], "#text": "When analyzing an algorithm, should we study the best, worst, or\naverage case?\nNormally we are not interested in the best case, because this might\nhappen only rarely and generally is too optimistic for a fair\ncharacterization of the algorithm's running time.\nIn other words, analysis based on the best case is not likely to be\nrepresentative of the behavior of the algorithm.\nHowever, there are rare instances where a best-case analysis is\nuseful  in particular, when the best case has high probability of\noccurring.\nThe  and\n\nalgorithms both can take advantage of the best-case running time\nof \nto become more efficient."}, {"title_reference": ["n", "n"], "emphasis": "most of the time", "#text": "How about the worst case?\nThe advantage to analyzing the worst case is that you know for\ncertain that the algorithm must perform at least that well.\nThis is especially important for real-time applications,\nsuch as for the computers that monitor an air traffic control system.\nHere, it would not be acceptable to use an algorithm that can handle\n airplanes quickly enough , but which\nfails to perform quickly enough when all  airplanes are coming\nfrom the same direction."}, {"emphasis": ["typical", "not"], "title_reference": ["n", "K"], "#text": "For other applications  particularly when we wish to aggregate\nthe cost of running the program many times on many different inputs\nworst-case analysis might not be a representative measure of the\nalgorithm's performance.\nOften we prefer to know the average-case running time.\nThis means that we would like to know the  behavior of\nthe algorithm on inputs of size .\nUnfortunately, average-case analysis is not always possible.\nAverage-case analysis first requires that we understand how the actual\ninputs to the program (and their costs) are distributed with respect\nto the set of all possible inputs to the program.\nFor example, it was stated previously that the sequential search\nalgorithm on average examines half of the array values.\nThis is only true if the element with value  is\nequally likely to appear in any position in the array.\nIf this assumption is not correct, then the algorithm does \nnecessarily examine half of the array values in the average case."}, {"title_reference": ["hashing <hashing> <HashIntro>", "BST <binary search tree> <BST>", "self-organizing lists <self-organizing list> <SelfOrg>"], "#text": "The characteristics of a data distribution have a significant effect\non many search algorithms, such as those based on\n and search trees such as the\n.\nIncorrect assumptions about data distribution can have disastrous\nconsequences on a program's space or time performance.\nUnusual data distributions can also be used to advantage,\nsuch as is done by\n."}, "In summary, for real-time applications\nwe are likely to prefer a worst-case analysis of an algorithm.\nOtherwise, we often desire an average-case analysis if we know enough\nabout the distribution of our input to compute the average case.\nIf not, then we must resort to worst-case analysis."]}}