{"document": {"@dupnames": "mathematical\\ proof\\ techniques", "@ids": "mathematical-proof-techniques", "@source": "<string>", "@title": "Mathematical Proof Techniques", "title": "Mathematical Proof Techniques", "subtitle": {"@dupnames": "mathematical\\ proof\\ techniques", "@ids": "id1", "#text": "Mathematical Proof Techniques"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Background/twoColorCON.css"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Background/TwoColoringProofCON.css"}, {"@format": "xml", "@xml:space": "preserve", "index": "null"}, {"@format": "xml", "@xml:space": "preserve", "index": "null"}], "paragraph": ["Solving any problem has two distinct parts:\nthe investigation and the argument.\nStudents are too used to seeing only the argument in their textbooks\nand lectures.\nBut to be successful in school (and in life after school),\none needs to be good at both, and to understand the differences\nbetween these two phases of the process.\nTo solve the problem, you must investigate successfully.\nThat means engaging the problem, and working through until you find a\nsolution.\nThen, to give the answer to your client (whether that \"client\" be\nyour instructor when writing answers on a homework assignment or exam,\nor a written report to your boss),\nyou need to be able to make the argument in a way\nthat gets the solution across clearly and succinctly.\nThe argument phase involves good technical writing skills\nthe ability to make a clear, logical argument.", "Being conversant with standard proof techniques can help you in this\nprocess.\nKnowing how to write a good proof helps in many ways.\nFirst, it clarifies your thought process, which in turn clarifies your\nexplanations.\nSecond, if you use one of the standard proof structures such as proof\nby contradiction or an induction proof, then both you and your reader\nare working from a shared understanding of that structure.\nThat makes for less complexity to your reader to understand your\nproof, because the reader need not decode the structure of your\nargument from scratch.", "This section briefly introduces three commonly used proof techniques:", {"title_reference": "direct proof", "#text": "In general, a  is just a \"logical explanation\".\nA direct proof is sometimes referred to as an argument by deduction.\nThis is simply an argument in terms of logic."}], "enumerated_list": {"@enumtype": "arabic", "@prefix": "", "@suffix": ")", "list_item": [{"paragraph": "deduction, or direct proof;"}, {"paragraph": "proof by contradiction and"}, {"paragraph": "proof by mathematical induction."}]}, "section": [{"@ids": "direct-proof", "@names": "direct\\ proof", "title": "Direct Proof", "target": {"@refid": "sumdirect"}, "topic": {"@ids": "sumdirect", "@names": "sumdirect", "title": "Example", "paragraph": {"math": ["\\sum_{i=1}^n i = (n+1)n/2", "n", "n+1", "n-1", "n+1", "n/2", "n+1", "(n+1)n/2", "n"], "#text": "Here is a direct proof that .\nIf we take the first and last terms of the series, since they are 1\nand , of course they sum to .\nIf we take the second term and next-to-last term, since they are 2\nand , they also sum to .\nLikewise for the third term and third-from-the-end term.\nWe can go on and pair up terms like this, such that there are\n pairs that each sum to , for a total sum of\n.\nYou can check for yourself that this is true even if  is\nodd (and so the middle value of the series has no partner)."}}, "paragraph": [{"math": ["P \\Rightarrow Q", "P", "Q", "P \\Rightarrow Q", "Q \\Rightarrow P"], "#text": "Many direct proofs are written in English with words such as\n\"if ... then\".\nIn this case logic notation such as  can often\nhelp express the proof.\nEven if we don't wish to use symbolic logic notation, we can still\ntake advantage of fundamental theorems of logic to structure our\narguments.\nFor example, if we want to prove that  and  are\nequivalent, we can first prove  and then prove\n."}, "In some domains, proofs are essentially a series of state changes from\na start state to an end state.\nFormal predicate logic can be viewed in this way, with the various\n\"rules of logic\" being used to make the changes from one formula or\ncombining a couple of formulas to make a new formula\non the route to the destination.\nSymbolic manipulations to solve integration problems in introductory\ncalculus classes are similar in spirit, as are high school geometry\nproofs."], "raw": {"@format": "xml", "@xml:space": "preserve", "index": "null"}}, {"@ids": "proof-by-contradiction", "@names": "proof\\ by\\ contradiction", "title": "Proof by Contradiction", "paragraph": [{"emphasis": ["disprove", "assume", "false"], "title_reference": "proof by contradiction", "#text": "The simplest way to  a theorem or statement is to find\na counter-example to the theorem.\nUnfortunately, no number of examples supporting a theorem is\nsufficient to prove that the theorem is correct.\nHowever, there is an approach that is vaguely similar to disproving by\ncounter-example, called .\nTo prove a theorem by contradiction, we first  that the\ntheorem is .\nWe then find a logical contradiction stemming from this assumption.\nIf the logic used to find the contradiction is correct, then the only\nway to resolve the contradiction is to recognize that the assumption\nthat the theorem is false must be incorrect.\nThat is, we conclude that the theorem must be true."}, {"title_reference": ["proving the contrapositive", "truth table"], "math": ["P \\Rightarrow Q", "(\\mathrm{not}\\ Q) \\Rightarrow (\\mathrm{not}\\ P)"], "#text": "A related proof technique is .\nWe can prove that  by proving\n.\nThis technique works because the  for the two\nlogical statements are the same."}], "topic": {"title": "Example", "paragraph": ["Here is a simple proof by contradiction.", {"strong": "Theorem:", "#text": "There is no largest integer."}, {"strong": "Proof by contradiction:"}, {"strong": "Step 1. Contrary assumption:", "emphasis": "is", "math": "B", "#text": "Assume that there  a\nlargest integer.\nCall it  (for \"biggest\")."}, {"strong": "Step 2. Show this assumption leads to a contradiction:", "math": ["C = B + 1", "C", "C > B", "B"], "#text": "Consider .\n is an integer because it is the sum of two integers.\nAlso, , which means that  is not the\nlargest integer after all.\nThus, we have reached a contradiction.\nThe only flaw in our reasoning is the initial assumption that\nthe theorem is false.\nThus, we conclude that the theorem is correct."}]}, "raw": {"@format": "xml", "@xml:space": "preserve", "index": "null"}}, {"@ids": "proof-by-mathematical-induction", "@names": "proof\\ by\\ mathematical\\ induction", "title": "Proof by Mathematical Induction", "paragraph": ["Mathematical induction can be used to prove a wide variety of\ntheorems.\nInduction also provides a useful way to think about algorithm design,\nbecause it encourages you to think about solving a problem by building\nup from simple subproblems.\nInduction can help to prove that a recursive function produces the\ncorrect result.\nUnderstanding recursion is a big step toward understanding induction,\nand vice versa, since they work by essentially the same process.", {"title_reference": ["seeking a closed-form solution <closed-form solution> <Summation>", "summation", "recurrence <recurrence relation>"], "#text": "Within the context of algorithm analysis, one of the most important\nuses for mathematical induction is as a method to test a hypothesis.\nWhen \nfor a  or ,\nwe might first guess or otherwise acquire evidence that a particular\nformula is the correct solution.\nIf the formula is indeed correct, it is often an easy matter to prove\nthat fact with an induction proof."}, {"strong": ["Thrm", "Thrm", "Thrm"], "math": ["n", "n", "n \\geq c"], "title_reference": "c", "#text": "Let  be a theorem to prove, and express  in\nterms of a positive integer parameter .\nMathematical induction states that  is true for any value\nof parameter  (for , where  is some\nconstant) if the following two conditions are true:"}, {"math": "n", "title_reference": "strong induction", "#text": "Proving the base case is usually easy, typically requiring that some\nsmall value such as 1 be substituted for  in the theorem and\napplying simple algebra or logic as necessary to verify the theorem.\nProving the induction step is sometimes easy, and sometimes difficult.\nAn alternative formulation of the induction step is known as\n.\nThe induction step for strong induction is:"}, "Proving either variant of the induction step (in\nconjunction with verifying the base case) yields a satisfactory proof\nby mathematical induction.", {"strong": ["Thrm", "Thrm", "Thrm", "Thrm"], "math": ["n=2", "n=1", "n=3", "n"], "#text": "The two conditions that make up the induction proof combine to\ndemonstrate that  holds for  as an extension of the\nfact that  holds for .\nThis fact, combined again with condition (2) or (2a), indicates\nthat  also holds for , and so on.\nThus,  holds for all values of  (larger than the\nbase cases) once the two conditions have been proved."}, {"emphasis": "assumption", "strong": ["Thrm", "Thrm"], "math": ["n", "n"], "title_reference": "induction hypothesis", "#text": "What makes mathematical induction so powerful (and so mystifying to\nmost people at first) is that we can take advantage of the\n that  holds for all values less\nthan  as a tool to help us prove that  holds\nfor .\nThis is known as the .\nHaving this assumption to work with makes the induction step\neasier to prove than tackling the original theorem itself.\nBeing able to rely on the induction hypothesis provides extra\ninformation that we can bring to bear on the problem."}, "Recursion and induction have many similarities.\nBoth are anchored on one or more base cases.\nA recursive function relies on the ability to call itself to get the\nanswer for smaller instances of the problem.\nLikewise, induction proofs rely on the truth of the induction\nhypothesis to prove the theorem.\nThe induction hypothesis does not come out of thin air.\nIt is true if and only if the theorem itself is true, and\ntherefore is reliable within the proof context.\nUsing the induction hypothesis it do work is exactly the same as using\na recursive call to do work.", {"math": ["\\mathbf{S}(n)", "\\mathbf{S}(n) = \\mathbf{S}(n-1) + n", "\\mathbf{S}(n-1)", "\\mathbf{S}(n-1)", "(n-1)(n)/2", "\\mathbf{S}(n-1) + n"], "#text": "Note carefully what took place in this example.\nFirst we cast  in terms of a smaller occurrence\nof the problem: .\nThis is important because once  comes into the\npicture, we can  use the induction hypothesis to replace\n with .\nFrom here, it is simple algebra to prove that\n equals the\nright-hand side of the original theorem."}, {"title_reference": ["Example #SumIEx", "Example #SumDirect"], "#text": "We can compare the induction proof of Example \nwith the direct proof in Example .\nDifferent people might think one is easier to understand than the\nother, but certainly the writer of the direct proof version had\nto discover an insight unique to that problem that might\nnot be helpful or relevant when proving other summations."}, {"math": "n", "#text": "Our next example of mathematical induction proves a theorem from\ngeometry.\nIt also illustrates a standard technique of induction proof where we\ntake  objects and remove some object to use the\ninduction hypothesis."}, {"title_reference": ["Example #ThmRegion", "Example #ThmStamps", "Example #ThmStamps"], "math": ["n-1", "n", "n"], "emphasis": "some", "#text": "Compare the proof in Example  with that in\nExample .\nFor Example , we took a collection of stamps of\nsize  (which, by the induction hypothesis, must have the\ndesired property) and from that \"built\" a collection of size \nthat has the desired property.\nWe therefore proved the existence of  collection of stamps\nof size  with the desired property."}, {"title_reference": "Example #ThmRegion", "emphasis": ["any", "arbitrary"], "math": ["n", "n"], "#text": "For Example  we must prove that \ncollection of  lines has the desired property.\nThus, our strategy is to take an  collection of\n lines, and \"reduce\" it so that we have a set of lines that\nmust have the desired property because it matches the induction\nhypothesis.\nFrom there, we merely need to show that reversing the original\nreduction process preserves the desired property."}, {"math": ["n-1", "n", "n", "n"], "emphasis": "all", "#text": "In contrast, consider what is required if we attempt to\n\"build\" from a set of lines of size  to one of size\n.\nWe would have great difficulty justifying that  possible\ncollections of  lines are covered by our building process.\nBy reducing from an arbitrary collection of  lines to\nsomething less, we avoid this problem."}, {"math": ["n", "n-1", "n", "n-1", "n"], "#text": "Another advantage to thinking in terms of \"reducing from \"\nrather than \"building up from \" is that reducing is more\nlike what we do when we write a recursive function.\nIn recursion, we would naturally compute some\nfunction of  by calling the function (recursively) on\n and then using the result to compute the value for\n."}, "This section's final example shows how induction can be used to\nprove that a recursive function produces the correct result.", "We can use a similar process to prove many recursive programs correct.\nThe general form is to show that the base cases perform correctly, and\nthen to use the induction hypothesis to show that the recursive step\nalso produces the correct result.\nPrior to this, we must prove that the function always terminates,\nwhich might also be done using an induction proof."], "enumerated_list": {"@enumtype": "arabic", "@prefix": "", "@suffix": ".", "list_item": [{"paragraph": {"title_reference": "Base Case", "strong": "Thrm", "math": "n = c", "#text": ":  holds for , and"}}, {"paragraph": {"title_reference": "Induction Step", "strong": ["Thrm", "Thrm"], "math": ["n - 1", "n"], "#text": ":\nIf  holds for , then  holds for ."}}]}, "definition_list": {"definition_list_item": {"term": {"strong": "Induction Step:", "#text": "2a."}, "definition": {"paragraph": {"strong": ["Thrm", "Thrm"], "math": ["k, c \\leq k < n", "n"], "#text": "If  holds for all , then\n holds for ."}}}}, "target": [{"@refid": "sumiex"}, {"@refid": "nodds"}, {"@refid": "factrecurproof"}, {"@refid": "thmstamps"}, {"@refid": "twocolor"}, {"@refid": "thmregion"}], "topic": [{"@ids": "sumiex", "@names": "sumiex", "title": "Example", "paragraph": [{"math": ["n", "\\mathbf{S}(n)"], "#text": "Here is a sample proof by mathematical induction.\nCall the sum of the first  positive integers ."}, {"strong": "Theorem:", "math": "\\mathbf{S}(n) = n(n+1)/2", "#text": "."}, {"strong": "Proof:", "#text": "The proof is by mathematical induction."}], "enumerated_list": {"@enumtype": "arabic", "@prefix": "", "@suffix": ".", "list_item": [{"paragraph": {"strong": "Check the base case.", "math": ["n = 1", "\\mathbf{S}(1) = 1(1+1)/2", "\\mathbf{S}(1)", "1(1+1)/2 = 1"], "#text": "For , verify that .\n is simply the sum of the first positive\nnumber, which is 1.\nBecause , the formula is correct for the base\ncase."}}, {"paragraph": {"strong": "State the induction hypothesis.", "#text": "The induction hypothesis is"}, "math_block": {"@xml:space": "preserve", "#text": "\\mathbf{S}(n-1) = \\sum_{i=1}^{n-1} i =\n\\frac{(n-1)((n-1)+1)}{2} = \\frac{(n-1)(n)}{2}."}}, {"paragraph": [{"strong": ["Use the assumption from the induction hypothesis for", "to show that the result is true for"], "math": ["n-1", "n", "\\mathbf{S}(n-1) =  (n-1)(n)/2", "\\mathbf{S}(n) = \\mathbf{S}(n-1) + n", "\\mathbf{S}(n-1)"], "#text": ".\nThe induction hypothesis states that\n,\nand because ,\nwe can substitute for  to get"}, "Thus, by mathematical induction,"], "math_block": [{"@xml:space": "preserve", "#text": "\\sum_{i=1}^n i &=& \\left(\\sum_{i=1}^{n-1} i\\right) + n\n                   = \\frac{(n-1)(n)}{2} + n\\\\\n               &=&\\frac{n^2 - n + 2n}{2} = \\frac{n(n+1)}{2}."}, {"@xml:space": "preserve", "#text": "\\mathbf{S}(n) = \\sum_{i=1}^n i = n(n+1)/2."}]}]}}, {"@ids": "nodds", "@names": "nodds", "title": "Example", "paragraph": [{"math": ["n", "n^2", "n", "2n - 1"], "#text": "Here is another simple proof by induction that illustrates\nchoosing the proper variable for induction.\nWe wish to prove by induction that the sum of the first \npositive odd numbers is .\nFirst we need a way to describe the 'th odd number, which is\nsimply .\nThis also allows us to cast the theorem as a summation."}, {"strong": "Theorem:", "math": "\\sum_{i=1}^n (2i - 1) = n^2", "#text": "."}, {"strong": "Proof:", "math": ["n = 1", "1 = 1^2"], "#text": "The base case of  yields , which is\ntrue.\nThe induction hypothesis is"}, {"math": ["n", "n", "n-1", "n"], "#text": "We now use the induction hypothesis to show that the theorem\nholds true for .\nThe sum of the first  odd numbers is simply the sum of the\nfirst  odd numbers plus the 'th odd number.\nIn the second line below, we will use the induction hypothesis to\nreplace the partial summation (shown in brackets in the first line)\nwith its closed-form solution.\nAfter that, algebra takes care of the rest."}, "Thus, by mathematical induction,"], "math_block": [{"@xml:space": "preserve", "#text": "\\sum_{i=1}^{n-1} (2i - 1) = (n-1)^2."}, {"@xml:space": "preserve", "#text": "\\sum_{i=1}^n (2i - 1) &=& \\left[ \\sum_{i=1}^{n-1} (2i - 1) \\right] + 2n - 1\\\\\n                      &=& [(n-1)^2] + 2n - 1\\\\\n                      &=& n^2 - 2n + 1 + 2n - 1\\\\\n                      &=& n^2."}, {"@xml:space": "preserve", "#text": "\\sum_{i=1}^n (2i - 1) = n^2."}]}, {"@ids": "factrecurproof", "@names": "factrecurproof", "title": "Example", "paragraph": ["This example shows how we can use induction to prove that a proposed\nclosed-form solution for a recurrence relation is correct.", {"strong": "Theorem:", "math": ["\\mathbf{T}(n) = \\mathbf{T}(n-1) + 1; \\quad \\mathbf{T}(1) = 0", "\\mathbf{T}(n) = n - 1"], "#text": "The recurrence relation\n\nhas closed-form solution ."}, {"strong": "Proof:", "math": ["\\mathbf{T}(2) = \\mathbf{T}(1) + 1 = 0 + 1 = 1", "\\mathbf{T}(2) = 2 - 1 = 1"], "#text": "To prove the base case, we observe from the definition that\n.\nFrom the proposed closed-form solution we get\n, which matches the definition."}, {"math": "\\mathbf{T}(n-1) = n-2", "#text": "The induction hypothesis is that .\nCombining the definition of the recurrence with the induction\nhypothesis, we see immediately that"}, {"math": "n > 1", "#text": "for .\nThus, we have proved the theorem correct by mathematical induction."}], "math_block": {"@xml:space": "preserve", "#text": "\\mathbf{T}(n) = \\mathbf{T}(n-1) + 1 = n-2 + 1 = n-1"}}, {"@ids": "thmstamps", "@names": "thmstamps", "title": "Example", "paragraph": ["This example uses induction without involving summations or other\nequations.\nIt also illustrates a more flexible use of base cases.", {"strong": "Theorem:", "math": "\\geq 4", "#text": "2 cent and 5 cent stamps can be used to form any value\n(for values )."}, {"strong": "Proof:", "math": ["\\geq 4", "n-1", "n", "n-1"], "#text": "The theorem defines the problem for values \nbecause it does not hold for the values 1 and 3.\nUsing 4 as the base case, a value of 4 cents can be made from two\n2 cent stamps.\nThe induction hypothesis is that a value of  can be\nmade from some combination of 2 cent and 5 cent stamps.\nWe now use the induction hypothesis to show how to get the value\n from 2 cent and 5 cent stamps.\nEither the makeup for value  includes a 5 cent stamp,\nor it does not.\nIf so, then replace a 5 cent stamp with three 2 cent stamps.\nIf not, then the makeup must have included at least two 2 cent\nstamps (because it is at least of size 4 and contains only 2 cent\nstamps).\nIn this case, replace two of the 2 cent stamps with a single\n5 cent stamp.\nIn either case, we now have a value of n made up of\n2 cent and 5 cent stamps.\nThus, by mathematical induction, the theorem is correct."}]}, {"title": "Example", "paragraph": ["Here is an example using strong induction.", {"strong": "Theorem:", "math": "n > 1, n", "#text": "For  is divisible by some prime number."}, {"strong": "Proof:", "math": ["n = 2", "a, 2 \\leq a < n", "n", "n", "n", "n", "n = a \\times b", "a", "b", "n", "a", "n"], "emphasis": "any", "#text": "For the base case, choose .\n2 is divisible by the prime number 2.\nThe induction hypothesis is that  value ,\nis divisible by some prime number.\nThere are now two cases to consider when proving the theorem for\n.\nIf  is a prime number, then  is divisible by itself.\nIf  is not a prime number, then \nfor  and , both integers less than  but\ngreater than 1.\nThe induction hypothesis tells us that  is divisible by some\nprime number.\nThat same prime number must also divide .\nThus, by mathematical induction, the theorem is correct."}]}, {"@ids": "thmregion", "@names": "thmregion", "title": "Example", "paragraph": [{"title_reference": ["two-coloring", "Figure #TwoColor"], "#text": "Define a  for a\nset of regions as a way of assigning one of two colors to each region\nsuch that no two regions sharing a side have the same color.\nFor example, a chessboard is two-colored.\nFigure  shows a two-coloring for the plane\nwith three lines.\nWe will assume that the two colors to be used are black and white."}, {"strong": "Theorem:", "math": "n", "#text": "The set of regions formed by  infinite lines in the plane\ncan be two-colored."}, {"strong": "Proof:"}], "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "TwoColoringProofCON", "@long_name": "TwoColoringProofCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"title": "Example", "paragraph": [{"literal": "fact", "#text": "We would like to prove that function  does indeed compute\nthe factorial function.\nThere are two distinct steps to such a proof.\nThe first is to prove that the function always terminates.\nThe second is to prove that the function returns the correct value."}, {"strong": "Theorem:", "literal": "fact", "math": "n", "#text": "Function  will terminate for any value of ."}, {"strong": "Proof:", "literal": ["fact", "fact", "fact", "fact", "fact(n-1)", "fact(n-1)"], "math": ["n \\leq 0", "n-1", "n", "n \\geq 12"], "#text": "For the base case, we observe that  will terminate directly\nwhenever .\nThe induction hypothesis is that  will terminate for\n.\nFor , we have two possibilities.\nOne possibility is that .\nIn that case,  will terminate directly because it will\nfail its assertion test.\nOtherwise,  will make a recursive call to .\nBy the induction hypothesis,  must terminate."}, {"strong": "Theorem:", "literal": "fact", "#text": "Function  does compute the factorial function for any value\nin the range 0 to 12."}, {"strong": "Proof:", "math": ["n=0", "n=1", "n *", "= (n-1)!", "n * (n-1)! = n!"], "title_reference": ["fact(n)", "(n-1)!", "n"], "literal": ["fact(n-1)", "fact(n)", "fact(n-1)", "fact(n-1)", "fact(n)"], "#text": "To prove the base case, observe that when  or\n,  returns the correct value of 1.\nThe induction hypothesis is that  returns the correct\nvalue of .\nFor any value  within the legal range,  returns\n .\nBy the induction hypothesis,  ,\nand because , we have proved that \nproduces the correct result."}]}], "raw": [{"@format": "xml", "@ids": "twocolor", "@names": "twocolor", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "twoColorCON", "@long_name": "twoColorCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Background/twoColorCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Background/TwoColoringProofCON.js"}]}]}}