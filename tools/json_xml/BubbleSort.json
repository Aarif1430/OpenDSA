{"document": {"@dupnames": "bubble\\ sort", "@ids": "bubble-sort", "@source": "<string>", "@title": "Bubble Sort", "title": "Bubble Sort", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "index": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Sorting/BubbleSortAnalysisCON.css"}], "section": [{"@dupnames": "bubble\\ sort", "@ids": "id1", "title": "Bubble Sort", "paragraph": [{"title_reference": ["Bubble Sort", "Theta(n^2)", "Insertion Sort <insertion sort> <InsertionSort>", "Selection Sort <selection sort> <SelectionSort>"], "#text": "Our next sorting algorithm is called .\nBubble Sort is often taught to novice programmers in\nintroductory computer science courses.\nThis is unfortunate, because Bubble Sort has no redeeming features\nwhatsoever.\nIt is rather slow, even compared to the other \nsorts that are commonly known.\nIt is not particularly intutitive --\nnobody is going to come naturally to Bubble Sort as a way to sort\ntheir Bridge hand or their pile of bills like they might with\n or\n.\nHowever, Bubble Sort can viewed as a close relative of\nSelection Sort."}, {"literal": ["for", "for"], "#text": "Like Insertion Sort, Bubble Sort consists of a simple double \nloop.\nThe inner  loop moves through the record array from left to\nright, comparing adjacent keys.\nIf a record's key value is greater than the key of its right\nneighbor, then the two records are swapped.\nOnce the record with the largest key value is encountered, this\nprocess will cause it to \"bubble\" up to the right of the array\n(which is where Bubble Sort gets its name).\nThe second pass through the array repeats this process.\nHowever, because we know that the record with the largest value\nalready reached the right of the array on the first pass, there is no\nneed to compare the rightmost two records on the second pass.\nLikewise, each succeeding pass through the array compares adjacent\nrecords, looking at one less record toward the end than did the\npreceding pass.\nHere is an implementation."}, "Now we continue with the second pass. However, since the largest\nrecord has \"bubbled\" to the very right, we will not need to look at\nit again.", "Bubble Sort continues in this way until the entire array is sorted.", "The following visualization shows the complete Bubble Sort.\nYou can input your own data if you like.", "Now try for yourself to see if you understand how Bubble Sort works."], "raw": [{"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "bubblesortS1CON", "@long_name": "bubblesortS1CON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "bubblesortS2CON", "@long_name": "bubblesortS2CON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ss", "@exer_name": "bubblesortAV", "@long_name": "bubblesortAV", "@points": "0.0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "BubsortPRO", "@long_name": "BubsortPRO", "@points": "1.0", "@required": "True", "@threshold": "5"}}], "line_block": {"line": null}}, {"@ids": "bubble-sort-analysis", "@names": "bubble\\ sort\\ analysis", "title": "Bubble Sort Analysis", "paragraph": ["The following visualization illustrates the running time analysis of\nBubble Sort.", "Thus, Bubble Sort's running time is roughly the same\nin the best, average, and worst cases.", {"title_reference": "Theta(n^2)", "#text": "The number of swaps required depends on how often a\nrecord's value is less than that of the record immediately preceding\nit in the array.\nWe can expect this to occur for about half the comparisons in the\naverage case, leading to  for the\nexpected number of swaps.\nThe actual number of swaps performed by Bubble Sort will be identical\nto that performed by Insertion Sort."}, "Here are some review questions to check your understanding of\nBubble Sort."], "raw": [{"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "BubbleSortAnalysisCON", "@long_name": "BubbleSortAnalysisCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "BubsortSumm", "@long_name": "BubsortSumm", "@points": "1.0", "@required": "True", "@threshold": "5"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Sorting/bubblesortS1CON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Sorting/bubblesortS2CON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Sorting/BubbleSortAnalysisCON.js"}]}]}}