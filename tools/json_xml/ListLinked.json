{"document": {"@dupnames": "linked\\ lists", "@ids": "linked-lists", "@source": "<string>", "@title": "Linked Lists", "title": "Linked Lists", "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/List/llistCON.css"}], "section": [{"@dupnames": "linked\\ lists", "@ids": "id1", "title": "Linked Lists", "paragraph": [{"title_reference": ["linked list", "dynamic memory allocation", "nodes <node>"], "#text": "In this module we present one of the two traditional implementations\nfor lists, usually called a .\nThe linked list uses ,\nthat is, it allocates memory for new list elements as needed.\nThe following diagram illustrates the linked list concept.\nHere there are three  that\nare \"linked\" together.\nEach node has two boxes.\nThe box on the right holds a link to the next node in the list.\nNotice that the rightmost node has a diagonal slash through its link\nbox, signifying that there is no link coming out of this box."}, {"title_reference": ["stack <stack> <Stack>", "queue <queue> <Queue>", "singly linked list", "one-way list"], "literal": ["Link", "Link", "element", "next"], "#text": "Because a list node is a distinct object (as opposed to simply a cell\nin an array), it is good practice to make a separate list node class.\n(We can also re-use the list node class to implement linked\nimplementations for the  and\n data structures.\nHere is an implementation for list nodes, called the  class.\nObjects in the  class contain an  field to\nstore the element value, and a  field to store a pointer to\nthe next node on the list.\nThe list built from such nodes is called a ,\nor a , because each list node\nhas a single pointer to the next node on the list."}, {"literal": ["Link", "element", "link"], "#text": "The  class is quite simple.\nThere are two forms for its constructor, one with\nan initial element value and one without.\nMember functions allow the link user to get or set the \nand  fields."}], "target": {"@refid": "linkedlistnodes"}, "raw": [{"@format": "xml", "@ids": "linkedlistnodes", "@names": "linkedlistnodes", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "llistRepCON", "@long_name": "llistRepCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "llistBadCON", "@long_name": "llistBadCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}], "section": [{"@ids": "why-this-has-problems", "@names": "why\\ this\\ has\\ problems", "title": "Why This Has Problems", "paragraph": {"literal": ["head", "tail", "curr", "insert", "remove"], "#text": "There are a number of problems with the representation just\ndescribed.\nFirst, there are lots of special cases to code for.\nFor example, when the list is empty we have\nno element for , , and  to point to.\nImplementing special cases for  and \nincreases code complexity, making it harder to understand,\nand thus increases the chance of introducing bugs."}, "raw": {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "llistBadDelCON", "@long_name": "llistBadDelCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}}, {"@ids": "a-better-solution", "@names": "a\\ better\\ solution", "title": "A Better Solution", "paragraph": [{"title_reference": "header node", "#text": "Fortunately, there is a fairly easy way to deal with all of the\nspecial cases, as well as the problem with deleting the last node.\nMany special cases can be eliminated by implementing\nlinked lists with an additional \nas the first node of the list.\nThis header node is a link node like any other, but its value is\nignored and it is not considered to be an actual element of the list.\nThe header node saves coding effort because we no longer need to\nconsider special cases for empty lists or when the current position is\nat one end of the list.\nThe cost of this simplification is the space for the header node.\nHowever, there are space savings due to smaller code size,\nbecause statements to handle the special cases are omitted.\nWe get rid of the remaining special cases related to being at the end\nof the list by adding a \"trailer\" node that also never stores a\nvalue."}, "The following diagram shows initial conditions for a linked list\nwith header and trailer nodes.", "Here is what a list with some elements looks like with the header and\ntrailer nodes added.", "Adding the trailer node also solves our problem with deleting the last\nnode on the list, as we will see when we take a closer look at the\nremove method's implementation."], "target": [{"@refid": "linkedlistinit"}, {"@refid": "linkedlisttailer"}], "raw": [{"@format": "xml", "@ids": "linkedlistinit", "@names": "linkedlistinit", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "llistInitCON", "@long_name": "llistInitCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@ids": "linkedlisttailer", "@names": "linkedlisttailer", "@xml:space": "preserve", "inlineav": {"@type": "dgm", "@exer_name": "llistHeaderCON", "@long_name": "llistHeaderCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}]}]}, {"@ids": "linked-list-implementation", "@names": "linked\\ list\\ implementation", "title": "Linked List Implementation", "paragraph": [{"literal": "LList", "#text": "Here is the implementation for the linked list class,\nnamed ."}, "Here are some special cases for linked list insertion: Inserting at\nthe end, and inserting to an empty list."], "raw": [{"@format": "xml", "@xml:space": "preserve", "codeinclude": "null"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "llistVarsCON", "@long_name": "llistVarsCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "llistConsCON", "@long_name": "llistConsCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "llistInsertCON", "@long_name": "llistInsertCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "llistSpecialCON", "@long_name": "llistSpecialCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "LlistInsertPRO", "@long_name": "LlistInsertPRO", "@points": "1.0", "@required": "True", "@threshold": "5"}}], "line_block": [{"line": null}, {"line": null}, {"line": null}]}, {"@ids": "linked-list-remove", "@names": "linked\\ list\\ remove", "title": "Linked List Remove", "raw": [{"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "llistRemoveCON", "@long_name": "llistRemoveCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "avembed": {"@type": "ka", "@exer_name": "LlistRemovePRO", "@long_name": "LlistRemovePRO", "@points": "1.0", "@required": "True", "@threshold": "5"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "llistOtherCON", "@long_name": "llistOtherCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llist.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistRepCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistBadCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistBadDelCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistInitCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistHeaderCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistVarsCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistConsCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistInsertCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistSpecialCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistRemoveCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/List/llistOtherCON.js"}], "paragraph": {"title_reference": "Theta(1)", "#text": "Implementations for the remaining operations each require\n time."}}]}}