{"document": {"@dupnames": "trees\\ versus\\ tries", "@ids": "trees-versus-tries", "@source": "<string>", "@title": "Trees versus Tries", "title": "Trees versus Tries", "subtitle": {"@dupnames": "trees\\ versus\\ tries", "@ids": "id1", "#text": "Trees versus Tries"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": [{"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, {"@format": "xml", "@xml:space": "preserve", "odsalink": "AV/Development/TreeTrieCON.css"}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "TreeTimelineCON", "@long_name": "TreeTimelineCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "inlineav": {"@type": "ss", "@exer_name": "TrieTimelineCON", "@long_name": "TrieTimelineCON", "@points": "0", "@required": "True", "@threshold": "1.0"}}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Development/TreeTimelineCON.js"}, {"@format": "xml", "@xml:space": "preserve", "odsascript": "AV/Development/TrieTimelineCON.js"}], "paragraph": ["We see that all letters with codes beginning with\n'0' are stored in the left branch, while all letters with codes\nbeginning with '1' are stored in the right branch.\nContrast this with storing records in a BST.\nThere, all records with key value less than the root value are stored\nin the left branch, while all records with key values greater than the\nroot are stored in the right branch.", "Recall that the Huffman coding tree stored in the left branch all\nletters whose codes start with 0, and in the right branch all letters\nwhose codes start with 1.\nWe can use this same concept to store records in a search tree that is\nslightly different from the behavior of a BST.\nWe can view all keys stored as appearing on a numberline.\nThe BST splits the numberline based on the positions of key values as\nit receives them.\nIn contrast, we could split key values based on their binary\nreprsentation similar to what the Huffman coding tree does.\nThe following slideshows present this in more detail."], "line_block": {"line": null}}}