<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document ids="k-ary-trees" names="k-ary\ trees" source="&lt;string&gt;" title="K-ary Trees"><title><title_reference>K</title_reference>-ary Trees</title><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><paragraph><title_reference>K</title_reference>-ary trees are trees whose internal nodes all have exactly
<title_reference>K</title_reference> children.
Thus, a full binary tree is a 2-ary tree.
The PR Quadtree discussed in Module <title_reference>&lt;Spatial&gt;</title_reference> is an example
of a 4-ary tree.
Because <title_reference>K</title_reference>-ary tree nodes have a fixed number of children,
unlike general trees, they are relatively easy to implement.
In general, <title_reference>K</title_reference>-ary trees bear many similarities to binary
trees, and similar implementations can be used for <title_reference>K</title_reference>-ary tree
nodes.
Note that as <title_reference>K</title_reference> becomes large, the potential number of <literal>null</literal>
pointers grows, and the difference between the required sizes for
internal nodes and leaf nodes increases.
Thus, as <title_reference>K</title_reference> becomes larger, the need to choose separate
implementations for the internal and leaf nodes becomes more
pressing.</paragraph><paragraph><title_reference>Full K-ary trees &lt;full K-ary tree&gt;</title_reference> and
<title_reference>complete K-ary trees &lt;complete K-ary tree&gt;</title_reference> are analogous
to full and complete binary trees, respectively.</paragraph><raw format="xml" xml:space="preserve"><todo>null</todo></raw><paragraph>Many of the properties of binary trees extend to <title_reference>K</title_reference>-ary trees.
Equivalent theorems to those in Module numref`&lt;BinSpace&gt;` regarding the
number of <literal>null</literal> pointers in a <title_reference>K</title_reference>-ary tree and the
relationship between the number of leaves and the number of internal
nodes in a <title_reference>K</title_reference>-ary tree can be derived.
We can also store a complete <title_reference>K</title_reference>-ary tree in an array,
using simple formulas to compute a node's relations in a manner
similar to that used in
Section <title_reference>&lt;CompleteTree&gt;</title_reference>.</paragraph></document>