{"document": {"@dupnames": "random\\ numbers", "@ids": "random-numbers", "@source": "<string>", "@title": "Random Numbers", "title": "Random Numbers", "subtitle": {"@dupnames": "random\\ numbers", "@ids": "id1", "#text": "Random Numbers"}, "comment": [{"@xml:space": "preserve", "#text": "This file is part of the OpenDSA eTextbook project. See"}, {"@xml:space": "preserve", "#text": "http://algoviz.org/OpenDSA for more details."}, {"@xml:space": "preserve", "#text": "Copyright (c) 2012-2013 by the OpenDSA Project Contributors, and"}, {"@xml:space": "preserve", "#text": "distributed under an MIT open source license."}], "raw": {"@format": "xml", "@xml:space": "preserve", "avmetadata": "null"}, "paragraph": ["The success of randomized algorithms depends on having access to a\ngood random number generator.\nWhile modern compilers are likely to include a random number generator\nthat is good enough for most purposes, it is helpful to understand how\nthey work, and to even be able to construct your own in case you don't\ntrust the one provided.\nThis is easy to do.", "First, let us consider what a random sequence.\nFrom the following list, which appears to be a sequence of \"random\"\nnumbers?", {"title_reference": "e", "#text": "In fact, all three happen to be the beginning of a some sequence in\nwhich one could continue the pattern to generate more values (in case\nyou do not recognize it, the third one is the initial digits of the\nirrational constant ).\nViewed as a series of digits, ideally every possible sequence has\nequal probability of being generated (even the three sequences\nabove).\nIn fact, definitions of randomness generally have features such as:"}, {"title_reference": "pseudorandom", "#text": "There is no such thing as a random number sequence, only\n\"random enough\" sequences.\nA sequence is  if no future term can be predicted\nin polynomial time, given all past terms."}, {"title_reference": ["Linear Congruential Method", "seed", "r(1)"], "#text": "Most computer systems use a deterministic algorithm to select\npseudorandom numbers.\nThe most commonly used approach historically is known as the\n (LCM).\nThe LCM method is quite simple.\nWe begin by picking a  that we will call .\nThen, we can compute successive terms as follows."}, {"title_reference": ["b", "t"], "#text": "where  and  are constants."}, {"title_reference": ["bmod", "t-1", "r(i) = r(j)", "i", "j", "r(i+1) = r(j+1)"], "#text": "By definition of the  function, all generated numbers\nmust be in the range 0 to .\nNow, consider what happens when  for values\n and .\nOf course then  which means that we have a\nrepeating cycle."}, {"title_reference": ["t-1", "t", "r(0) = 0", "b", "t"], "#text": "Since the values coming out of the random number generator are between\n0 and , the longest cycle that we can hope for has length\n.\nIn fact, since , it cannot even be quite this long.\nIt turns out that to get a good result, it is crucial to pick good\nvalues for both  and .\nTo see why, consider the following example."}, "If you would like to write a simple LCM random number generator of\nyour own, an effective one can be made with the following formula."], "bullet_list": [{"@bullet": "*", "list_item": [{"paragraph": "1, 1, 1, 1, 1, 1, 1, 1, 1, ..."}, {"paragraph": "1, 2, 3, 4, 5, 6, 7, 8, 9, ..."}, {"paragraph": "2, 7, 1, 8, 2, 8, 1, 8, 2, ..."}]}, {"@bullet": "*", "list_item": [{"paragraph": {"title_reference": "unpredictable", "#text": "One cannot predict the next item. The series is ."}}, {"paragraph": {"title_reference": "equidistribution", "#text": "The series cannot be described more briefly than simply listing\nit out. This is the  property."}}]}], "math_block": [{"@xml:space": "preserve", "#text": "r(i) = (r(i-1)\\times b) \\bmod t"}, {"@xml:space": "preserve", "#text": "r(i) = 16807 r(i-1) \\bmod 2^{31} - 1."}], "topic": {"title": "Example", "paragraph": [{"title_reference": ["t", "b"], "#text": "Given a  value of 13, we can get very different results\ndepending on the  value that we pick, in ways that are\nhard to predict."}, {"title_reference": ["b=5", "b", "b"], "#text": "In the case of , the generator goes through only a short\nsequence before repeating, with the series depending on the seed value\nchosen.\nClearly, a  value of 5 is far inferior to  values\nof 6 or 7 in this example."}], "math_block": [{"@xml:space": "preserve", "#text": "r(i) = 6r(i-1) \\bmod 13 =\n\\quad ..., 1, 6, 10, 8, 9, 2, 12, 7, 3, 5, 4, 11, 1, ...\\\\"}, {"@xml:space": "preserve", "#text": "r(i) = 7r(i-1) \\bmod 13 =\n\\quad ..., 1, 7, 10, 5, 9, 11, 12, 6, 3, 8, 4, 2, 1, ...\\\\"}, {"@xml:space": "preserve", "#text": "\\begin{eqnarray}\nr(i) = 5r(i-1) \\bmod 13 &=& ..., 1, 5, 12, 8, 1, ...\\\\\n&& ..., 2, 10, 11, 3, 2, ...\\\\\n&& ..., 4, 7, 9, 6, 4, ...\\\\\n&& ..., 0, 0, ...\\\\\n\\end{eqnarray}"}]}, "footnote": {"@auto": "1", "@ids": "id2", "@names": "1", "label": "1", "paragraph": "Another approach is based on\nusing a computer chip that generates random numbers resulting\nfrom \"thermal noise\" in the system.\nTime will tell if this approach replaces deterministic approaches."}}}