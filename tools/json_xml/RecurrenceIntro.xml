<?xml version="1.0" encoding="utf8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document dupnames="recurrence\ relations" ids="recurrence-relations" source="&lt;string&gt;" title="Recurrence Relations"><title>Recurrence Relations</title><subtitle dupnames="recurrence\ relations" ids="id1">Recurrence Relations</subtitle><comment xml:space="preserve">This file is part of the OpenDSA eTextbook project. See</comment><comment xml:space="preserve">http://algoviz.org/OpenDSA for more details.</comment><comment xml:space="preserve">Copyright (c) 2012-2016 by the OpenDSA Project Contributors, and</comment><comment xml:space="preserve">distributed under an MIT open source license.</comment><raw format="xml" xml:space="preserve"><avmetadata>null</avmetadata></raw><raw format="xml" xml:space="preserve"><odsalink>AV/Background/LinearRecurrencesCON.css</odsalink></raw><raw format="xml" xml:space="preserve"><odsalink>AV/Background/LinearRecurrencesNCON.css</odsalink></raw><paragraph>The running time for a recursive algorithm is most easily expressed by
a recursive expression because the total time for the recursive
algorithm includes the time to run the recursive
call(s).
A <title_reference>recurrence relation</title_reference> defines a function by means of an
expression that includes one or more (smaller) instances of itself.
A classic example is the recursive definition for the
factorial function:</paragraph><math_block xml:space="preserve">n! = (n-1)! \cdot n\ \mbox{for}\ n&gt;1; \quad 1! = 0! = 1.</math_block><paragraph>Another standard example of a recurrence is the Fibonacci
sequence:</paragraph><block_quote><math_block xml:space="preserve">\mbox{Fib}(n) = \mbox{Fib}(n-1) + \mbox{Fib}(n-2)\ \mbox{for}\ n&gt;2;
\quad\mbox{Fib}(1) = \mbox{Fib}(2) = 1.</math_block></block_quote><paragraph>From this definition, the first seven numbers of the
Fibonacci sequence are</paragraph><math_block xml:space="preserve">1, 1, 2, 3, 5, 8,\ \mbox{and}\ 13.</math_block><paragraph>Notice that this definition contains two parts: the general
definition for <math>\mbox{Fib}(n)</math> and the base cases for
<math>\mbox{Fib}(1)</math> and <math>\mbox{Fib}(2)</math>.
Likewise, the definition for factorial contains a recursive part and
base cases.</paragraph><paragraph>Recurrence relations are often used to model the cost of recursive
functions.
For example, the number of multiplications required by a recursive
version of the factorial function for an input of size
<math>n</math> will be zero when <math>n = 0</math> or <math>n = 1</math> (the base
cases), and it will be one plus the cost of calling <literal>fact</literal> on a
value of <math>n-1</math>.
This can be defined using the following recurrence:</paragraph><math_block xml:space="preserve">\mathbf{T}(n) = \mathbf{T}(n-1) + 1\ \mbox{for}\ n&gt;1;
\quad \mathbf{T}(0) = \mathbf{T}(1) = 0.</math_block><paragraph>As with summations, we typically wish to replace the recurrence
relation with a closed-form solution.
One approach is to expand the recurrence by replacing any
occurrences of <math>\mathbf{T}</math> on the right-hand side with its
definition.</paragraph><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="LinearRecurrencesCON"
    long_name="LinearRecurrencesCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><paragraph>A slightly more complicated recurrence is</paragraph><math_block xml:space="preserve">\mathbf{T}(n) = \mathbf{T}(n-1) + n; \quad \mathbf{T}(1) = 1.</math_block><paragraph>Again, we will use expansion to help us find a closed form solution.</paragraph><raw format="xml" xml:space="preserve"><inlineav
    type="ss"
    exer_name="LinearRecurrencesNCON"
    long_name="LinearRecurrencesNCON"
    points="0"
    required="True"
    threshold="1.0">
</inlineav>
</raw><raw format="xml" xml:space="preserve"><odsascript>AV/Background/LinearRecurrencesCON.js</odsascript></raw><raw format="xml" xml:space="preserve"><odsascript>AV/Background/LinearRecurrencesNCON.js</odsascript></raw></document>