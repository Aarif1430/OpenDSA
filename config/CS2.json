{
  "title": "CS2 Generic Course: Data Structures",
  "build_dir": "Books",
  "code_dir": "SourceCode/",
  "code_lang": {
    "Java_Generic": { "ext":["java"], "label":"Java (Generic)","lang":"java"}
  },
  "tabbed_codeinc": false,
  "lang": "en",
  "module_origin": "https://lti.cs.vt.edu",
  "exercise_server": "https://ltitest.cs.vt.edu:8443",
  "logging_server": "https://ltitest.cs.vt.edu:8443",
  "score_server": "https://ltitest.cs.vt.edu:8443",
  "build_JSAV": false,
  "build_cmap": false,
  "allow_anonymous_credit": true,
  "suppress_todo": true,
  "assumes": "ADT; relations",
  "chapters": {
    "Preface": {
      "Intro": {
        "long_name": "How to Use this System",
        "sections": {}
      }
    },
    "Introduction": {
      "Background/IntroDSA": {
        "long_name": "Introduction to Data Structures and Algorithms",
        "sections": {
          "Introduction": {},
          "Course Goals": {},
          "Some Software Engineering Topics": {
            "showsection": false
          },
          "A Philosophy of Data Structures": {},
          "Selecting a Data Structure": {},
          "Introduction Summary Questions": {
            "IntroSumm": {
              "long_name": "Introduction Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      },
      "Design/ADT": {
        "long_name": "Abstract Data Types",
        "sections": {
          "Abstract Data Types": {
            "ADTCON": {}
          },
          "ADT Summary Questions": {
            "IntroADTSumm": {
              "long_name": "ADT Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 4
            }
          }
        }
      }
    },
    "List Interface & Array-based Lists": {
      "List/ListADT": {
        "long_name": "List ADT",
        "sections": {
          "List Terminology and Notation": {},
          "Defining the ADT": {
            "listADTposCON": {
              "long_name": "List ADT Positions Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "ADT Practice Exercise": {
            "ListADTPROG": {
              "long_name": "List ADT Programming Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          }
        }
      },
      "List/ListArray": {
        "long_name": "Array-based Lists",
        "sections": {
          "Array-Based List Implementation": {
            "alistVarsCON": {
              "long_name": "Array-based List Variables Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Array-based List Positions": {
            "alistIntroCON": {
              "long_name": "Array-based List Intro Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insert": {
            "alistInsertCON": {
              "long_name": "Array-based List Insertion Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insert Practice Exericse": {
            "AlistInsertPRO": {
              "long_name": "Array-based List Insert Exercise",
              "required": true,
              "points": 1,
              "threshold": 3
            }
          },
          "Append": {
            "alistAppendCON": {
              "long_name": "Array-based List Append Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Remove": {
            "alistRemoveCON": {
              "long_name": "Array-based List Remove",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Remove Practice Exericse": {
            "AlistRemovePRO": {
              "long_name": "Array-based List Remove Exercise",
              "required": true,
              "points": 1,
              "threshold": 4
            }
          },
          "Array-based List Practice Questions": {
            "ALSumm": {
              "long_name": "Array-based List Summary",
              "required": true,
              "points": 1,
              "threshold": 3
            }
          }
        }
      }
    },
    "Algorithm Analysis": {
      "AlgAnal/AnalIntro": {
        "long_name": "Comparing Algorithms",
        "sections": {
          "Comparing Algorithms": {},
          "Basic Operations and Input Size": {},
          "Growth Rates": {
            "CompareGrowth": {
              "long_name": "Comparing Growth Rates Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 3
            }
          },
          "Growth Rates Exercise": {
            "GrowthRatesPRO": {
              "long_name": "Growth Rates Ordering Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          }
        }
      },
      "AlgAnal/AnalCases": {
        "long_name": "Best, Average, and Worst Cases",
        "sections": {
          "Best, Worst, and Average Cases": {
            "BestWorstAverageCON": {
              "long_name": "Best, Worst, and Average cases visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "AlgAnal/AnalCompvsAlg": {
        "long_name": "Faster Computer, or Faster Algorithm?",
        "sections": {
          "Faster Computer, or Faster Algorithm?": {
            "FasterCorASumm": {
              "long_name": "Faster Computer or Faster Algorithm Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 2
            }
          }
        }
      },
      "AlgAnal/AnalAsymptotic": {
        "long_name": "Asymptotic Analysis and Upper Bounds",
        "sections": {
          "Introduction": {},
          "Upper Bounds": {},
          "Simplifying Rules": {},
          "Summary": {
            "UpperBoundCON": {
              "long_name": "Upper Bounds visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Practice Questions": {
            "UpperBoundsSumm": {
              "long_name": "Asymptotic Analysis and Upper Bounds Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 4
            }
          }
        }
      },
      "AlgAnal/AnalLower": {
        "long_name": "Lower Bounds and Theta Notation",
        "sections": {
          "Lower Bounds": {},
          "Theta Notation": {},
          "Classifying Functions": {
            "LowerBoundCON": {
              "long_name": "Lower Bounds visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Summary Exercise": {
            "LowerThetaSumm": {
              "long_name": "Lower Bounds and Theta Notation Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 5
            }
          }
        }
      },
      "AlgAnal/AnalProgram": {
        "long_name": "Calculating the Running Time of a Program",
        "sections": {
          "Calculating Program Running Time": {},
          "Case Study: Two Search Algorithms": {
            "binarySearchCON": {
              "long_name": "Binary Search Algorithm Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Binary Search Practice Exercise": {
            "binarySearchPRO": {
              "long_name": "Binary Search Proficiency Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 1.0
            }
          },
          "Analyzing Binary Search": {
            "DivideAndConquerRecurrenceSimpleCON": {
              "long_name": "Linear Recurrence visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Summary Exercise": {
            "AnalProgramSumm": {
              "long_name": "Program Code Analysis Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      },
      "AlgAnal/AlgAnalSumm": {
        "long_name": "Algorithm Analysis Summary Exercises",
        "sections": {
          "Summary Exercise: CS2": {
            "showsection": true,
            "AlgAnalCS2114Summ": {
              "long_name": "Algorithm Analysis Summary Questions",
              "required": false,
              "points": 1.0,
              "threshold": 5
            }
          },
          "Summary Exercise: CS3": {
            "showsection": false,
            "AlgAnalSumm": {
              "long_name": "Algorithm Analysis Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      }
    },
    "Stacks": {
      "List/StackArray": {
        "long_name": "Array-based Stacks",
        "sections": {
          "Stack Terminology": {},
          "Array-Based Stacks": {
            "astackVarCON": {
              "long_name": "Array stack variables slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Positioning Top": {
            "astackTopCON": {
              "long_name": "Array stack top position slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Push": {
            "astackPushCON": {
              "long_name": "Array stack push slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Push Practice": {
            "AstackPushPRO": {
              "long_name": "Array-based Stack Push Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Pop": {
            "astackPopCON": {
              "long_name": "Array stack pop slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Pop Practice": {
            "AstackPopPRO": {
              "long_name": "Array-based Stack Pop Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "List/StackLinked": {
        "long_name": "Linked Stacks",
        "sections": {
          "Linked Stack Implementation": {
            "lstackDiagramCON": {}
          },
          "Linked Stack Push": {
            "lstackPushCON": {
              "long_name": "Linked stack push",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Push Practice": {
            "LstackPushPRO": {
              "long_name": "Linked Stack Push Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Linked Stack Pop": {
            "lstackPopCON": {
              "long_name": "Linked stack pop",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Pop Practice": {
            "LstackPopPRO": {
              "long_name": "Linked Stack Pop Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Comparison of Array-Based and Linked Stacks": {
            "lstackTwostackCON": {}
          }
        }
      }
    },
    "Recursion": {
      "RecurTutor/RecIntro": {
        "long_name": "Recursion Chapter Introduction",
        "sections": {
          "Introduction": {
            "recurIntroDelegateCON": {
              "long_name": "Recursion Introduction Slideshow 1",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Taking a Closer Look": {
            "recurIntroDetailsCON": {
              "long_name": "Recursion Introduction Slideshow 2",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "RecurTutor/Write": {
        "long_name": "How to write a recursive function",
        "sections": {
          "The Big Picture": {
            "recurWriteStepsCON": {
              "long_name": "Recursion Code Writing Slideshow 1",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Some Different Approaches to Writing the Sum Function": {
            "recurWriteSumCON": {
              "long_name": "Recursion Code Writing Slideshow 2",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "RecurTutor/CodeCompletionEx": {
        "long_name": "Code Completion Exercises",
        "sections": {
          "Introduction": {},
          "Programming Exercise: Largest": {
            "RecCLargestPROG": {
              "long_name": "Recursion Code Completion Exercise Largest",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Multiply": {
            "RecCMultiplyPROG": {
              "long_name": "Recursion Code Completion Exercise Multiply",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: GCD": {
            "RecCGcdPROG": {
              "long_name": "Recursion Code Completion Exercise GCD",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Logs": {
            "RecCLogPROG": {
              "long_name": "Recursion Code Completion Exercise Log",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Cummulative Sum": {
            "RecCSumtokPROG": {
              "long_name": "Recursion Code Completion Exercise Sum to k",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Array Sum": {
            "RecCAddoddPROG": {
              "long_name": "Recursion Code Completion Exercise Add Odd",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Digits Sum": {
            "RecCSumOfDigitsPROG": {
              "long_name": "Recursion Code Completion Exercise Sum of Digits",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Characters": {
            "RecCCountChrPROG": {
              "long_name": "Recursion Code Completion Exercise Count Characters",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          }
        }
      },
      "RecurTutor/HarderWrite": {
        "long_name": "Writing More Sophisticated Recursive Functions",
        "sections": {}
      },
      "RecurTutor/HarderCodeCompletionEx": {
        "long_name": "Harder Code Completion Exercises",
        "sections": {
          "Programming Exercise: Array Min": {
            "RecHMinPROG": {
              "long_name": "Recursion Code Completion Exercise: Minimum",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Sring Reverse": {
            "RecHIsReversePROG": {
              "long_name": "Recursion Code Completion Exercise: Is Reverse",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Decimal to Binary": {
            "RecHDecibinaryPROG": {
              "long_name": "Recursion Code Completion Exercise: Decimal to Binary",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          }
        }
      },
      "RecurTutor/WritingEx": {
        "long_name": "Code Writing Exercises",
        "sections": {
          "Programming Exercise: Paren Balance": {
            "RecWIsbalancedPROG": {
              "long_name": "Recursion Code Writing Exercise: Is Balanced",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Palindrome": {
            "RecWCheckPalPROG": {
              "long_name": "Recursion Code Writing Exercise: Check Palindrom",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Reverse String": {
            "RecWRevStringPROG": {
              "long_name": "Recursion Code Writing Exercise: Reverse String",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Cannonballs": {
            "RecWCannonballPROG": {
              "long_name": "Recursion Code Writing Exercise: Cannon Ball",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Pascal's Triangle": {
            "RecWPascalPROG": {
              "long_name": "Recursion Code Writing Exercise: Pascal",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Programming Exercise: Stack Reversal": {
            "RecWStackRevPROG": {
              "long_name": "Recursion Code Writing Exercise: Stack Reversal",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          }
        }
      },
      "RecurTutor/Trace": {
        "long_name": "Tracing recursive code",
        "sections": {
          "Tracing Recursive Code": {
            "recurTraceWindCON": {
              "long_name": "Recursion Tracing Winding and Unwinding",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Sum Example": {
            "recurTraceSumCON": {
              "long_name": "Recursion Tracing Sum Function",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Factorial Example": {
            "recurTraceFactCON": {
              "long_name": "Recursion Tracing Factorial Function",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Another Summing Example": {
            "recurTraceSum2CON": {
              "long_name": "Recursion Tracing Sum Winding and Unwinding",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "A Domino Analogy": {
            "recurTraceDmnCON": {
              "long_name": "Recursion Tracing General Domino Effect",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Using the Domino Analogy": {
            "recurTraceDmnPrntCON": {
              "long_name": "Recursion Tracing Domino Effect for Printing",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Another Domino Example": {
            "recurTraceDmnCntCON": {
              "long_name": "Recursion Tracing Domino Effect for Counting",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Towers of Hanoi": {
            "TOHfigCON": {},
            "recurTraceTOHCON": {
              "long_name": "Recursion Tracing Towers of Hanoi",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "RecurTutor/TracingEx": {
        "long_name": "Tracing Practice Exercises",
        "sections": {
          "Forward Flow Tracing Exercises": {
            "RecTraceSummFwdFlow.html": {
              "long_name": "Recursion Tracing Exercises Set 1",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Backward Flow Tracing Exercises": {
            "RecTraceSummbckwrdFlow": {
              "long_name": "Recursion Tracing Exercises Set 2",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Find Error Tracing Exercises": {
            "RecTraceSummFuncErr": {
              "long_name": "Recursion Tracing Exercises Set 3",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },
          "Two Recursive Calls Tracing Exercises": {
            "RecTraceSummTwoRC": {
              "long_name": "Recursion Tracing Exercises Set 4",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          }, 
          "How Many Times Tracing Exercises": {
            "RecTraceSummHowmany": {
              "long_name": "Recursion Tracing Exercises Set 5",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          },        
          "Harder Tracing Exercises": {
            "RecTraceSummHard": {
              "long_name": "Recursion Tracing Exercises Set 6",
              "required": true,
              "points": 1.0,
              "threshold": 1.0,
              "showhide": "Show"
            }
          }
        }
      },
      "RecurTutor/RecSummaryEx": {
        "long_name": "Recursion Summary Exercises",
        "sections": {
          "Summary Questions": {
            "RecChapterSumm": {
              "long_name": "Recursion Summary Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 5.0,
              "showhide": "Show"
            }
          }
        }
      }
    },
    "Sorting": {
      "Sorting/InSort": {
        "long_name": "Chapter Introduction: Sorting",
        "sections": {}
      },
      "Sorting/SortNotation": {
        "long_name": "Sorting Terminology and Notation",
        "sections": {
          "Sorting Terminology and Notation": {
            "SortIntroSumm": {
              "long_name": "Sorting Intro Summary",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          }
        }
      },
      "Design/Comparison": {
        "long_name": "Comparing Records",
        "sections": {
          "Comparing Records": {
            "CompareSumm": {
              "long_name": "Record Comparison Summary Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "Sorting/InsertionSort": {
        "long_name": "Insertion Sort",
        "sections" : {
          "Insertion Sort": {},
          "How It Works": {
            "insertionsortCON": {
              "long_name": "Insertion Sort Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Putting It Together": {
            "insertionsortAV": {
              "long_name": "Insertion Sort Visualization",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            }
          },
          "Insertion Sort Practice": {
            "InssortPRO": {
              "long_name": "Insertion Sort Proficiency Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          },
          "Insertion Sort Worst Case": {
            "InsertionSortWorstCaseCON": {
              "long_name": "Insertion Sort Worst Case Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insertion Sort Best Case": {
            "InsertionSortBestCaseCON": {
              "long_name": "Insertion Sort Best Case Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },

          "Insertion Sort Analysis": {
            "InsertionSortAverageCaseCON": {
              "long_name": "Insertion Sort Average Case Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insertion Sort Summary Questions": {
            "InssortSumm": {
              "long_name": "Insertion Sort Summary Exercise",
              "required": true,
              "points": 1.0,

              "threshold": 5
            }
          }
        }
      },
      "Sorting/BubbleSort": {
        "long_name": "Bubble Sort",
        "sections": {
          "Bubble Sort": {},
          "Bubble Sort Iteration 1": {
            "bubblesortS1CON": {
              "long_name": "Bubble Sort Slideshow 1",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Bubble Sort Iteration 2": {
            "bubblesortS2CON": {
              "long_name": "Bubble Sort Slideshow 2",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Putting It Together": {
            "bubblesortAV": {
              "long_name": "Bubble Sort Visualization",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            }
          },
          "Bubble Sort Practice": {
            "BubsortPRO": {
              "long_name": "Bubble Sort Proficiency Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 3
            }
          },
          "Bubble Sort Analysis": {
            "BubbleSortAnalysisCON": {
              "long_name": "Bubble Sort Analysis Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Bubble Sort Review Questions": {
            "BubsortSumm": {
              "long_name": "Bubble Sort Summary Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      },
      "Sorting/SelectionSort": {
        "long_name": "Selection Sort",
        "sections": {
          "Selection Sort": {},
          "Selection Sort Iteration 1": {
            "selectionsortS1CON": {
              "long_name": "Selection Sort Slideshow 1",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Selection Sort Iteration 2": {
            "selectionsortS2CON": {
              "long_name": "Selection Sort Slideshow 2",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Putting It Together": {
            "selectionsortAV": {
              "long_name": "Selection Sort Visualization",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            }
          },
          "Selection Sort Practice Exercise": {
            "SelsortPRO": {
              "long_name": "Selection Sort Proficiency Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 5
            }
          },
          "Selection Sort Analysis": {
            "SelectionSortAnalysisCON": {
              "long_name": "Selection Sort Analysis Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Selection Sort Summary Questions": {
            "SelsortSumm": {
              "long_name": "Selection Sort Summary Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      }
    },
    "Queues": {
      "List/Queue": {
        "long_name": "Queues",
        "sections": {
          "Queue Terminology": {},
          "Array-Based Queues": {
            "aqueueFirstCON": {
              "long_name": "Array-based Queue Positions Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "An Improvement": {
            "aqueueDriftCON": {
              "long_name": "Array-based Queue Drift Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "A Problem": {
            "aqueueBadCON": {
              "long_name": "Array-based Queue Bad Representation Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "The Circular Queue": {
            "aqueueCircularCON": {
              "long_name": "Circular Array-based Queue Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Defining Positions": {
            "aqueueEmptyCON": {
              "long_name": "Empty Circular Array-based Queue Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Array-based Queue Implementation": {
            "aqueueVarCON": {
              "long_name": "Array-based Queue Variables Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Array-based Enqueue Practice": {
            "AqueueEnqueuePRO": {
              "long_name": "Array-based Queue Enqueue Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Array-based Dequeue Practice": {
            "AqueueDequeuePRO": {
              "long_name": "Array-based Queue Dequeue Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "List/QueueLinked": {
        "long_name": "Linked Queues",
        "sections": {
          "Linked Queues": {
            "lqueueIntroCON": {
              "long_name": "Linked Queue Intro",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Linked Enqueue": {
            "lqueueEnqueueCON": {
              "long_name": "Linked Queue Enqueue",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Linked Enqueue Practice": {
            "LqueueEnqueuePRO": {
              "long_name": "Linked Queue Enqueue Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Linked Dequeue": {
            "lqueueDequeueCON": {
              "long_name": "Linked Queue Dequeue",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Linked Dequeue Practice": {
            "LqueueDequeuePRO": {
              "long_name": "Linked Queue Dequeue Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Comparison of Array-Based and Linked Queues": {},
          "Stack and Queue Summary Questions": {
            "StackQSumm": {
              "long_name": "Stack/Queue Summary Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      }
    },
    "Linked Lists": {
      "List/ListLinked": {
        "long_name": "Linked Lists",
        "sections": {
          "Linked Lists": {
            "llistRepCON": { },
            "llistBadCON": {
              "long_name": "Linked List Slideshow 1",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Why This Has Problems": {
            "llistBadDelCON": {
              "long_name": "Linked List Slideshow 2",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "A Better Solution": {
            "llistInitCON": { },
            "llistHeaderCON": {}
          },
          "Linked List Implementation": {
            "llistVarsCON": {
              "long_name": "Linked List Variables Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Class Constructors": {
            "llistConsCON": {
              "long_name": "Linked List Constructors Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insert Method": {
            "llistInsertCON": {
              "long_name": "Linked List Insert Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insertion Special Cases": {
            "llistSpecialCON": {
              "long_name": "Linked List Special Insert Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Linked List Insert Practice": {
            "LlistInsertPRO": {
              "long_name": "Linked List Insert Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Remove": {
            "llistRemoveCON": {
              "long_name": "Linked List Remove Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Remove Practice": {
            "LlistRemovePRO": {
              "long_name": "Linked List Remove Exercise",
              "required": true,
              "points": 2,
              "threshold": 5
            }
          },
          "Other Operations": {
            "llistOtherCON": {
              "long_name": "Linked List Position Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "List/ListAnalysis": {
        "long_name": "Comparison of List Implementations",
        "sections":{
          "Space Comparison": {
            "ListOverhead": {
              "long_name": "Breakeven Point Exercise",
              "required": true,
              "points": 1,
              "threshold": 3
            }
          },
          "Time Comparison": {},
          "Practice Questions": {
            "LLSumm": {
              "long_name": "Linked List Summary Exercise",
              "required": true,
              "points": 2,
              "threshold": 6
            }
          }
        }
      },
      "List/ListDouble": {
        "long_name": "Doubly Linked Lists",
        "sections": {
          "Doubly Linked Lists": {
            "dlistDiagramCON": {}
          },
          "Insert": {
            "dlistInsertCON": {
              "long_name": "Doubly Linked List Insert",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Append": {
            "dlistAppendCON": {
              "long_name": "Doubly Linked List Append",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Remove": {
            "dlistRemoveCON": {
              "long_name": "Doubly Linked List Remove",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Prev": {
            "dlistPrevCON": {
              "long_name": "Doubly Linked List Prev",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Mangling Pointers": {}
        }
      },
      "List/ListElement": {
        "long_name": "List Element Implementations",
        "sections": {
          "List Element Implementations": {
            "listElementDataCON": {
              "long_name": "List Element Data",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Homogeneity": {
            "listElementTypeCON": {
              "long_name": "List Element Type",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Element Deletion": {
            "listElementDeleteCON": {
              "long_name": "List Element Delete",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Practice Questions": {
            "ListSumm": {
              "long_name": "List Summary Questions",
              "required": true,
              "points": 1,
              "threshold": 3
            }
          }
        }
      },
      "List/Freelist": {
        "long_name": "Freelists",
        "sections": {
          "Freelists": {
            "listFreeCON": {
              "long_name": "Freelist Slideshow 1",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "List/ListSumm": {
        "long_name": "List Chapter Summary",
        "sections": {
          "Practice Questions": {
            "ListdsSumm": {
              "long_name": "List Data Structures General Questions",
              "required": true,
              "points": 2,
              "threshold": 5
            }
          },
          "Chapter Review Questions": {
            "ListChapterSumm": {
              "long_name": "List Chapter Summary",
              "required": true,
              "points": 2,
              "threshold": 10
            }
          }
        }
      }
    },
    "Binary Trees": {
      "Binary/BinaryTreeIntro": {
        "long_name": "Binary Trees Chapter Introduction",
        "sections": {}
      },
      "Binary/BinaryTree": {
        "long_name": "Binary Tree Terminology",
        "sections": {
          "Definitions and Properties": {
            "BinExampCON": {},
            "BinDiffCON": {},
            "FullCompCON": {}
          },
          "Terminology Practice": {
            "DefSumm": {
              "long_name": "Tree Definition Summary Exercises",
              "required": true,
              "points": 2,
              "threshold": 8
            }
          },
          "Practice Questions": {
            "Treeprobs": {
              "long_name": "Tree/Node Exercises",
              "showhide": "show",
              "required": true,
              "points": 1,
              "threshold": 4
            }
          }
        }
      },
      "Binary/BinaryTreeTraversal": {
        "long_name": "Binary Tree Traversals",
        "sections": {
          "Binary Tree Traversals": {},
          "Preorder Traversal": {
            "preorderCON": {
              "long_name": "Preorder Traversal Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Postorder Traversal": {
            "postorderCON": {
              "long_name": "Postorder Traversal Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Inorder Traversal": {
            "inorderCON": {
              "long_name": "Inorder Traversal Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Implementation": {},
          "Inorder Traversal Practice": {
            "btTravInorderPRO": {
              "long_name": "Binary Tree Inorder Traversal Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Postorder Traversal Practice": {
            "btTravPostorderPRO": {
              "long_name": "Binary Tree Postorder Traversal Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Preorder Traversal Practice": {
            "btTravPreorderPRO": {
              "long_name": "Binary Tree Preorder Traversal Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Summary Questions": {
            "TravSumm": {
              "long_name": "Tree Traversal Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          }
        }
      },
      "Binary/BST": {
        "long_name": "Binary Search Trees",
        "sections": {
          "Binary Search Tree Definition": {},
          "BST Search": {
            "BSTsearchCON": {
              "long_name": "BST Search Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "BST Search Practice": {
            "BSTsearchPRO": {
              "long_name": "BST Search Proficiency Exercise",
              "exer_options": {
                "JXOP-code": "none",
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "undo"
              },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "BST Insert": {
            "BSTinsertCON": {
              "long_name": "BST Insert Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "BST Insert Practice": {
            "BSTinsertPRO": {
              "long_name": "BST Insert Proficiency Exercise",
              "exer_options": {
                "JXOP-code": "none",
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "undo"
              },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Deleting the Maximum Value": {
            "BSTdeletemaxCON": {
              "long_name": "BST deletemax Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "BST Remove": {
            "BSTremoveCON": {
              "long_name": "BST remove Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "BST Remove Practice": {
            "BSTremovePRO": {
              "long_name": "BST Remove Proficiency Exercise",
              "exer_options": {
                "JXOP-code": "none",
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "undo"
              },
              "required": true,
              "points": 2.0,
              "threshold": 0.90
            }
          },
          "BST Analysis": {},
          "Summary Questions": {
            "BSTSumm": {
              "long_name": "BST Question Summary",
              "required": true,
              "points": 1,
              "threshold": 2
            }
          }
        }
      }
    },
    "Appendix": {
      "Glossary": {
        "long_name": "Glossary",
        "sections": {}
      },
      "Bibliography": {
        "long_name": "Bibliography",
        "sections": {}
      }
    }
  }
}
