{
  "title": "Test",
  "build_dir": "Books",
  "code_dir": "SourceCode/",
  "code_lang": {
    "Processing": ["pde"],
    "Java": ["java"],
    "C++": ["cpp"]
  },
  "lang": "en",
  "module_origin": "http://algoviz.org",
  "backend_address": "",
  "build_JSAV": false,
  "allow_anonymous_credit": true,
  "suppress_todo": false,
  "build_cmap": true,
  "glob_exer_options": {
    "JXOP-debug": "true"
  },
  "chapters": {
    "Design 2": {
      "Design/DesignPatterns": {
        "long_name": "Design Patterns",
        "exercises": {}
      },
      "Design/DesignAltList": {
        "long_name": "Alternate List ADT Design",
        "exercises": {}
      },
      "Design/Comparison": {
        "long_name": "Comparing Records",
        "exercises": {
          "CompareSumm": {
            "long_name": "Record Comparison Summary Exercise",
            "required": true,
            "points": 1,
            "threshold": 5
          }
        }
      },
      "Design/Dictionary": {
        "long_name": "The Dictionary ADT",
        "exercises": {}
      },
      "Design/DesignSumm": {
        "long_name": "Design Chapter Summary",
        "exercises": {
          "DesignSumm": {
            "long_name": "Design Summary Exercise",
            "required": true,
            "points": 1,
            "threshold": 5
          }
        }
      }
    },
    "Binary Trees": {
      "Binary/BinaryTreeIntro": {
        "long_name": "Binary Trees Chapter Introduction",
        "exercises": {}
      },
      "Binary/BinaryTree": {
        "long_name": "Binary Tree Terminology",
        "exercises": {
          "DprobsAll": {
            "long_name": "Tree Definition Summary",
            "required": true,
            "points": 3,
            "threshold": 8
          }
        }
      },
      "Binary/BinaryTreeFullThm": {
        "long_name": "Full Binary Tree Theorem",
        "exercises": {}
      },
      "Binary/BinaryTreeTraversal": {
        "long_name": "Binary Tree Traversals",
        "exercises": {
          "BTLeafPROG": {
            "long_name": "Node Count Programming Exercise",
            "required": true,
            "points": 1.0,
            "threshold": 1
          },
          "btTravInorderPRO": {
            "long_name": "Binary Tree Inorder Traversal Exercise",
            "required": true,
            "points": 1.0,
            "threshold": 0.90,
            "exer_options": {
              "JXOP-feedback": "continuous",
              "JXOP-fixmode": "fix"
            }
          },
          "btTravPreorderPRO": {
            "long_name": "Binary Tree Preorder Traversal Exercise",
            "required": true,
            "points": 1.0,
            "threshold": 0.90,
            "exer_options": {
              "JXOP-feedback": "continuous",
              "JXOP-fixmode": "fix"
            }
          },
          "btTravPostorderPRO": {
            "long_name": "Binary Tree Postorder Traversal Exercise",
            "required": true,
            "points": 1.0,
            "threshold": 0.90,
            "exer_options": {
              "JXOP-feedback": "continuous",
              "JXOP-fixmode": "fix"
            }
          }
        }
      },
      "Binary/BinaryTreeImpl": {
        "long_name": "Full Binary Tree Node Implementations",
        "exercises": {}
      },
      "Binary/Composite": {
        "long_name": "Composite Design Pattern",
        "exercises": {}
      },
      "Binary/BinaryTreeNodeSpace": {
        "long_name": "Full Binary Tree Node Space Requirements",
        "exercises": {
          "TreeOverheadSumm": {
            "long_name": "Tree Overhead Exercise",
            "required": true,
            "points": 2,
            "threshold": 5
          }
        }
      },
      "Binary/BST": {
        "long_name": "Binary Search Trees",
        "exercises": {
          "BSTsearchCON": {
            "long_name": "BST Search Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BSTsearchPRO": {
            "long_name": "BST Search Proficiency Exercise",
            "required": true,
            "points": 1.0,
            "threshold": 0.90,
            "exer_options": {
              "JXOP-feedback": "atend"
            }
          },
          "BSTinsertCON": {
            "long_name": "BST Insert Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BSTinsertPRO": {
            "long_name": "BST Insert Proficiency Exercise",
            "required": true,
            "points": 1.0,
            "threshold": 0.90,
            "exer_options": {
              "JXOP-feedback": "atend"
            }
          },
          "BSTdeletemaxCON": {
            "long_name": "BST deletemax Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BSTremoveCON": {
            "long_name": "BST remove Slideshow",
            "required": false,
            "points": 0.0,
            "threshold": 1.0
          },
          "BSTremovePRO": {
            "long_name": "BST Remove Proficiency Exercise",
            "required": true,
            "points": 2.0,
            "threshold": 0.90,
            "exer_options": {
              "JXOP-feedback": "continuous",
              "JXOP-fixmode": "undo"
            }
          }
        }
      },
      "Binary/BSTDict": {
        "long_name": "Dictionary Implementation with BST",
        "exercises": {}
      },
      "Development/CompleteTree": {
        "long_name": "Array Implementation for Complete Trees",
        "exercises": {}
      },
      "Development/Heaps": {
        "long_name": "Heaps and Priority Queues",
        "exercises": {
          "heapinsertCON": {},
          "binheapInsertPRO": {
            "long_name": "Heap Insert Exercise",
            "required": true,
            "points": 2.0,
            "threshold": 0.90
          },
          "heapbuildCON": {},
          "binheapBuildPRO": {
            "long_name": "Heap Build Exercise",
            "required": true,
            "points": 1.0,
            "threshold": 0.90
          },
          "heapmaxCON": {},
          "heapdeleteCON": {},
          "binheapDeletePRO": {
            "long_name": "Heap Delete Exercise",
            "required": true,
            "points": 2.0,
            "threshold": 0.90
          },
          "HeapSumm": {
            "long_name": "BST/Heap Summary",
            "required": true,
            "points": 1,
            "threshold": 3
          }
        }
      },
      "Development/Spatial": {
        "long_name": "Spatial Data Structures",
        "exercises": {}
      },
      "Development/Bintree": {
        "long_name": "Bintrees",
        "exercises": {}
      },
      "Development/Huffman": {
        "long_name": "Huffman Coding Trees",
        "exercises": {
          "huffmanCON1": {
            "long_name": "Huffman Coding Tree Slideshow",
            "required": true,
            "points": 0.0,
            "threshold": 1.0
          },
          "HuffmanCoding": {
            "long_name": "Huffman Coding Tree Visualization",
            "required": true,
            "points": 0.0,
            "showhide": "show",
            "threshold": 1.0
          }
        }
      },
      "Development/HuffProof": {
        "long_name": "Proof for Huffman Coding",
        "exercises": {}
      }
    },
    "Appendix": {
      "Glossary": {
        "long_name": "Glossary",
        "exercises": {}
      },
      "Bibliography": {
        "long_name": "Bibliography",
        "exercises": {}
      }
    }
  }
}

