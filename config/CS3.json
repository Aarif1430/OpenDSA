{
  "title": "CS3 Generic DSA Course",
  "build_dir": "Books",
  "code_dir": "SourceCode/",
  "code_lang": {
    "Java": {
      "ext": [
        "java"
      ],
      "label": "Java",
      "lang": "java"
    },
    "Processing": {
      "ext": [
        "pde"
      ],
      "label": "Processing",
      "lang": "java"
    },
    "Java_Generic": {
      "ext": [
        "java"
      ],
      "label": "Java (Generic)",
      "lang": "java"
    },
    "C++": {
      "ext": [
        "cpp",
        "h"
      ],
      "label": "C++",
      "lang": "C++"
    }
  },
  "lang": "en",
  "module_origin": "https://lti.cs.vt.edu",
  "exercise_server": "https://ltitest.cs.vt.edu:8443",
  "logging_server": "https://ltitest.cs.vt.edu:8443",
  "score_server": "https://ltitest.cs.vt.edu:8443",
  "build_JSAV": false,
  "allow_anonymous_credit": true,
  "suppress_todo": false,
  "dispModComp": true,
  "glob_exer_options": {
    "JXOP-debug": "true"
  },
  "chapters": {
    "Preface": {
      "Intro": {
        "long_name": "How to Use this System",
        "sections": {}
      }
    },
    "Introduction": {
      "Background/IntroDSA": {
        "long_name": "Introduction to Data Structures and Algorithms",
        "sections": {
          "Introduction": {},
          "Course Goals": {},
          "Some Software Engineering Topics": {
            "showsection": false
          },
          "A Philosophy of Data Structures": {},
          "Selecting a Data Structure": {},
          "Introduction Summary Questions": {
            "IntroSumm": {
              "long_name": "Introduction Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      },
      "Design/ADT": {
        "long_name": "Abstract Data Types",
        "sections": {
          "Abstract Data Types": {
            "ADTCON": {}
          },
          "ADT Summary Questions": {
            "IntroADTSumm": {
              "long_name": "ADT Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 4
            }
          }
        }
      }
    },
    "Mathematical Background": {
      "Background/MathpreIntro": {
        "long_name": "Chapter Introduction",
        "sections": {}
      },
      "Background/SetDef": {
        "long_name": "Set Definitions",
        "sections": {
          "Set Notation": {},
          "Relations": {},
          "Relations Practice Exercise": {
            "SetTFrelation": {
              "long_name": "Relations Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 5
            }
          },
          "Equivalence Relations Practice Exercise": {
            "SetTFequivrel": {
              "long_name": "Equivalence Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          },
          "Partial Orders": {
            "SetTFpartialorder": {
              "long_name": "PartialOrder Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          }
        }
      },
      "Background/MiscMath": {
        "long_name": "Miscellaneous Notation",
        "sections": {}
      },
      "Background/Logarithms": {
        "long_name": "Logarithms",
        "sections": {
          "Logarithms": {
            "MathLogSumm": {
              "long_name": "Logarithms Practice Questions",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      },
      "Background/Summations": {
        "long_name": "Summations and Recurrence Relations",
        "sections": {
          "Summations": {},
          "Example: Summing Integers from 1 to n": {
            "SummationOneToNCON": {
              "long_name": "Summation of the first N Integers visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Example: Summing Powers of 2": {
            "SummationTwoPowerICON": {
              "long_name": "Summation Two Power I visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Recurrence Relations": {
	    "LinearRecurrencesCON": {
              "long_name": "Linear Recurrences Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Another Recurrence Example": {
	    "LinearRecurrencesNCON": {
              "long_name": "Linear Recurrences Slideshow (n)",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "Background/Proofs": {
        "long_name": "Proofs",
        "sections": {
          "Introduction": {},
          "Direct Proof": {},
          "Proof by Contradiction": {},
          "Proof by Mathematical Induction": {
            "twoColorCON": {},
            "TwoColoringProofCON": {
              "long_name": "Two Coloring Proof Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "Background/Estimation": {
        "long_name": "Estimation",
        "sections": {}
      },
      "Background/MathpreSumm": {
        "long_name": "Chapter Summary",
        "sections": {
          "Chapter Summary Questions": {
            "MathBgSumm": {
              "long_name": "Math Background Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      }
    },
    "Algorithm Analysis": {
      "AlgAnal/AnalChap": {
        "long_name": "Chapter Intro: Algorithm Analysis",
        "sections": {}
      },
      "AlgAnal/AnalPrelim": {
        "long_name": "Problems, Algorithms, and Programs",
        "sections": {
          "Problems": {},
          "Algorithms": {},
          "Programs": {},
          "Summary": {
            "ProblemAlgorithmCON": {
              "long_name": "Problem, Algorithm, and Program definitions Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Summary Questions": {
            "AnalPrelimSumm": {
              "long_name": "Problems, Algorithms, Programs Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 4
            }
          }
        }
      },
      "AlgAnal/AnalIntro": {
        "long_name": "Comparing Algorithms",
        "sections": {
          "Comparing Algorithms": {},
          "Basic Operations and Input Size": {},
          "Growth Rates": {
            "CompareGrowth": {
              "long_name": "Comparing Growth Rates Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 3
            }
          },
          "Growth Rates Exercise": {
            "GrowthRatesPRO": {
              "long_name": "Growth Rates Ordering Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          }
        }
      },
      "AlgAnal/AnalCases": {
        "long_name": "Best, Average, and Worst Cases",
        "sections": {
          "Best, Worst, and Average Cases": {
            "BestWorstAverageCON": {
              "long_name": "Best, Worst, and Average cases visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "AlgAnal/AnalCompvsAlg": {
        "long_name": "Faster Computer, or Faster Algorithm?",
        "sections": {
          "Faster Computer, or Faster Algorithm?": {
            "FasterCorASumm": {
              "long_name": "Faster Computer or Faster Algorithm Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 2
            }
          }
        }
      },
      "AlgAnal/AnalAsymptotic": {
        "long_name": "Asymptotic Analysis and Upper Bounds",
        "sections": {
          "Introduction": {},
          "Upper Bounds": {},
          "Simplifying Rules": {},
          "Summary": {
            "UpperBoundCON": {
              "long_name": "Upper Bounds visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Practice Questions": {
            "UpperBoundsSumm": {
              "long_name": "Asymptotic Analysis and Upper Bounds Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 4
            }
          }
        }
      },
      "AlgAnal/AnalLower": {
        "long_name": "Lower Bounds and Theta Notation",
        "sections": {
          "Lower Bounds": {},
          "Theta Notation": {},
          "Classifying Functions": {
            "LowerBoundCON": {
              "long_name": "Lower Bounds visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Summary Exercise": {
            "LowerThetaSumm": {
              "long_name": "Lower Bounds and Theta Notation Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 5
            }
          }
        }
      },
      "AlgAnal/AnalProgram": {
        "long_name": "Calculating the Running Time of a Program",
        "sections": {
          "Calculating Program Running Time": {},
          "Case Study: Two Search Algorithms": {
            "binarySearchCON": {
              "long_name": "Binary Search Algorithm Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Binary Search Practice Exercise": {
            "binarySearchPRO": {
              "long_name": "Binary Search Proficiency Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 1.0
            }
          },
          "Analyzing Binary Search": {
            "DivideAndConquerRecurrenceSimpleCON": {
              "long_name": "Linear Recurrence visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Summary Exercise": {
            "AnalProgramSumm": {
              "long_name": "Program Code Analysis Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      },
      "AlgAnal/AnalProblem": {
        "long_name": "Analyzing Problems",
        "sections": {
          "Analyzing Problems": {
            "AnalyzingProblemsCON": {
              "long_name": "Worst Case Lower Bound Visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Practice Questions": {
            "AnalProblemSumm": {
              "long_name": "Problem Analysis Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      },
      "AlgAnal/AnalMisunderstanding": {
        "long_name": "Common Misunderstandings",
        "sections": {
          "Common Misunderstandings": {
            "MisunderstandingsGraphCON": {
              "long_name": "Example's graph Visualization",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Practice Questions": {
            "MisSumm": {
              "long_name": "Common Misconceptions Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 4
            }
          }
        }
      },
      "AlgAnal/AnalMultiple": {
        "long_name": "Multiple Parameters",
        "sections": {}
      },
      "AlgAnal/AnalSpace": {
        "long_name": "Space Bounds",
        "sections": {}
      },
      "AlgAnal/AnalTuning": {
        "long_name": "Speeding Up Your Programs",
        "sections": {}
      },
      "AlgAnal/AlgAnalSumm": {
        "long_name": "Algorithm Analysis Summary Exercises",
        "sections": {
          "Summary Exercise: CS2": {
            "showsection": false,
            "AlgAnalCS2114Summ": {
              "long_name": "Algorithm Analysis Summary Questions",
              "required": false,
              "points": 1.0,
              "threshold": 5
            }
          },
          "Summary Exercise: CS3": {
            "AlgAnalSumm": {
              "long_name": "Algorithm Analysis Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          }
        }
      }
    },
    "Linear Structures": {
      "List/ListIntro": {
        "long_name": "Chapter Introduction: Linear Structures",
        "sections": {}
      },
      "List/ListADT": {
        "long_name": "List ADT",
        "sections": {
          "List Terminology and Notation": {},
          "Defining the ADT": {
            "listADTposCON": {
              "long_name": "List ADT Positions Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "ADT Practice Exercise": {
            "ListADTPROG": {
              "long_name": "List ADT Programming Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          }
        }
      },
      "List/ListArray": {
        "long_name": "Array-based Lists",
        "sections": {
          "Array-Based List Implementation": {
            "alistVarsCON": {
              "long_name": "Array-based List Variables Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Array-based List Positions": {
            "alistIntroCON": {
              "long_name": "Array-based List Intro Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insert": {
            "alistInsertCON": {
              "long_name": "Array-based List Insertion Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insert Practice Exericse": {
            "AlistInsertPRO": {
              "long_name": "Array-based List Insert Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Append": {
            "alistAppendCON": {
              "long_name": "Array-based List Append Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Remove": {
            "alistRemoveCON": {
              "long_name": "Array-based List Remove",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Remove Practice Exericse": {
            "AlistRemovePRO": {
              "long_name": "Array-based List Remove Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Array-based List Practice Questions": {
            "ALSumm": {
              "long_name": "Array-based List Summary",
              "required": true,
              "points": 1,
              "threshold": 3
            }
          }
        }
      },
      "List/ListLinked": {
        "long_name": "Linked Lists",
        "sections": {
          "Linked Lists": {
            "llistRepCON": { },
            "llistBadCON": {
              "long_name": "Linked List Slideshow 1",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Why This Has Problems": {
            "llistBadDelCON": {
              "long_name": "Linked List Slideshow 2",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "A Better Solution": {
            "llistInitCON": { },
            "llistHeaderCON": {}
          },
          "Linked List Implementation": {
            "llistVarsCON": {
              "long_name": "Linked List Variables Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Class Constructors": {
            "llistConsCON": {
              "long_name": "Linked List Constructors Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insert Method": {
            "llistInsertCON": {
              "long_name": "Linked List Insert Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Insertion Special Cases": {
            "llistSpecialCON": {
              "long_name": "Linked List Special Insert Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Linked List Insert Practice": {
            "LlistInsertPRO": {
              "long_name": "Linked List Insert Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Remove": {
            "llistRemoveCON": {
              "long_name": "Linked List Remove Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Remove Practice": {
            "LlistRemovePRO": {
              "long_name": "Linked List Remove Exercise",
              "required": true,
              "points": 2,
              "threshold": 5
            }
          },
          "Other Operations": {
            "llistOtherCON": {
              "long_name": "Linked List Position Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "List/ListAnalysis": {
        "long_name": "Comparison of List Implementations",
        "sections":{
          "Space Comparison": {
            "ListOverhead": {
              "long_name": "Breakeven Point Exercise",
              "required": true,
              "points": 1,
              "threshold": 3
            }
          },
          "Time Comparison": {},
          "Practice Questions": {
            "LLSumm": {
              "long_name": "Linked List Summary Exercise",
              "required": true,
              "points": 2,
              "threshold": 6
            }
          }
        }
      },
      "List/ListDouble": {
        "long_name": "Doubly Linked Lists",
        "sections": {
          "Doubly Linked Lists": {
            "dlistDiagramCON": {}
          },
          "Insert": {
            "dlistInsertCON": {
              "long_name": "Doubly Linked List Insert",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Append": {
            "dlistAppendCON": {
              "long_name": "Doubly Linked List Append",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Remove": {
            "dlistRemoveCON": {
              "long_name": "Doubly Linked List Remove",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Prev": {
            "dlistPrevCON": {
              "long_name": "Doubly Linked List Prev",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Mangling Pointers": {}
        }
      },
      "List/ListElement": {
        "long_name": "List Element Implementations",
        "sections": {
          "List Element Implementations": {
            "listElementDataCON": {
              "long_name": "List Element Data",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Homogeneity": {
            "listElementTypeCON": {
              "long_name": "List Element Type",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Element Deletion": {
            "listElementDeleteCON": {
              "long_name": "List Element Delete",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Practice Questions": {
            "ListSumm": {
              "long_name": "List Summary Questions",
              "required": true,
              "points": 1,
              "threshold": 3
            }
          }
        }
      },
      "List/StackArray": {
        "long_name": "Array-based Stacks",
        "sections": {
          "Stack Terminology": {},
          "Array-Based Stacks": {
            "astackVarCON": {
              "long_name": "Array stack variables slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Positioning Top": {
            "astackTopCON": {
              "long_name": "Array stack top position slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Push": {
            "astackPushCON": {
              "long_name": "Array stack push slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Push Practice": {
            "AstackPushPRO": {
              "long_name": "Array-based Stack Push Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Pop": {
            "astackPopCON": {
              "long_name": "Array stack pop slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Pop Practice": {
            "AstackPopPRO": {
              "long_name": "Array-based Stack Pop Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "List/StackLinked": {
        "long_name": "Linked Stacks",
        "sections": {
          "Linked Stack Implementation": {
            "lstackDiagramCON": {}
          },
          "Linked Stack Push": {
            "lstackPushCON": {
              "long_name": "Linked stack push",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Push Practice": {
            "LstackPushPRO": {
              "long_name": "Linked Stack Push Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Linked Stack Pop": {
            "lstackPopCON": {
              "long_name": "Linked stack pop",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Pop Practice": {
            "LstackPopPRO": {
              "long_name": "Linked Stack Pop Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Comparison of Array-Based and Linked Stacks": {
            "lstackTwostackCON": {}
          }
        }
      },
      "List/Freelist": {
        "long_name": "Freelists",
        "sections": {
          "Freelists": {
            "listFreeCON": {
              "long_name": "Freelist Slideshow 1",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "List/StackRecur": {
        "long_name": "Implementing Recursion",
        "sections": {}
      },
      "List/Queue": {
        "long_name": "Queues",
        "sections": {
          "Queue Terminology": {},
          "Array-Based Queues": {
            "aqueueFirstCON": {
              "long_name": "Array-based Queue Positions Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "An Improvement": {
            "aqueueDriftCON": {
              "long_name": "Array-based Queue Drift Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "A Problem": {
            "aqueueBadCON": {
              "long_name": "Array-based Queue Bad Representation Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "The Circular Queue": {
            "aqueueCircularCON": {
              "long_name": "Circular Array-based Queue Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Defining Positions": {
            "aqueueEmptyCON": {
              "long_name": "Empty Circular Array-based Queue Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Array-based Queue Implementation": {
            "aqueueVarCON": {
              "long_name": "Array-based Queue Variables Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Array-based Enqueue Practice": {
            "AqueueEnqueuePRO": {
              "long_name": "Array-based Queue Enqueue Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Array-based Dequeue Practice": {
            "AqueueDequeuePRO": {
              "long_name": "Array-based Queue Dequeue Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "List/QueueLinked": {
        "long_name": "Linked Queues",
        "sections": {
          "Linked Queues": {
            "lqueueIntroCON": {
              "long_name": "Linked Queue Intro",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Linked Enqueue": {
            "lqueueEnqueueCON": {
              "long_name": "Linked Queue Enqueue",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Linked Enqueue Practice": {
            "LqueueEnqueuePRO": {
              "long_name": "Linked Queue Enqueue Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Linked Dequeue": {
            "lqueueDequeueCON": {
              "long_name": "Linked Queue Dequeue",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Linked Dequeue Practice": {
            "LqueueDequeuePRO": {
              "long_name": "Linked Queue Dequeue Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Comparison of Array-Based and Linked Queues": {},
          "Stack and Queue Summary Questions": {
            "StackQSumm": {
              "long_name": "Stack/Queue Summary Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "List/ListSumm": {
        "long_name": "List Chapter Summary",
        "sections": {
          "Practice Questions": {
            "ListdsSumm": {
              "long_name": "List Data Structures General Questions",
              "required": true,
              "points": 2,
              "threshold": 5
            }
          },
          "Chapter Review Questions": {
            "ListChapterSumm": {
              "long_name": "List Chapter Summary",
              "required": true,
              "points": 2,
              "threshold": 10
            }
          }
        }
      }
    },
    "Design": {
      "Design/DesignPatterns": {
        "long_name": "Design Patterns",
        "sections": {
          "Introduction": {},
          "Flyweight": {},
          "Visitor": {},
          "Composite": {},
          "Strategy": {},
          "Summary Questions": {
            "DesignPatternSumm": {
              "long_name": "Design Patterns Summary Exercise",
              "required": true,
              "points": 1,
              "threshold": 4
            }
          }
        }
      },
      "Design/DesignAltList": {
        "long_name": "Alternate List ADT Design",
        "sections": {}
      },
      "Design/Comparison": {
        "long_name": "Comparing Records",
        "sections": {
          "Comparing Records": {
            "CompareSumm": {
              "long_name": "Record Comparison Summary Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "Design/Dictionary": {
        "long_name": "The Dictionary ADT",
        "sections": {
          "The Dictionary ADT": {
            "DesignDictionarySumm": {
              "long_name": "Dictionary Summary Exercise",
              "required": true,
              "points": 1,
              "threshold": 3
            }
          }
        }
      }
    },
    "Binary Trees": {
      "Binary/BinaryTreeIntro": {
        "long_name": "Binary Trees Chapter Introduction",
        "sections": {}
      },
      "Binary/BinaryTree": {
        "long_name": "Binary Tree Terminology",
        "sections": {
          "Definitions and Properties": {
            "BinExampCON": {}
            "BinDiffCON": {}
            "FullCompCON": {}
          },
          "Terminology Practice": {
            "DefSumm": {
              "long_name": "Tree Definition Summary Exercises",
              "required": true,
              "points": 2,
              "threshold": 8
            }
          },
          "Practice Questions": {
            "Treeprobs": {
              "long_name": "Tree/Node Exercises",
              "showhide": "show",
              "required": true,
              "points": 1,
              "threshold": 4
            }
          }
        }
      },
      "Binary/RecursiveDS": {
        "long_name": "Binary Tree as a Recursive Data Structure",
        "sections": {
          "Binary Tree as a Recursive Data Structure": {
            "ListRecDSCON": {},
            "BinRecDSCON": {},
            "SumBinaryTreeCON": {
              "long_name": "Sum values in a Binary Tree Slide Show",
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          }
        }
      },
      "Binary/BinaryTreeFullThm": {
        "long_name": "Full Binary Tree Theorem",
        "sections": {}
      },
      "Binary/BinaryTreeTraversal": {
        "long_name": "Binary Tree Traversals",
        "sections": {
          "Binary Tree Traversals": {},
          "Preorder Traversal": {
            "preorderCON": {
              "long_name": "Preorder Traversal Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Postorder Traversal": {
            "postorderCON": {
              "long_name": "Postorder Traversal Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Inorder Traversal": {
            "inorderCON": {
              "long_name": "Inorder Traversal Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Implementation": {},
          "Inorder Traversal Practice": {
            "btTravInorderPRO": {
              "long_name": "Binary Tree Inorder Traversal Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Postorder Traversal Practice": {
            "btTravPostorderPRO": {
              "long_name": "Binary Tree Postorder Traversal Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Preorder Traversal Practice": {
            "btTravPreorderPRO": {
              "long_name": "Binary Tree Preorder Traversal Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Summary Questions": {
            "TravSumm": {
              "long_name": "Tree Traversal Summary Questions",
              "required": true,
              "points": 1.0,
              "threshold": 3
            }
          }
        }
      },
      "Binary/WritingTraversals": {
        "long_name": "Writing Tree Traversals",
        "sections": {
          "Introduction": {},
          "Base Case": {},
          "The Recursive Call": {
            "BTincPROG": {
              "long_name": "Node Increment Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 1
            }
          }
        }
      },
      "BTRecurTutor/BinaryTreeInfFlw": {
        "long_name": "Binary Tree Information Flow",
        "sections": {
          "Introduction": {},
          "Local": {
            "BTsetdepthPROG": {
              "long_name": "Set Node Depth Programming Exercise",
              "showhide": "show",
              "required": true,
              "points": 2.0,
              "threshold": 1
            }
          },
          "Collect-and-return": {
            "BinaryTreeMistakesCON": {
              "long_name": "Binary Tree Common Mistakes Slideshow",
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Collect-and-return Practice": {
            "BTreturnPROGSumm": {
              "long_name": "Collect-and-Return Programming Exercises",
              "showhide": "show",
              "required": true,
              "points": 4.0,
              "threshold": 2.0
            }
          },
          "Combining Information Flows": {
            "BTcheckvalPROG": {
              "long_name": "Node Value Count Programming Exercise",
              "showhide": "show",
              "required": true,
              "points": 2.0,
              "threshold": 1
            }
          },
          "Combination Problems": {
            "BTtransferPROGSumm": {
              "long_name": "Duel-Flow Programming Exercises",
              "showhide": "show",
              "required": true,
              "points": 4.0,
              "threshold": 2
            }
          }
        }
      },
      "Binary/BinaryTreeImpl": {
        "long_name": "Full Binary Tree Node Implementations",
        "sections": {
          "Binary Tree Node Implementations": {
            "expressionTraversalCON": {
              "long_name": "Expression Tree Traversal Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "Binary/Composite": {
        "long_name": "Composite Design Pattern",
        "sections": {
          "Composite-based Expression Tree": {
            "compositeTraversalCON": {
              "long_name": "Composite Expression Tree Traversal Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "Binary/BinaryTreeNodeSpace": {
        "long_name": "Full Binary Tree Node Space Requirements",
        "sections": {
          "Binary Tree Space Requirements": {
            "TreeOverhead": {
              "long_name": "Tree Overhead Exercise",
              "required": true,
              "points": 2,
              "threshold": 5
            }
          }
        }
      },
      "Binary/BST": {
        "long_name": "Binary Search Trees",
        "sections": {
          "Binary Search Tree Definition": {},
          "BST Search": {
            "BSTsearchCON": {
              "long_name": "BST Search Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "BST Search Practice": {
            "BSTsearchPRO": {
              "long_name": "BST Search Proficiency Exercise",
              "exer_options": {
                "JXOP-code": "none",
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "undo"
              },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "BST Insert": {
            "BSTinsertCON": {
              "long_name": "BST Insert Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "BST Insert Practice": {
            "BSTinsertPRO": {
              "long_name": "BST Insert Proficiency Exercise",
              "exer_options": {
                "JXOP-code": "none",
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "undo"
              },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Deleting the Maximum Value": {
            "BSTdeletemaxCON": {
              "long_name": "BST deletemax Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "BST Remove": {
            "BSTremoveCON": {
              "long_name": "BST remove Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "BST Remove Practice": {
            "BSTremovePRO": {
              "long_name": "BST Remove Proficiency Exercise",
              "exer_options": {
                "JXOP-code": "none",
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "undo"
              },
              "required": true,
              "points": 2.0,
              "threshold": 0.90
            }
          },
          "BST Analysis": {},
          "Summary Questions": {
            "BSTSumm": {
              "long_name": "BST Question Summary",
              "required": true,
              "points": 1,
              "threshold": 2
            }
          }
        }
      },
      "Binary/BSTDict": {
        "long_name": "Dictionary Implementation with BST",
        "sections": {}
      },
      "BTRecurTutor/BinaryTreeGuidedInfFlw": {
        "long_name": "Binary Tree Guided Information Flow",
        "sections": {
          "Binary Tree Guided Information Flow": {
            "IneffBinaryTreeRangeCON": {
              "long_name": "Inefficient Binary Tree Traversal on Range Slide Show",
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Guided Traversal Practice": {
            "BSTsmallcountPROG": {
              "long_name": "BST Small Value Count Programming Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 2.0,
              "showhide": "Show"
            }
          }
        }
      },
      "BTRecurTutor/MultipleBinaryTrees": {
        "long_name": "Multiple Binary Trees",
        "sections": {
          "Practice Exercises": {
            "MultiTreePROGSumm": {
              "long_name": "Multiple Binary Trees Exercises",
              "required": true,
              "points": 3.0,
              "threshold": 3.0,
              "showhide": "Show"
            }
          }
        }
      },
      "BTRecurTutor/BSTCheck": {
        "long_name": "BSTcheck Function",
        "sections": {}
      },
      "Binary/CompleteTree": {
        "long_name": "Array Implementation for Complete Trees",
        "sections": {
          "Array Implementation for Complete Binary Trees": {
            "CompleteFIB": {
              "long_name": "Complete Tree Exercise",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "Binary/Heaps": {
        "long_name": "Heaps and Priority Queues",
        "sections": {
          "Heaps and Priority Queues": {},
          "Heap Insert": {
            "heapinsertCON": {
              "long_name": "Heap insert Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Heap Insert Practice": {
            "heapinsertPRO": {
              "long_name": "Heap Insert Proficiency Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 2.0,
              "threshold": 0.90
            }
          },
          "Building a Heap": {
            "heapbuildCON": {
              "long_name": "Heapbuild Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Heap Build Practice": {
            "heapbuildPRO": {
              "long_name": "Heap Build Proficiency Exercise",
              "exer_options": { "JXOP-code": "none" },
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Heap Build Analysis": {
            "heapbuildProofCON": {
              "long_name": "Heap build analysis proof Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Removing the Max Value": {
            "heapmaxCON": {
              "long_name": "Remove Max Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Removing the Max Value Practice": {
            "heapremovePRO": {
              "long_name": "Heap Remove Exercise",
              "exer_options": {
                "JXOP-code": "none"
              },
              "required": true,
              "points": 2.0,
              "threshold": 0.90
            }
          },
          "Removing an Arbritrary Value": {
            "heapremoveCON": {
              "long_name": "Remove Any Slideshow",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Practice Questions": {
            "HeapSumm": {
              "long_name": "Heap Question Summary",
              "required": true,
              "points": 2.0,
              "threshold": 5
            }
          }
        }
      },
      "Binary/Huffman": {
        "long_name": "Huffman Coding Trees",
        "sections": {
          "Fixed-length and Variable-length codes": {},
          "Building Huffman Coding Trees": {
            "huffmanBuildCON": {
              "long_name": "Huffman Coding Tree Slideshow: Build",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Assigning and Using Huffman Codes (1)": {
            "huffmanLabelCON": {
              "long_name": "Huffman Coding Tree Slideshow: Label Edges",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Assigning and Using Huffman Codes (2)": {
            "huffmanCodesCON": {
              "long_name": "Huffman Coding Tree Slideshow: Setting Codes",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Decoding" {
            "huffmanDecodeCON": {
              "long_name": "Huffman Coding Tree Slideshow: Decoding",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Decoding Practice": {
            "HuffmanDecodePRO": {
              "long_name": "Huffman Decoding Proficiency Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 5
            }
          },
          "How efficient is Huffman coding?": {}
        }
      },
      "Binary/TreeTrie": {
        "long_name": "Trees versus Tries",
        "sections": {
          "Trees versus Tries (1)": {
            "TreeTimeline": {
              "long_name": "Tree timeline Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Trees versus Tries (2)": {
            "TrieTimeline": {
              "long_name": "Trie timeline Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "Development/HuffProof": {
        "long_name": "Proof for Huffman Coding",
        "sections": {}
      },
      "Binary/BinaryChapSumm": {
        "long_name": "Binary Tree Chapter Summary",
        "sections": {
          "Summary Questions": {
            "BinaryChapSumm": {
              "long_name": "BinaryChapSumm",
              "showhide": "show",
              "required": true,
              "points": 2.0,
              "threshold": 10
            }
          }
        }
      }
    },
    "Appendix": {
      "Glossary": {
        "long_name": "Glossary",
        "exercises": {},
        "sections": {}
      },
      "Bibliography": {
        "long_name": "Bibliography",
        "exercises": {},
        "sections": {}
      }
    }
  }
}
